1
00:00:00,750 --> 00:00:05,550
Well, I think that we both understand exactly how this autocomplete widget is going to work in general,

2
00:00:05,550 --> 00:00:07,290
at least how we're going to interact with it.

3
00:00:07,290 --> 00:00:09,090
So let's start writing out some code.

4
00:00:09,180 --> 00:00:14,250
The first thing we're going to do, or the first step is to just show a plain text input to the user.

5
00:00:14,370 --> 00:00:20,000
Any time a user types inside there, we're going to initiate a search of our API and try to find some

6
00:00:20,010 --> 00:00:21,660
corresponding list of movies.

7
00:00:22,200 --> 00:00:27,390
So to get started, I'm going to go back over to my code editor and find my indexed HTML file.

8
00:00:29,250 --> 00:00:30,210
At the very bottom.

9
00:00:30,970 --> 00:00:34,060
I'm going to find a dive inside of here with the class of container.

10
00:00:34,330 --> 00:00:37,840
You and I are going to add all of our HTML inside of this div.

11
00:00:38,110 --> 00:00:42,040
The other HTML that you see right above it is responsible for just showing the header and we're not

12
00:00:42,040 --> 00:00:45,430
going to have to mess with any of that stuff at all for this entire application.

13
00:00:46,240 --> 00:00:49,900
So inside of that container, I'm going to add in an input element.

14
00:00:51,460 --> 00:00:51,730
Okay.

15
00:00:51,780 --> 00:00:52,510
So that's pretty much it.

16
00:00:52,510 --> 00:00:54,640
That's all the HTML we have to add right now.

17
00:00:54,940 --> 00:00:57,670
So I'll then go back over to the indexed JTS file.

18
00:00:58,990 --> 00:01:03,160
And inside of here, we'll add in a little bit of code to select that input element.

19
00:01:03,430 --> 00:01:08,590
Then we'll add in an event listener and we'll say that any time a user types inside there, we're going

20
00:01:08,590 --> 00:01:13,540
to run our fetch data function and try to search for some particular movie.

21
00:01:15,130 --> 00:01:19,660
So at the very bottom of the file, I'm going to delete the fetch data function call because we no longer

22
00:01:19,660 --> 00:01:23,770
want to search the API automatically when our application first starts.

23
00:01:24,540 --> 00:01:28,050
Well then select my input and assign it to an input variable.

24
00:01:28,590 --> 00:01:30,960
So I'll say document query selector.

25
00:01:32,370 --> 00:01:33,900
Input like so.

26
00:01:35,230 --> 00:01:36,710
I'll add on my event listener.

27
00:01:36,710 --> 00:01:38,720
So I'll do an input dot add.

28
00:01:40,050 --> 00:01:44,550
Event listener and we're going to watch for the input event.

29
00:01:44,790 --> 00:01:48,930
The input event is triggered any time that a user changes the text inside that input.

30
00:01:48,930 --> 00:01:50,520
And that's exactly what we want.

31
00:01:51,590 --> 00:01:55,820
Then as a second argument, I'll put in my callback function that's going to be called with some event

32
00:01:55,820 --> 00:01:56,540
object.

33
00:01:56,990 --> 00:02:03,370
So now remember, we can get access to the change text by referencing event target value.

34
00:02:03,380 --> 00:02:06,560
That's going to be whatever the user just typed into that input.

35
00:02:07,330 --> 00:02:14,200
So now if we want to try to search the API, we can take that variable right there and pass it as an

36
00:02:14,200 --> 00:02:15,700
argument into fetch data.

37
00:02:16,180 --> 00:02:20,620
We can then do a little bit of work on fetch data to make sure that it receives an argument and uses

38
00:02:20,620 --> 00:02:24,670
that as the query string or as the query first search of the API.

39
00:02:26,240 --> 00:02:29,030
So inside of my event listener, I'm going to call.

40
00:02:29,860 --> 00:02:30,580
That's data.

41
00:02:31,780 --> 00:02:33,490
With the value from the input.

42
00:02:35,000 --> 00:02:37,760
Well, then make sure that I receive that as an argument to this function.

43
00:02:37,760 --> 00:02:38,480
So I'll call that.

44
00:02:38,480 --> 00:02:41,270
How about search term like so?

45
00:02:42,310 --> 00:02:45,190
And then we will make sure that we pass that in as a parameter.

46
00:02:45,490 --> 00:02:50,500
And right now remember that we refactored this params object to look up details about a very specific

47
00:02:50,500 --> 00:02:51,070
movie.

48
00:02:51,220 --> 00:02:56,920
If we want to look up a collection of different movies or do an actual search, then instead of an se

49
00:02:56,920 --> 00:03:02,080
param right there or something that I premium, we will replace it with an s and that's just straight

50
00:03:02,080 --> 00:03:03,660
from the documentation that we were looking at.

51
00:03:03,670 --> 00:03:07,840
We can go back over really quickly if you want to and look at the search documentation.

52
00:03:07,840 --> 00:03:10,960
If we want to do a search, we're going to add in an S parameter.

53
00:03:12,870 --> 00:03:18,240
So then instead of searching for that very particular movie, ID will instead search for search term.

54
00:03:19,050 --> 00:03:19,860
And that should be it.

55
00:03:20,850 --> 00:03:22,260
So let's save this file.

56
00:03:23,630 --> 00:03:24,680
I'll go back over.

57
00:03:25,070 --> 00:03:26,420
I'm going to refresh the page.

58
00:03:26,450 --> 00:03:28,040
I see my search input.

59
00:03:29,060 --> 00:03:34,220
I'm also going to open up the network tab inside of my chrome console so that I can see all the different

60
00:03:34,220 --> 00:03:36,050
requests that we're making to the API.

61
00:03:36,410 --> 00:03:41,960
If I want to see only the request that our JavaScript code are issuing, we can click on the X Air button

62
00:03:41,960 --> 00:03:46,040
right here, and that's going to filter by just requests that are being created from our JavaScript

63
00:03:46,040 --> 00:03:46,580
code.

64
00:03:47,600 --> 00:03:50,270
Well, then start to type inside of here and we'll see what happens.

65
00:03:50,270 --> 00:03:52,850
So I'm going to search for Avengers a Venn.

66
00:03:53,570 --> 00:03:54,770
Jr's like so.

67
00:03:56,070 --> 00:03:56,440
Okay.

68
00:03:56,460 --> 00:04:00,330
As soon as I started typing, I saw a collection of different requests being issued.

69
00:04:00,780 --> 00:04:04,410
If I go to the very last request that was made, I can click on it.

70
00:04:04,890 --> 00:04:09,930
I'll see the query string right there inside the URL says S equals Avengers.

71
00:04:09,960 --> 00:04:11,150
All right, that's definitely good.

72
00:04:11,160 --> 00:04:16,200
And if I click on Preview, I'll see that I definitely get some search results for The Avengers movie.

73
00:04:16,470 --> 00:04:17,100
Perfect.

74
00:04:17,730 --> 00:04:22,050
Well, it definitely looks like it's working out pretty well so far, but there's just one little issue.

75
00:04:22,260 --> 00:04:26,460
We're doing a search of the API for every single key press.

76
00:04:26,670 --> 00:04:27,720
Is that a problem?

77
00:04:28,050 --> 00:04:29,130
I would say yes.

78
00:04:29,130 --> 00:04:31,140
This is not really ideal.

79
00:04:32,060 --> 00:04:38,750
The reason this is not ideal is that you and I only get to access the API 1000 times per day.

80
00:04:38,750 --> 00:04:43,850
So we've got a hard cap on the number of times we can reach out to search for The Avengers.

81
00:04:43,850 --> 00:04:46,840
I made a total of like 12 requests or so.

82
00:04:46,850 --> 00:04:51,350
I even made a little typo in there, which means I had to make an additional three requests or so as

83
00:04:51,350 --> 00:04:52,490
I fix the typo.

84
00:04:52,940 --> 00:04:59,270
So I just ate up 12 out of my 1000 possible requests that I get to make for the entire day with that

85
00:04:59,270 --> 00:05:00,740
one single query.

86
00:05:01,250 --> 00:05:06,980
So what would be kind of nice is if we said, okay, as soon as the user stops typing for a little bit

87
00:05:06,980 --> 00:05:10,640
of time, then let's go ahead and do the search automatically.

88
00:05:11,090 --> 00:05:16,160
So in other words, if I type out Avengers and then just sit here for like half a second and don't type

89
00:05:16,160 --> 00:05:22,100
anything more, let's make our request then, as opposed to doing a request for every single key press.

90
00:05:23,300 --> 00:05:25,470
That's going to be a little bit of complicated logic.

91
00:05:25,490 --> 00:05:29,540
Let's take a quick pause right here and figure out how we will implement that in the next video.

