1
00:00:00,730 --> 00:00:04,210
The next refactor we're going to do is for on option select.

2
00:00:04,300 --> 00:00:09,370
So in other words, we're going to pull out all the logic that decides what function to run whenever

3
00:00:09,670 --> 00:00:11,380
a user clicks on an option.

4
00:00:11,950 --> 00:00:18,010
So to do so, I'm going to go back over to Autocomplete JS and we're going to find inside of here the

5
00:00:18,010 --> 00:00:21,520
code responsible for doing something whenever a user clicks on an option.

6
00:00:21,520 --> 00:00:24,070
So I'm going to scroll down a little bit inside of on input.

7
00:00:24,730 --> 00:00:27,190
Inside of there is our for loop once again.

8
00:00:27,940 --> 00:00:31,720
And then inside of there, after we create our option, we attach that event listener.

9
00:00:32,200 --> 00:00:37,540
So this right here, this function is what's going to run after a user clicks on an individual option.

10
00:00:38,460 --> 00:00:38,670
Now.

11
00:00:38,700 --> 00:00:40,890
Something to be aware of inside of here.

12
00:00:41,400 --> 00:00:44,700
The first line, like removing that is active class.

13
00:00:44,700 --> 00:00:48,150
That's something that we want to have happen, irregardless of what goes on.

14
00:00:48,390 --> 00:00:52,890
In other words, no matter what, whenever a user clicks on an option, we always want to close the

15
00:00:52,890 --> 00:00:53,580
dropdown.

16
00:00:53,940 --> 00:00:57,270
So we don't want to just kind of extract that function right there or somewhere else.

17
00:00:57,270 --> 00:00:59,610
Instead, we only want to extract some parts of it.

18
00:01:00,450 --> 00:01:04,980
I think one part that we very definitely like probably very clearly want to extract would be on movie

19
00:01:04,980 --> 00:01:09,810
select right here because that is what actually decides what really happens or what goes on whenever

20
00:01:09,810 --> 00:01:11,220
a user clicks on the button.

21
00:01:12,100 --> 00:01:17,260
But the line that is kind of questionable about whether we need to extract or not is where we set the

22
00:01:17,260 --> 00:01:19,930
inputs value with the movie title.

23
00:01:20,590 --> 00:01:21,640
Half of this line.

24
00:01:21,640 --> 00:01:28,150
In other words, like that half right there is very much appropriate for keeping inside of this autocomplete

25
00:01:28,150 --> 00:01:30,940
file because it is related to how the autocomplete works.

26
00:01:30,940 --> 00:01:35,140
And we probably want it to work the same way regardless of whether we're showing movies or recipes or

27
00:01:35,140 --> 00:01:36,460
blog posts or whatever else.

28
00:01:37,030 --> 00:01:43,450
But the source of it, in other words, movie title, that part of that line or that expression is very

29
00:01:43,450 --> 00:01:46,300
much customized for the type of resource we're working with.

30
00:01:46,510 --> 00:01:51,910
If we weren't working with movies, then instead this line should probably be something like blog name

31
00:01:51,910 --> 00:01:54,550
or something like that or recipe name.

32
00:01:56,170 --> 00:02:00,790
But in every scenario, we definitely want to take whatever that value is and throw it back into the

33
00:02:00,790 --> 00:02:01,850
input value.

34
00:02:01,870 --> 00:02:05,590
So this is kind of a more challenging refactor and we're going to have to think about exactly how to

35
00:02:05,590 --> 00:02:06,340
handle that.

36
00:02:07,080 --> 00:02:12,000
Right now, it's probably pretty obvious that we definitely want to extract the callback right there.

37
00:02:12,700 --> 00:02:18,700
So at a very minimum, let's make sure that we create and pass in some function called like on options,

38
00:02:18,700 --> 00:02:24,310
select on our config object and inside there we'll make sure that we call on movie select.

39
00:02:25,150 --> 00:02:29,110
So back inside of indexes here is create autocomplete.

40
00:02:29,910 --> 00:02:33,840
I'm going to pass in another function called on Option Select.

41
00:02:34,380 --> 00:02:38,640
I'm going to expect that this is going to be called with whatever object that the user just clicked

42
00:02:38,640 --> 00:02:40,440
on, and I'm going to call it movie.

43
00:02:41,130 --> 00:02:45,570
So then inside of here, we can do the same exact thing that we did before where we call on Movie Select.

44
00:02:45,570 --> 00:02:46,740
So I'll call on.

45
00:02:47,540 --> 00:02:48,740
Movie Select.

46
00:02:50,200 --> 00:02:51,970
And pass through the movie.

47
00:02:54,740 --> 00:02:57,440
So then we can go back over to Autocomplete JS.

48
00:02:58,270 --> 00:02:59,290
At the very top.

49
00:03:00,200 --> 00:03:02,540
Once again, we can structure off that new function.

50
00:03:03,470 --> 00:03:05,600
Which we called on Option Select.

51
00:03:06,810 --> 00:03:11,610
And then back down at the event listener that we were just looking at instead of calling on Movie Select

52
00:03:11,610 --> 00:03:12,570
right there directly.

53
00:03:12,570 --> 00:03:15,930
Instead it will be on Option Select.

54
00:03:16,730 --> 00:03:19,970
Now, this might seem like a very insignificant change right here.

55
00:03:19,970 --> 00:03:20,270
Right?

56
00:03:20,270 --> 00:03:20,750
Like what?

57
00:03:20,750 --> 00:03:23,540
We just changed the name of the dropdown or the callback function.

58
00:03:23,660 --> 00:03:24,770
Who cares?

59
00:03:24,800 --> 00:03:29,930
Again, the entire point here is that if we had some scenario where we wanted to call a different function

60
00:03:29,930 --> 00:03:34,310
right there, if we were using our autocomplete on another application, we would have had to open up

61
00:03:34,310 --> 00:03:39,780
the source code for our autocomplete and change that line of code, which 100% not good.

62
00:03:39,800 --> 00:03:43,290
We don't want to have to edit the source code of autocomplete JS.

63
00:03:43,730 --> 00:03:49,820
So in doing this change we've extracted deciding what to do when a user clicks on something into this

64
00:03:49,820 --> 00:03:55,430
configuration option over in indexed JS, which is going to contain all of our application specific

65
00:03:55,430 --> 00:03:55,970
code.

66
00:03:56,300 --> 00:03:59,720
So I know this seems like a smaller change, but it still is pretty meaningful.

67
00:04:00,590 --> 00:04:00,850
Okay.

68
00:04:00,860 --> 00:04:04,490
So now the other thing we need to be aware of that we discussed this line right here.

69
00:04:04,490 --> 00:04:09,860
So again, the left hand side, it needs to happen for every instance in which we use an autocomplete,

70
00:04:09,860 --> 00:04:15,560
but the source of information is really well, that's kind of application specific.

71
00:04:16,459 --> 00:04:21,950
So I think that we need to pass in another helper function to our config object and I think that we

72
00:04:21,950 --> 00:04:27,560
need to use that to decide exactly what value to assign when a user clicks on something.

73
00:04:28,350 --> 00:04:33,180
So back inside of indexes, I'm going to add in another helper function.

74
00:04:33,480 --> 00:04:36,900
I'm going to call it input value.

75
00:04:37,750 --> 00:04:40,330
The goal of input value is going to be to take a movie.

76
00:04:40,330 --> 00:04:46,510
And after a user clicks on the option, we're going to call it input value with the movie and we're

77
00:04:46,510 --> 00:04:50,170
going to return whatever value it should show up inside of the input.

78
00:04:50,620 --> 00:04:53,800
So I'm going to return movie title.

79
00:04:53,800 --> 00:04:57,580
So this is how we're going to extract the logic out of Autocomplete JS.

80
00:04:58,250 --> 00:05:00,760
So now to use that, we'll go back over to Autocomplete JS again.

81
00:05:01,720 --> 00:05:08,470
Rather than directly referencing movie title, I will instead call input value.

82
00:05:10,190 --> 00:05:11,060
But the movie.

83
00:05:12,760 --> 00:05:16,270
Up inside of our config object up here at the very top of the file.

84
00:05:16,270 --> 00:05:20,770
I'll make sure that I also extract input value from the config.

85
00:05:21,780 --> 00:05:22,470
Object.

86
00:05:24,280 --> 00:05:24,790
All right.

87
00:05:24,970 --> 00:05:27,150
Now, one last thing I want to repeat really quickly here.

88
00:05:27,160 --> 00:05:30,850
We still have many references to movie inside this file.

89
00:05:30,850 --> 00:05:34,670
And so it might seem like we're making no progress in actually making this thing reusable.

90
00:05:34,690 --> 00:05:39,100
Again, we are going to eventually come back through and replace the term movie with something else

91
00:05:39,100 --> 00:05:40,750
that will be a little bit more consistent.

92
00:05:41,710 --> 00:05:43,000
So we got one more step forward.

93
00:05:43,000 --> 00:05:44,200
Let's do another test.

94
00:05:44,680 --> 00:05:45,670
I'll refresh.

95
00:05:46,270 --> 00:05:52,000
I'll search for Avengers a click and it looks like the input value still gets updated correctly.

96
00:05:52,660 --> 00:05:53,650
So that's very good.

97
00:05:53,680 --> 00:05:57,640
Let's now take one more pause and try to finish up this refactor in the next video.

