1
00:00:00,840 --> 00:00:04,800
The next little fix we're going to add in is to make sure that if a user searches for something and

2
00:00:04,800 --> 00:00:09,480
then decides they don't want to select a video and click somewhere else, we want to close the menu.

3
00:00:09,810 --> 00:00:15,750
So essentially, we need to really detect when a user clicks anywhere on the screen that is not inside

4
00:00:15,750 --> 00:00:16,560
of that menu.

5
00:00:17,040 --> 00:00:21,840
Now, believe it or not, adding in some code for this is not the easiest thing in the world and it's

6
00:00:21,840 --> 00:00:23,550
actually kind of deceptively challenging.

7
00:00:23,760 --> 00:00:24,980
There is a little trick to it.

8
00:00:24,990 --> 00:00:28,980
However, this trick is going to seem a little bit weird, but it's probably the best and easiest way

9
00:00:28,980 --> 00:00:29,850
to handle this.

10
00:00:30,240 --> 00:00:34,200
To understand the trick, I'm going to first write out a little demonstration in my console.

11
00:00:34,930 --> 00:00:39,310
So inside of my console with my devtools open, I'm going to right click on the label right there.

12
00:00:39,310 --> 00:00:40,270
Search for a movie.

13
00:00:41,760 --> 00:00:43,680
And I'm going to click inspect on it.

14
00:00:44,160 --> 00:00:47,910
That's going to open up my Elements panel and select the B element.

15
00:00:48,270 --> 00:00:53,010
Whenever I click an element in this element's panel, you'll see right after the HTML snippet, I get

16
00:00:53,010 --> 00:00:55,050
equals equals dollar sign zero.

17
00:00:55,050 --> 00:01:00,420
And if you hover over it, you can type in dollar sign zero in the console to refer to that element.

18
00:01:00,720 --> 00:01:05,730
So if I open up my console at the same time, which by the way, you can do by hitting escape, we can

19
00:01:05,730 --> 00:01:10,320
write in at dollar sign zero and that will print out the reference to that element.

20
00:01:10,590 --> 00:01:16,320
Just, you know, dollar sign zero is a valid JavaScript identifier that is not some like magic operator

21
00:01:16,320 --> 00:01:16,980
or something.

22
00:01:16,980 --> 00:01:21,750
It is a normal, completely valid, totally legal JavaScript variable name.

23
00:01:23,550 --> 00:01:23,850
Okay.

24
00:01:23,850 --> 00:01:27,300
So now that I've got a selector to that element, I want to show you the little trick.

25
00:01:27,660 --> 00:01:33,690
I'm going to get reference to the entire document and I'm going to call document contains and then pass

26
00:01:33,690 --> 00:01:35,130
in dollar sign zero.

27
00:01:35,580 --> 00:01:40,950
So what this checks is to see if the element that I currently have selected in this case that label

28
00:01:40,950 --> 00:01:44,250
right there is contained within the document element.

29
00:01:44,250 --> 00:01:49,260
If it is contained because remember we view the DOM as a sort of tree, then we're going to get back.

30
00:01:49,260 --> 00:01:54,180
True in this case, the element inside the document definitely is contained.

31
00:01:54,180 --> 00:01:59,850
But if we try to check the reverse relationship so dollar sign zero contains document we're going to

32
00:01:59,850 --> 00:02:00,990
get back false.

33
00:02:01,040 --> 00:02:01,350
Oops.

34
00:02:01,350 --> 00:02:01,980
Typo.

35
00:02:02,970 --> 00:02:04,770
We're going to get back false like so.

36
00:02:04,920 --> 00:02:08,610
So that means that the label does not contain the document.

37
00:02:09,180 --> 00:02:12,000
So I just want you to keep that in your head for just a moment.

38
00:02:12,330 --> 00:02:13,040
Keep in your head.

39
00:02:13,050 --> 00:02:17,700
We're going to go back over and write a little bit of code to handle closing that input menu or the

40
00:02:17,700 --> 00:02:18,570
dropdown menu.

41
00:02:19,890 --> 00:02:20,130
Okay.

42
00:02:20,130 --> 00:02:21,090
So back over here.

43
00:02:21,210 --> 00:02:24,600
I'm going to say document dot, add event listener.

44
00:02:25,020 --> 00:02:26,550
So this is kind of the crazy part.

45
00:02:26,550 --> 00:02:32,130
We are adding a global event listener to our entire document and we're going to watch for any time that

46
00:02:32,130 --> 00:02:35,040
anyone clicks on any element whatsoever.

47
00:02:37,910 --> 00:02:43,790
Now remember how events work in JavaScript events bubble, which means that if some element contained

48
00:02:43,790 --> 00:02:48,620
inside the document like let's say the container right here or even the text inside of it, if someone

49
00:02:48,620 --> 00:02:52,390
clicks on that, that's going to trigger a click event on that element.

50
00:02:52,400 --> 00:02:57,110
If it doesn't get handled right there, then the event is going to essentially bubble up until it gets

51
00:02:57,110 --> 00:03:00,200
to the top level of our entire HTML document.

52
00:03:00,260 --> 00:03:02,060
In this case, the document.

53
00:03:03,090 --> 00:03:09,480
So this event right here, we can look at console.log event target.

54
00:03:09,750 --> 00:03:14,880
And as we start to click around, we're going to see that this is going to print out a variety of different

55
00:03:14,880 --> 00:03:17,310
elements, essentially whatever element we click on.

56
00:03:17,880 --> 00:03:22,020
So I'm going to go back over again, I'm going to refresh and now if I start to click around like on

57
00:03:22,020 --> 00:03:24,720
the label, I'll see the label text.

58
00:03:24,720 --> 00:03:32,280
I can click on the H one, the icon right there, the header anywhere else, the input, whatever else.

59
00:03:32,280 --> 00:03:34,920
And whenever I click on it, I see the console log up here.

60
00:03:35,550 --> 00:03:35,820
Okay.

61
00:03:35,850 --> 00:03:38,910
So now here's the real final conclusion of all this.

62
00:03:39,210 --> 00:03:42,180
So we know that event target is going to tell us what gets clicked.

63
00:03:42,180 --> 00:03:46,890
We know that we also have that contains element as well or something that contains method.

64
00:03:46,980 --> 00:03:51,630
So the whole big trick here, the whole kind of conclusion to all this is that we can take a look.

65
00:03:52,690 --> 00:03:54,190
At our roots element.

66
00:03:54,190 --> 00:03:58,240
Remember, the root element encapsulates everything having to do with our autocomplete.

67
00:03:58,510 --> 00:04:04,300
So we're going to check to see if the element that was clicked on is contained inside of root.

68
00:04:04,480 --> 00:04:09,460
If it is contained inside, that means that the user clicked on the label, the input or the dropdown.

69
00:04:09,610 --> 00:04:13,060
And in any of those scenarios we want to keep the dropdown open.

70
00:04:13,270 --> 00:04:18,790
But if the click is not contained inside of the root, then the user clicks somewhere else in the document

71
00:04:18,790 --> 00:04:21,060
and so we should close the dropdown.

72
00:04:21,070 --> 00:04:22,330
That's the whole conclusion.

73
00:04:22,330 --> 00:04:26,080
I apologize in coming to it in a roundabout way, but that is the trick.

74
00:04:26,080 --> 00:04:27,580
That's how we're going to do this.

75
00:04:28,000 --> 00:04:30,970
So inside of our event listener down here, we're going to say if.

76
00:04:31,580 --> 00:04:35,780
Not Route DOT contains event target.

77
00:04:35,780 --> 00:04:41,240
So that's saying if the root element for our little autocomplete doesn't contain the element that was

78
00:04:41,240 --> 00:04:47,210
just clicked on, then we need to close the dropdown and remember to open or close the dropdown.

79
00:04:47,360 --> 00:04:52,340
We can get a reference back to the dropdown element right here, which is essentially that thing right

80
00:04:52,340 --> 00:04:52,790
there.

81
00:04:53,730 --> 00:04:57,480
And we can add or remove the class is active.

82
00:04:57,690 --> 00:05:02,100
We just added in some code a little bit ago to add in the class is active, which opens it up.

83
00:05:02,340 --> 00:05:06,780
So to close it, we're going to remove that class and that will close the dropdown.

84
00:05:07,640 --> 00:05:07,760
Yeah.

85
00:05:07,790 --> 00:05:11,120
So down here I'll do drop down class list.

86
00:05:11,330 --> 00:05:13,280
Remove is.

87
00:05:14,490 --> 00:05:16,020
Active like so.

88
00:05:17,110 --> 00:05:18,070
And I'll save.

89
00:05:18,100 --> 00:05:19,120
Flip back over.

90
00:05:19,210 --> 00:05:20,140
Refresh.

91
00:05:20,650 --> 00:05:21,970
I'll go for Dark Knight.

92
00:05:23,010 --> 00:05:26,400
Now I'm going to click anywhere else and the dropdown closes.

93
00:05:27,670 --> 00:05:33,430
If I do another search for, let's say, Avengers, I can click on anything inside here so I can click,

94
00:05:33,430 --> 00:05:36,160
click, click, click, click on the input, click on the label.

95
00:05:36,190 --> 00:05:41,440
I click on anything inside of the entire Autocomplete widget, and this thing stays open as we would

96
00:05:41,440 --> 00:05:41,860
hope.

97
00:05:42,550 --> 00:05:42,880
All right.

98
00:05:42,880 --> 00:05:44,770
So that definitely looks like it's working correctly.

99
00:05:45,160 --> 00:05:48,040
So just one last little fix I want to take care of in the next video.

100
00:05:48,040 --> 00:05:50,170
So quick pause and I'll see you in just a minute.

