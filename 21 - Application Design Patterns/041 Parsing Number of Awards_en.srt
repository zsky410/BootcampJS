1
00:00:00,790 --> 00:00:04,059
The last statistic we need to parse is the number of awards.

2
00:00:04,300 --> 00:00:08,530
So how are we going to reduce this down to something that can be easily compared between different movies?

3
00:00:08,710 --> 00:00:13,350
Well, we're just going to take all the different awards or the total number of awards here.

4
00:00:13,360 --> 00:00:17,770
So we're going to find all the different numbers in here, add them all together, and we'll say whoever

5
00:00:17,770 --> 00:00:21,380
had the most numbers inside the statistic wins.

6
00:00:21,400 --> 00:00:27,370
So technically, one movie that has like one win but 100 nominations will beat out a movie with ten

7
00:00:27,370 --> 00:00:27,910
wins.

8
00:00:28,180 --> 00:00:32,710
In theory, the movie with ten wins and like zero nominations would be better.

9
00:00:32,710 --> 00:00:37,450
But for our purposes or the purposes of this application, we're just going to say whoever had the most

10
00:00:37,450 --> 00:00:39,760
numbers in this thing is the winner.

11
00:00:40,210 --> 00:00:44,530
So let's write out some code that's going to take a look at that string and extract the total number

12
00:00:44,530 --> 00:00:45,220
out of it.

13
00:00:45,790 --> 00:00:49,540
Back over here inside of movie template are going to delete that comment up top.

14
00:00:49,870 --> 00:00:51,370
I'm going to delete the console log.

15
00:00:53,110 --> 00:00:55,890
And then we're going to declare a new variable called.

16
00:00:57,940 --> 00:00:58,720
Awards.

17
00:00:59,200 --> 00:01:01,330
So for this one, we'll take a look at movie.

18
00:01:02,520 --> 00:01:03,270
Detail.

19
00:01:04,250 --> 00:01:07,790
We're going to look at the awards property, which is that big long string.

20
00:01:08,210 --> 00:01:11,690
We're going to first begin by splitting it on space.

21
00:01:12,230 --> 00:01:17,870
This right here is going to give us an array where every element in the array is one of the different

22
00:01:17,870 --> 00:01:20,000
actual words or numbers in here.

23
00:01:20,000 --> 00:01:25,610
So essentially all the spaces go away and just the element words we get inside of an array.

24
00:01:27,000 --> 00:01:32,010
So then we're going to iterate through that array and we're going to say that for every actual number

25
00:01:32,010 --> 00:01:35,340
in there, we're going to keep some running total and then eventually return it.

26
00:01:36,430 --> 00:01:38,580
And we're going to write this out in two different ways.

27
00:01:38,590 --> 00:01:42,760
We're going to write it out first with a for each, and then we're going to refactor it to use a reduced

28
00:01:42,760 --> 00:01:43,840
statement instead.

29
00:01:44,200 --> 00:01:49,390
This is a perfect location to do a reduce, but just as some quick practice just to get familiar, because

30
00:01:49,390 --> 00:01:53,000
we're already doing some hard enough things here, we'll first do a four each.

31
00:01:53,410 --> 00:01:57,820
So right above I'm going to declare a variable called count and start it off with zero.

32
00:01:58,030 --> 00:02:01,060
This is going to track the number of award values.

33
00:02:01,240 --> 00:02:05,640
So in this case, we would have like about what, 118 for this movie right here.

34
00:02:05,650 --> 00:02:08,320
That's one plus 79 plus 38.

35
00:02:09,750 --> 00:02:10,470
So on split.

36
00:02:10,470 --> 00:02:11,640
Remember that gives us an array.

37
00:02:11,640 --> 00:02:13,260
So call for each.

38
00:02:15,190 --> 00:02:17,470
And then I'm going to take each word.

39
00:02:18,390 --> 00:02:19,710
Inside of that sentence.

40
00:02:20,610 --> 00:02:23,910
And I first need to see if I am working with a number or not.

41
00:02:24,210 --> 00:02:27,790
The first time that function gets called, it's going to receive the word nominated.

42
00:02:27,810 --> 00:02:29,460
That's obviously not a number.

43
00:02:29,460 --> 00:02:34,020
So to check to see if we're working with a number or not, we're going to first try to parse this thing.

44
00:02:34,020 --> 00:02:37,800
So I'll say value is pass int with word.

45
00:02:38,870 --> 00:02:44,030
If we try to parse an int on a string that doesn't contain any number whatsoever, we're going to get

46
00:02:44,030 --> 00:02:46,340
back a value of not a number.

47
00:02:46,550 --> 00:02:50,540
Let's do a quick test of that inside of our console over here very quickly, just to get a reminder

48
00:02:50,540 --> 00:02:51,860
of of that behavior.

49
00:02:52,130 --> 00:02:58,580
So over here, I'll do a percent of not a number and I get back n a n, which again stands for not a

50
00:02:58,580 --> 00:02:59,090
number.

51
00:02:59,570 --> 00:03:02,360
So if I do parse int on, say nominated.

52
00:03:04,370 --> 00:03:05,510
Yeah, we definitely get back.

53
00:03:05,510 --> 00:03:06,290
Not a number.

54
00:03:06,920 --> 00:03:10,100
So that's how we're going to tell if we're working with an actual number or not.

55
00:03:12,110 --> 00:03:13,820
Value is going to be not a number.

56
00:03:14,270 --> 00:03:21,770
So to check to see if we have a number or not, we will say if is nen n a n like.

57
00:03:21,770 --> 00:03:25,730
So that's how we check to see if a value is not a number or not inside a JavaScript.

58
00:03:25,730 --> 00:03:27,830
That is a function that is built into the browser.

59
00:03:27,830 --> 00:03:29,930
So we don't need to define it or anything like that.

60
00:03:30,750 --> 00:03:36,690
So we're going to say if this value is not a number, then we're just going to stop.

61
00:03:37,080 --> 00:03:40,020
The return statement right here is just going to return from the inner function.

62
00:03:40,020 --> 00:03:43,680
So in other words, we're going to say don't try to add anything to count or anything like that.

63
00:03:44,220 --> 00:03:49,680
Otherwise we'll do count is count plus value like so.

64
00:03:51,380 --> 00:03:56,840
So now at the very end, I'll do a console.log of count and we'll test this thing out for that first

65
00:03:56,840 --> 00:03:57,380
movie.

66
00:03:58,180 --> 00:03:59,050
I'll refresh.

67
00:03:59,080 --> 00:04:00,910
Look up, Avengers, click it.

68
00:04:00,940 --> 00:04:01,670
And there we go.

69
00:04:01,690 --> 00:04:02,890
I get the 118.

70
00:04:02,890 --> 00:04:06,280
So again, that is the one plus 38 plus 79.

71
00:04:07,210 --> 00:04:10,320
So we could stop there and just say, Oh yeah, count is our variable.

72
00:04:10,330 --> 00:04:15,730
But instead, like I said, let's try to refactor this for each into a reduced statement instead because

73
00:04:15,730 --> 00:04:19,060
this really is a perfect place to make use of reduce.

74
00:04:20,000 --> 00:04:23,840
So with reduce remember we're going to change the for each to reduce.

75
00:04:24,890 --> 00:04:27,080
Then the second argument to the reduced function.

76
00:04:27,080 --> 00:04:29,630
The first is the actual function we want to run.

77
00:04:29,990 --> 00:04:33,380
The second is going to be the starting value for our reduction.

78
00:04:33,380 --> 00:04:35,990
So in our case, our starting value is zero.

79
00:04:36,970 --> 00:04:42,340
Then the first argument to that inner function is going to be the previous value and the second will

80
00:04:42,340 --> 00:04:44,380
be the word that we are currently iterating over.

81
00:04:44,950 --> 00:04:50,890
So then inside of this function body, we need to make sure that we return the next value for the next

82
00:04:50,890 --> 00:04:52,840
iteration through this loop.

83
00:04:53,750 --> 00:04:58,220
So right here in the return case, rather than just returning nothing, we're going to instead return

84
00:04:58,220 --> 00:04:58,940
previous.

85
00:04:59,360 --> 00:05:03,680
So at the value that we just are iterating over right here is not actually a number, then just return

86
00:05:03,680 --> 00:05:05,240
whatever our current count is.

87
00:05:05,690 --> 00:05:13,160
Otherwise, we're going to return the previous value that we got, plus this new value.

88
00:05:14,950 --> 00:05:15,250
Okay.

89
00:05:15,250 --> 00:05:17,740
So now we can delete the count up here.

90
00:05:18,800 --> 00:05:23,420
And just to make sure this works correctly, again, I'm going to do a console.log now of awards.

91
00:05:23,780 --> 00:05:24,760
I'll save that.

92
00:05:25,430 --> 00:05:26,570
Another quick test.

93
00:05:26,780 --> 00:05:27,920
So refresh.

94
00:05:28,650 --> 00:05:30,390
Look up Avengers.

95
00:05:30,930 --> 00:05:31,380
Look at.

96
00:05:31,380 --> 00:05:32,970
And I still get the 118.

97
00:05:33,930 --> 00:05:34,290
All right.

98
00:05:34,290 --> 00:05:35,300
So that is it.

99
00:05:35,310 --> 00:05:39,680
We've now extracted some meaningful values out of all these different statistics.

100
00:05:39,690 --> 00:05:45,300
So now the last thing we have to do is take these different values and inject them as data properties

101
00:05:45,300 --> 00:05:47,100
on each of these different articles.

102
00:05:47,370 --> 00:05:51,660
Once again, once we do that, we can then pull those values out later on when we decide that it is

103
00:05:51,660 --> 00:05:53,850
time to compare these different statistics.

104
00:05:54,780 --> 00:05:57,510
So a quick pause right here, and we'll take care of that in the next video.

