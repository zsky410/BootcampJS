1
00:00:00,960 --> 00:00:05,340
Now that we understand what is going wrong inside of our project, let's talk about the absolute distinct

2
00:00:05,340 --> 00:00:08,730
steps that we're going to undergo to actually fix each of these issues.

3
00:00:08,850 --> 00:00:10,260
So here's the idea.

4
00:00:10,350 --> 00:00:15,450
Right now, we've got a lot of unreviewable code inside of our indexed JS file.

5
00:00:15,570 --> 00:00:21,720
We're going to start to refactor this into two separate files inside of our index DOJ's file.

6
00:00:21,750 --> 00:00:26,820
We're going to have some not reusable code, so code that is very specific for our project.

7
00:00:27,300 --> 00:00:32,610
Examples of code that is specific to our project is the process of fetching movies or the process of

8
00:00:32,610 --> 00:00:38,250
deciding what an individual movie should look like inside the autocomplete and the code related to deciding

9
00:00:38,250 --> 00:00:40,680
what to do when an option is clicked on.

10
00:00:42,400 --> 00:00:45,100
Then we're going to have a second file called Autocomplete.

11
00:00:45,250 --> 00:00:47,320
JJ's inside there.

12
00:00:47,320 --> 00:00:53,710
We're going to have some extremely reusable code that is all related to getting an autocomplete to display

13
00:00:53,710 --> 00:00:55,270
on the screen successfully.

14
00:00:55,870 --> 00:00:59,800
That file should be 100% reusable between different projects.

15
00:00:59,920 --> 00:01:05,740
And so because of that, we need to make sure that everything inside that file has zero knowledge of

16
00:01:05,740 --> 00:01:09,130
exactly what a movie is or what a recipe is.

17
00:01:09,130 --> 00:01:13,780
If we were building something around showing recipes or what a blog is, and so on.

18
00:01:14,230 --> 00:01:19,360
In addition that, we want to make sure that the code in this file can be executed several times successfully.

19
00:01:19,450 --> 00:01:23,830
The idea there being that we want to have the ability to show several different auto completes on the

20
00:01:23,830 --> 00:01:29,290
screen at the same time without having to do that crazy renaming of variables or anything like that.

21
00:01:30,850 --> 00:01:34,540
So to make this happen, we're going to create a function inside of autocomplete.

22
00:01:34,720 --> 00:01:38,440
JS That's going to take a configuration object.

23
00:01:39,130 --> 00:01:44,410
It's going to process the options inside that configuration object and then render an autocomplete out

24
00:01:44,410 --> 00:01:45,400
onto the screen.

25
00:01:46,190 --> 00:01:51,710
So inside of that configuration object that's going to be created inside of index dogs, we're going

26
00:01:51,710 --> 00:01:58,730
to have to provide all the code that is like customized for the very specific application of this autocomplete.

27
00:01:59,090 --> 00:02:02,120
So let me tell you about what our config object might look like.

28
00:02:02,480 --> 00:02:06,110
I think that our config object is going to have three different properties inside of it.

29
00:02:06,440 --> 00:02:12,080
It's going to have a function that is used to find movies, a function that is used to render out an

30
00:02:12,080 --> 00:02:14,360
individual option inside the autocomplete.

31
00:02:15,220 --> 00:02:19,360
A function that says exactly what to do when a user clicks on an option.

32
00:02:19,630 --> 00:02:25,810
And finally, an element that designates exactly where the autocomplete should be rendered to inside

33
00:02:25,810 --> 00:02:27,610
of our final HTML document.

34
00:02:28,810 --> 00:02:34,240
So because we are passing these three very or four very critical options inside of a config object,

35
00:02:34,240 --> 00:02:40,780
that object right there is essentially wrapping up all the customized code specific to our application

36
00:02:40,780 --> 00:02:43,480
and it's going to pass it off to Autocomplete JS.

37
00:02:43,960 --> 00:02:49,720
Autocomplete JS is then going to call some of those very specific functions whenever it needs to say

38
00:02:49,720 --> 00:02:56,140
get some data or decide how to render out each option or what to do whenever a user clicks on an option.

39
00:02:56,680 --> 00:03:03,670
So in other words, all the not reusable code gets defined inside of indexes and all the reusable code

40
00:03:03,670 --> 00:03:04,960
is inside of autocomplete.

41
00:03:05,140 --> 00:03:05,860
JS.

42
00:03:06,730 --> 00:03:11,590
And if we ever want to re-use all this stuff on another project, we're going to take Autocomplete.

43
00:03:12,490 --> 00:03:14,080
Add it to the new project.

44
00:03:14,440 --> 00:03:21,220
Come up with a new config object that has the exact same options inside of it and pass it into the same

45
00:03:21,220 --> 00:03:21,970
function.

46
00:03:22,980 --> 00:03:24,150
So that's the idea.

47
00:03:24,150 --> 00:03:26,130
That's how we're going to make our code reusable.

48
00:03:26,670 --> 00:03:33,060
Now, if I am explaining this right now and it makes zero sense, that is totally okay and really very

49
00:03:33,060 --> 00:03:34,070
much expected.

50
00:03:34,080 --> 00:03:38,520
I really do not expect you to like look at this diagram and know exactly what is going on right away.

51
00:03:38,520 --> 00:03:43,110
This is just your first taste of what we're going to be doing and how we're going to make all this code

52
00:03:43,110 --> 00:03:44,280
reusable in nature.

53
00:03:44,790 --> 00:03:49,220
So now that we have a vague idea of what we're going to do, let's take another pause right here.

54
00:03:49,230 --> 00:03:50,550
We're going to come back the next video.

55
00:03:50,550 --> 00:03:55,500
We're going to start to create these two separate files and then split apart all of our code into these

56
00:03:55,500 --> 00:03:57,660
separate, different implementations.

57
00:03:57,660 --> 00:03:59,610
So I'll see you in just a minute.

