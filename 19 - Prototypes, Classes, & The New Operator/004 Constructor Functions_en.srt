1
00:00:00,120 --> 00:00:06,180
Next up, we're going to talk about why this pattern, a factory function is not commonly used and why

2
00:00:06,180 --> 00:00:10,920
instead we use something called the constructor pattern or constructor function.

3
00:00:11,280 --> 00:00:14,500
So let's start with what you probably have seen at this point.

4
00:00:14,520 --> 00:00:19,480
We've seen this new keyword occasionally, like new XML HTTP request.

5
00:00:19,500 --> 00:00:22,260
I hate typing this, but we run this.

6
00:00:22,260 --> 00:00:26,990
If we need to make an XML HTTP request, we're not using fetch, we're not using Axios.

7
00:00:27,000 --> 00:00:30,330
Check out the request section if you're not sure what the heck I'm talking about.

8
00:00:30,420 --> 00:00:33,600
This makes us a new object following a pattern.

9
00:00:34,140 --> 00:00:37,800
Also, we can make an array with this syntax.

10
00:00:37,830 --> 00:00:38,700
New array.

11
00:00:39,530 --> 00:00:41,260
It's definitely lengthier.

12
00:00:41,270 --> 00:00:43,160
It's not not commonly used at all.

13
00:00:43,190 --> 00:00:45,140
You could do new string.

14
00:00:45,500 --> 00:00:47,390
Notice I'm using capital letters.

15
00:00:47,750 --> 00:00:49,910
What is that new keyword?

16
00:00:49,970 --> 00:00:51,320
It's actually an operator.

17
00:00:51,320 --> 00:00:55,520
And we'll get to it and we'll talk about why it's preferable to this approach.

18
00:00:55,520 --> 00:00:58,610
But let's start with understanding the shortcoming here.

19
00:00:58,640 --> 00:01:01,670
It's not a huge one, but it's important to understand.

20
00:01:01,790 --> 00:01:05,910
Every time I make a new color object, we start with an empty object.

21
00:01:05,930 --> 00:01:10,820
We have three unique properties right there, added directly to the object that makes sense.

22
00:01:11,030 --> 00:01:17,900
But then these functions, they're recreated and a unique copy is added to each color object.

23
00:01:18,620 --> 00:01:22,940
So each color object has its own RTB function.

24
00:01:23,360 --> 00:01:23,750
Yeah.

25
00:01:23,750 --> 00:01:25,910
The values are going to always be different.

26
00:01:26,060 --> 00:01:31,010
Assuming that the colors are different, we have different RG and BS, we can end up with a different

27
00:01:31,010 --> 00:01:36,740
result, but there's no reason to have a unique copy of the function itself.

28
00:01:37,820 --> 00:01:45,290
Just like if we were to write a regular function called RTB out here function RTB, we could re-use

29
00:01:45,290 --> 00:01:47,220
that with any inputs.

30
00:01:47,240 --> 00:01:52,190
We don't need to have function RTB two and RTB three and RTB for any time.

31
00:01:52,190 --> 00:01:53,690
We want to pass in different values.

32
00:01:53,690 --> 00:01:55,280
We just make one function.

33
00:01:55,670 --> 00:01:57,290
That is not what's happening here.

34
00:01:57,290 --> 00:02:01,390
And I can show you that I have two colors I've created using make color.

35
00:02:01,400 --> 00:02:04,130
I have first color and I have black.

36
00:02:04,340 --> 00:02:06,620
They have different values that I passed in.

37
00:02:06,630 --> 00:02:08,759
So we get different objects, right?

38
00:02:08,780 --> 00:02:15,320
We have black where RG and B are 000 and we have first color, not a very original name.

39
00:02:15,320 --> 00:02:17,630
35 255 150.

40
00:02:17,960 --> 00:02:20,480
Notice they have their own copy.

41
00:02:20,630 --> 00:02:26,150
Well, it looks like they have their own copy of Hex and RTB and we could verify that in a bunch of

42
00:02:26,150 --> 00:02:26,870
different ways.

43
00:02:26,900 --> 00:02:35,210
The simplest would be if we compare Black Dot, let's take Hex and compare it to first color dot hex.

44
00:02:35,810 --> 00:02:37,280
They are not equal.

45
00:02:37,580 --> 00:02:42,760
Triple equals for a reference type is going to check and functions our reference types as a reminder.

46
00:02:42,800 --> 00:02:48,710
It will check to see if they are referring to the same function in this case and they are not.

47
00:02:49,070 --> 00:02:53,570
But if we compare that to something like a string, any string.

48
00:02:53,570 --> 00:02:55,340
Hi Dot.

49
00:02:55,820 --> 00:02:57,320
What's a good method to use?

50
00:02:57,320 --> 00:03:00,260
How about we use dot slice?

51
00:03:01,310 --> 00:03:04,100
I'm not going to call it just hi slice.

52
00:03:05,030 --> 00:03:07,760
Triple equals by slice.

53
00:03:07,760 --> 00:03:09,110
Two different strings.

54
00:03:09,380 --> 00:03:11,060
Notice that we get true.

55
00:03:12,020 --> 00:03:12,380
Hmm.

56
00:03:12,980 --> 00:03:18,520
What's happening here is that the slice method is not defined on every single string.

57
00:03:18,530 --> 00:03:20,480
Or if I had worked with an array.

58
00:03:20,510 --> 00:03:21,890
You know, if we look at some array.

59
00:03:21,890 --> 00:03:27,630
One, two, three, four, the methods are not defined in this individual object.

60
00:03:27,650 --> 00:03:29,240
Arrays are objects.

61
00:03:29,540 --> 00:03:30,890
A weird part of JavaScript.

62
00:03:30,890 --> 00:03:32,490
They are considered objects.

63
00:03:32,510 --> 00:03:36,230
Instead, they are defined on the prototype.

64
00:03:36,260 --> 00:03:39,320
Remember, we started this section off with prototypes.

65
00:03:39,350 --> 00:03:44,960
Every array gets its built in array methods from one prototype array object.

66
00:03:45,200 --> 00:03:51,880
This contains all of the methods and functionality that we're used to using a radar pop array that can

67
00:03:51,890 --> 00:03:52,430
cat.

68
00:03:52,580 --> 00:03:53,870
Same thing with strings.

69
00:03:53,870 --> 00:03:56,540
The string prototype contains the methods.

70
00:03:56,930 --> 00:04:02,540
So instead of having their own copy, this array does not have its own copy of pop.

71
00:04:02,840 --> 00:04:10,070
This string does not have its own copy of slice there referencing one function and it's located on the

72
00:04:10,070 --> 00:04:10,850
prototype.

73
00:04:11,780 --> 00:04:15,890
With what we've set up here, we don't have an easy way of making that work.

74
00:04:16,160 --> 00:04:19,399
So this is where the constructor function enters.

75
00:04:19,820 --> 00:04:24,410
A constructor function is kind of a it's kind of a weird part of JavaScript, honestly.

76
00:04:24,410 --> 00:04:28,120
It's pretty different than most other programming languages I've worked with.

77
00:04:28,130 --> 00:04:29,690
But don't let that scare you.

78
00:04:29,720 --> 00:04:30,950
It's not too bad.

79
00:04:31,790 --> 00:04:38,210
If we go to MSDN, there's a nice little explanation of this new operator, which we will use.

80
00:04:38,780 --> 00:04:41,690
But first, take a look at this code right here.

81
00:04:42,470 --> 00:04:43,820
We have a function.

82
00:04:44,330 --> 00:04:47,540
It's starting with a capital letter, which is just a style choice.

83
00:04:47,780 --> 00:04:51,330
But inside the function, there's never a return value.

84
00:04:51,350 --> 00:04:54,620
And we're referencing this directly in the function.

85
00:04:54,620 --> 00:04:57,500
We're not in an object like we had here.

86
00:04:57,500 --> 00:04:57,750
Right?

87
00:04:57,770 --> 00:05:02,990
We created an object color and we reference this inside that object on a method.

88
00:05:03,590 --> 00:05:05,240
Here, it's just a function.

89
00:05:05,240 --> 00:05:08,060
This dot make equals something, this dot model.

90
00:05:08,390 --> 00:05:09,590
What is going on?

91
00:05:10,420 --> 00:05:11,500
Well, let's try it out.

92
00:05:11,590 --> 00:05:17,530
So on the docks we had a function and it had a capital letter, which is really just a way of indicating

93
00:05:17,530 --> 00:05:19,550
that this isn't a regular function.

94
00:05:19,570 --> 00:05:22,670
It is a function that helps you create objects.

95
00:05:22,690 --> 00:05:23,500
It's a constructor.

96
00:05:23,500 --> 00:05:24,130
Function.

97
00:05:24,160 --> 00:05:24,850
Function.

98
00:05:24,850 --> 00:05:25,500
Color.

99
00:05:25,510 --> 00:05:36,790
We pass in R, G and B, and then what they did on N was this dot r equals R, this g equals G and this

100
00:05:36,790 --> 00:05:39,280
dot B equals B.

101
00:05:40,190 --> 00:05:41,000
Okay.

102
00:05:41,240 --> 00:05:44,210
Well, let's see what happens when I call color.

103
00:05:45,040 --> 00:05:47,680
When they come over here, refresh my page.

104
00:05:48,160 --> 00:05:52,870
I'm going to execute color and pass it in and I'll just do 2550 and zero.

105
00:05:54,730 --> 00:05:56,200
I didn't get anything back.

106
00:05:56,290 --> 00:05:57,820
It doesn't appear to be working.

107
00:05:58,600 --> 00:06:01,450
If I save that to a variable, I would just see undefined.

108
00:06:03,150 --> 00:06:09,360
What if we print out this, console.log this and let's print it out at the end after we've added those

109
00:06:09,360 --> 00:06:09,850
properties?

110
00:06:09,870 --> 00:06:13,560
RG And B, what do you think this is going to refer to?

111
00:06:15,330 --> 00:06:17,550
Who refers to the window.

112
00:06:18,240 --> 00:06:19,230
Why is that?

113
00:06:19,260 --> 00:06:24,480
Well, if you remember back in the Secret Life of Object Section, we talked about the key word this

114
00:06:24,480 --> 00:06:27,480
and how it behaves in the scope of this function.

115
00:06:27,480 --> 00:06:29,690
It's not inside of any other object.

116
00:06:29,700 --> 00:06:36,150
This is going to refer to the global scope, the nearest object, which is the window object.

117
00:06:36,660 --> 00:06:43,020
So then why on earth would the docs talk about making a function like this and referring to this in

118
00:06:43,020 --> 00:06:45,210
your function, not returning anything?

119
00:06:45,660 --> 00:06:48,990
Well, the secret is this new operator.

120
00:06:49,530 --> 00:06:56,100
When we call this function, but we call it with new before the function, call it behaves differently.

121
00:06:56,400 --> 00:06:57,700
These are the steps.

122
00:06:57,720 --> 00:07:00,570
I guess I'll just copy these over and show them to you here.

123
00:07:02,130 --> 00:07:10,140
When we call this color function with new new color and then we pass in values to five, five, 40 and

124
00:07:10,140 --> 00:07:10,920
100.

125
00:07:11,310 --> 00:07:16,080
Just like that, it's going to create a blank plane JavaScript object.

126
00:07:17,190 --> 00:07:23,040
It sets the constructor of this object to another object we'll come back to that passes the newly created

127
00:07:23,040 --> 00:07:27,060
object from step one as the this in this context.

128
00:07:27,300 --> 00:07:32,670
So it's going to make us a new object and it will set this to that new object.

129
00:07:32,850 --> 00:07:36,360
So we'll be adding our G and B to that new object.

130
00:07:36,360 --> 00:07:39,930
Then it returns this at the end.

131
00:07:40,650 --> 00:07:47,010
So it's kind of doing what we saw earlier concert, let's just call it O equals an object and then this

132
00:07:47,010 --> 00:07:53,340
would be referring to this object and then it adds these properties to that object and then at the end

133
00:07:53,340 --> 00:07:54,450
it would return.

134
00:07:54,450 --> 00:07:58,080
Oh, but it's doing it all implicitly behind the scenes for us.

135
00:07:58,320 --> 00:08:01,890
This behaves differently here than it normally does.

136
00:08:01,890 --> 00:08:06,570
As we saw, if we don't use a new keyword, this refers to the window object.

137
00:08:06,660 --> 00:08:09,830
But when we use new, it's just how JavaScript works.

138
00:08:09,840 --> 00:08:12,000
It's the magic of this operator.

139
00:08:12,030 --> 00:08:16,380
It will be used to create a new object for you based off of this pattern.

140
00:08:16,860 --> 00:08:18,450
So why don't we try it now?

141
00:08:18,780 --> 00:08:20,250
I'm going to copy this over.

142
00:08:21,510 --> 00:08:22,650
Go back to my code.

143
00:08:22,650 --> 00:08:25,380
Refresh if we just call color like that.

144
00:08:25,680 --> 00:08:28,440
Not good if we call it with new.

145
00:08:29,700 --> 00:08:30,540
All right.

146
00:08:30,690 --> 00:08:31,860
Take a look at this.

147
00:08:32,250 --> 00:08:39,240
We get an object and this object has properties on it that we assigned using this.

148
00:08:39,570 --> 00:08:43,380
I never told it to make an object explicitly and never said return an object.

149
00:08:43,409 --> 00:08:46,050
It did that and it did something else.

150
00:08:46,920 --> 00:08:51,900
If we look under a pro here, it has a constructor property set to color.

151
00:08:51,930 --> 00:08:58,410
That was the first or the second thing links or it sets the constructor of the object to another object

152
00:08:58,980 --> 00:09:01,530
using whatever we named this function.

153
00:09:01,860 --> 00:09:04,930
So it sets the constructor to this color function.

154
00:09:04,950 --> 00:09:12,870
What this allows us to do is now we can add methods not to the individual objects, not to the instances,

155
00:09:12,870 --> 00:09:14,640
but to the prototype.

156
00:09:14,820 --> 00:09:22,290
So if I copied what we did earlier, like this RGV method and I put it in here, I'll have to uncomment

157
00:09:22,290 --> 00:09:23,610
some of this and fix it up.

158
00:09:23,700 --> 00:09:30,090
We would have something like this GB equals that function and we can access this.

159
00:09:30,120 --> 00:09:31,350
It should work fine.

160
00:09:31,710 --> 00:09:32,680
This is not new.

161
00:09:32,700 --> 00:09:34,260
This is kind of what we saw earlier.

162
00:09:34,590 --> 00:09:37,590
Let's see what happens when I call new color again.

163
00:09:39,130 --> 00:09:44,530
Instead of color, it still has to be defined on the individual object.

164
00:09:44,530 --> 00:09:48,010
It's not defined on the prototype, but we have a workaround.

165
00:09:48,520 --> 00:09:54,610
Rather than doing this, we would define that method on the prototype.

166
00:09:54,610 --> 00:09:58,750
Outside of this constructor function, it's kind of odd, but that's how it works.

167
00:09:58,750 --> 00:10:06,100
We call color dot prototype dot RGB equals this function.

168
00:10:07,600 --> 00:10:09,040
So it's a little clunkier.

169
00:10:09,370 --> 00:10:11,070
But we saw the syntax already.

170
00:10:11,080 --> 00:10:18,010
We saw how we could change a prototype pop and overwrite it to be some other function that did nothing.

171
00:10:18,850 --> 00:10:19,870
Same idea.

172
00:10:20,320 --> 00:10:24,610
So we have now made this constructor function for color.

173
00:10:24,970 --> 00:10:28,540
Any time we call it with a new keyword, it makes us a new object.

174
00:10:28,540 --> 00:10:35,140
It sets the constructor to color of that object, and then it sets the value of this to that new empty

175
00:10:35,140 --> 00:10:35,870
object.

176
00:10:35,920 --> 00:10:37,580
We can add properties to it.

177
00:10:37,600 --> 00:10:39,160
It returns that object.

178
00:10:39,910 --> 00:10:48,130
So if I call new color 40, 50, 60, I save that to a variable cost color one.

179
00:10:49,150 --> 00:10:54,970
I now have an object here that has RG and B, but not only that, if we take a look at color one.

180
00:10:56,530 --> 00:11:00,220
It does not have that method rugby defined on itself.

181
00:11:00,220 --> 00:11:03,490
On the actual object, it's defined on the prototype.

182
00:11:03,940 --> 00:11:09,070
So I can still call colour one GB, which is the very important part.

183
00:11:09,160 --> 00:11:11,800
If we couldn't, then it wouldn't be worth doing.

184
00:11:12,160 --> 00:11:14,170
But I don't have a unique copy of it here.

185
00:11:14,170 --> 00:11:19,420
I can still access it from the prototype object, just like with an array or a string.

186
00:11:19,810 --> 00:11:26,980
So this is now better or more efficient than our factory approach where we returned a new object every

187
00:11:26,980 --> 00:11:28,000
time it was called.

188
00:11:28,000 --> 00:11:32,980
And on that object we added in individual methods that were unique each time.

189
00:11:33,340 --> 00:11:37,180
Now I could have two colors color one and color two.

190
00:11:37,420 --> 00:11:38,560
They could be totally different.

191
00:11:38,560 --> 00:11:41,560
This one could be 0000.

192
00:11:41,560 --> 00:11:48,550
And why don't I add in a second method, we'll do color dot prototype hex equals function.

193
00:11:50,000 --> 00:11:53,780
And I'll just copy the code from right here.

194
00:11:55,530 --> 00:11:57,050
Have to tweak it a bit.

195
00:11:57,280 --> 00:11:58,420
Don't need that.

196
00:11:58,430 --> 00:11:59,510
Don't need that.

197
00:11:59,510 --> 00:12:00,770
Uncomment you.

198
00:12:02,330 --> 00:12:05,410
Save and everything else should work.

199
00:12:05,420 --> 00:12:08,470
We still have access to this inside of these functions.

200
00:12:08,480 --> 00:12:12,440
This will be set to whatever is on the left side of that dot.

201
00:12:12,440 --> 00:12:18,830
So color one dot hex color one will be the value of this.

202
00:12:19,310 --> 00:12:26,330
If I do color two, color two will be the value of this, even though the function is defined as a method

203
00:12:26,330 --> 00:12:27,680
on the prototype.

204
00:12:28,040 --> 00:12:37,220
So let's verify that color one dot hex is the same as color to hex because they are on the shared prototype

205
00:12:37,220 --> 00:12:40,760
object rather than uniquely defined on each instance.

206
00:12:41,030 --> 00:12:43,280
So we've defined a recipe for a color.

207
00:12:43,280 --> 00:12:49,910
We've said every color will have this one prototype that has ruby and hex, and we need one copy and

208
00:12:49,910 --> 00:12:52,160
one copy only of those methods.

209
00:12:52,430 --> 00:12:53,540
Let's test it out.

210
00:12:53,600 --> 00:12:58,730
So we have color one I can still call hex color to hex.

211
00:12:58,730 --> 00:13:04,520
I get different results because the value of this is different inside those methods.

212
00:13:05,000 --> 00:13:11,450
But then if I call color one hex triple equals color to hex hallelujah.

213
00:13:11,450 --> 00:13:12,440
It's true.

214
00:13:12,470 --> 00:13:15,830
They're pointing to the same thing and we can verify that.

215
00:13:15,830 --> 00:13:19,010
Also, just open up this object here in the DevTools.

216
00:13:19,130 --> 00:13:21,920
We don't see Hex and RTB defined here.

217
00:13:21,950 --> 00:13:24,020
They're defined on the prototype.

218
00:13:24,500 --> 00:13:27,590
So a key distinction from what we saw earlier.

219
00:13:28,580 --> 00:13:29,120
All right.

220
00:13:29,120 --> 00:13:35,900
So why don't we end by adding one more method in this method will be our GBA, which I could call by

221
00:13:35,900 --> 00:13:43,310
color one GBA and I can pass in a number from 0 to 1 like 0.5.

222
00:13:43,610 --> 00:13:50,840
And this should give me an RGB color or an RGB a color which follows the same pattern here, but it

223
00:13:50,840 --> 00:13:55,670
has a fourth channel, a alpha which is in charge of opacity.

224
00:13:56,870 --> 00:14:04,610
So I would define color dot prototype, dot g be a equals function.

225
00:14:05,030 --> 00:14:10,190
And while I'm doing this, an important thing to note, you don't want to use arrow functions for this.

226
00:14:10,190 --> 00:14:14,630
Remember that they behave differently with the keyword this so you can run into trouble.

227
00:14:14,960 --> 00:14:20,930
So use traditional standard function expressions like I'm doing here so we could duplicate this line

228
00:14:20,930 --> 00:14:22,250
to get our G and B.

229
00:14:22,250 --> 00:14:24,860
We also want the parameter for the Alpha Channel.

230
00:14:24,980 --> 00:14:27,110
And why don't we give it a default of one?

231
00:14:27,110 --> 00:14:32,060
If nobody or if it's not passed in, we'll just do a full regular color.

232
00:14:32,060 --> 00:14:34,970
It won't have any translucent alpha will be 1.0.

233
00:14:35,120 --> 00:14:42,890
Then we have to return our string template literal and it should be rg b a and then we interpolate.

234
00:14:42,890 --> 00:14:53,120
Are we interpolate g, we interpolate be forgot the dollar sign and then finally we interpolate a and

235
00:14:53,120 --> 00:14:54,830
we also need the closing perron.

236
00:14:55,430 --> 00:14:56,960
So let's test it out here.

237
00:14:57,110 --> 00:14:58,610
We've got color one.

238
00:14:59,150 --> 00:15:00,500
Let's see what color one looks like.

239
00:15:00,500 --> 00:15:01,400
I don't even know.

240
00:15:01,400 --> 00:15:06,200
Color one dot B gives us this color.

241
00:15:06,200 --> 00:15:07,880
Is it at all interesting?

242
00:15:07,910 --> 00:15:09,260
I'm just going to paste it in here.

243
00:15:09,560 --> 00:15:10,580
It's pretty ugly.

244
00:15:10,790 --> 00:15:13,040
Why don't we change that to be much?

245
00:15:13,250 --> 00:15:14,360
How about much greener?

246
00:15:14,900 --> 00:15:15,710
We'll try again.

247
00:15:15,710 --> 00:15:17,900
Color one GB gives us this.

248
00:15:18,470 --> 00:15:19,490
Let's take a look.

249
00:15:19,490 --> 00:15:19,890
Okay.

250
00:15:19,940 --> 00:15:21,110
Very bright green.

251
00:15:21,530 --> 00:15:30,200
Now, if I want to use that somewhere, let's just do document dot body dot style background color equals

252
00:15:30,710 --> 00:15:34,310
and I'll use color one GB There we go.

253
00:15:34,310 --> 00:15:35,300
Pretty green.

254
00:15:35,570 --> 00:15:37,790
Now let's try our GBA method.

255
00:15:37,790 --> 00:15:41,630
It has a default parameter so it should be the exact same color.

256
00:15:41,630 --> 00:15:46,730
But now if I pass in a number like 0.80, it's getting more translucent.

257
00:15:47,680 --> 00:15:53,050
Let's go down to 0.4, 0.2, 0.1.

258
00:15:54,010 --> 00:15:54,880
There we go.

259
00:15:55,030 --> 00:16:02,070
So we've made this one method to find on the color prototype and it works across any instances of color,

260
00:16:02,080 --> 00:16:04,770
any time we ran new color.

261
00:16:04,780 --> 00:16:06,280
That's the main takeaway here.

262
00:16:06,280 --> 00:16:09,790
The new keyword does these mysterious operations.

263
00:16:10,090 --> 00:16:14,980
It's very confusing when you're starting out because if you look at this function on its own, it seems

264
00:16:14,980 --> 00:16:16,360
like it shouldn't really do anything.

265
00:16:16,360 --> 00:16:17,740
It doesn't ever make an object.

266
00:16:17,740 --> 00:16:19,240
It doesn't ever return anything.

267
00:16:19,240 --> 00:16:25,150
But you put that new keyword in front when you execute the function and it changes how it behaves entirely.

268
00:16:25,150 --> 00:16:30,580
And then we saw that we can add methods to the color prototype so that they are only defined one time

269
00:16:30,580 --> 00:16:34,420
rather than on each individual color like we had up here.

270
00:16:35,680 --> 00:16:42,070
So as you can see, the syntax is kind of annoying and it leads to these long files where things aren't

271
00:16:42,070 --> 00:16:43,220
really grouped together.

272
00:16:43,240 --> 00:16:43,600
Right.

273
00:16:43,600 --> 00:16:48,310
We have our color definition here, but then all of the methods are defined separately.

274
00:16:48,670 --> 00:16:54,670
This is why the class keyword and the new class syntax which introduced, which is what we'll see right

275
00:16:54,670 --> 00:16:55,420
after this.

276
00:16:55,450 --> 00:16:59,800
Another way of achieving the exact same outcome, but a prettier syntax.

