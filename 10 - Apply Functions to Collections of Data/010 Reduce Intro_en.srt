1
00:00:00,180 --> 00:00:03,590
Last but certainly not least, we have reduce.

2
00:00:03,600 --> 00:00:05,600
Reduce is a built in array method.

3
00:00:05,610 --> 00:00:10,350
You pass a callback to it and just like all the methods we've seen in this section, I saved it for

4
00:00:10,350 --> 00:00:12,810
last because reduce is a bit different.

5
00:00:12,810 --> 00:00:18,120
It's really useful and versatile, but it also is a little tricky to explain.

6
00:00:18,120 --> 00:00:21,720
So this image is not here for you to be afraid of reduce.

7
00:00:21,720 --> 00:00:24,750
It's here showing you my own fear of teaching.

8
00:00:24,750 --> 00:00:25,470
Reduce.

9
00:00:25,470 --> 00:00:27,540
Every time I teach it, it goes well enough.

10
00:00:27,540 --> 00:00:30,720
But I always feel like I could have done that better.

11
00:00:30,720 --> 00:00:37,020
And I'm always worried not actually stressing about it, but it's always something that I worry about

12
00:00:37,020 --> 00:00:40,170
making better because it's just not that easy to teach.

13
00:00:40,170 --> 00:00:43,950
Reduce is something that you just need to practice in order to get good with it.

14
00:00:44,040 --> 00:00:45,120
So what is reduced?

15
00:00:45,120 --> 00:00:46,560
Why is it even named reduce?

16
00:00:46,560 --> 00:00:48,600
We have seen many like for each.

17
00:00:48,600 --> 00:00:50,430
That seems like a pretty standard name.

18
00:00:50,430 --> 00:00:53,040
It does something for each element we've seen.

19
00:00:53,040 --> 00:00:59,400
Every awe filter or sort reduce is maybe not as intuitive, but here's what it does.

20
00:00:59,700 --> 00:01:06,450
It takes an array of values and it reduces them down to a single value, which is what this little diagram

21
00:01:06,450 --> 00:01:06,660
is.

22
00:01:06,660 --> 00:01:08,910
I spent a long time working on this.

23
00:01:08,910 --> 00:01:11,610
It's all just clip art, but I couldn't find the right stuff.

24
00:01:11,820 --> 00:01:17,340
The idea is each one of these is maybe representing an element in an array and they're being combined

25
00:01:17,340 --> 00:01:20,640
and reduced down to a single droplet of liquid.

26
00:01:21,060 --> 00:01:26,310
So applications for reduce include things like summing every element in an array.

27
00:01:26,310 --> 00:01:31,680
That's probably the simplest one we'll start with, but it's not always about summing or multiplying

28
00:01:31,680 --> 00:01:34,800
or accumulating data in one number.

29
00:01:34,800 --> 00:01:38,550
It could be finding the maximum value in an entire array.

30
00:01:38,580 --> 00:01:43,050
We're reducing this array of 100 numbers down to one maximum.

31
00:01:43,050 --> 00:01:47,910
It could also be tallying votes or tallying data in an array or in an object.

32
00:01:47,910 --> 00:01:50,850
So I'm going to split, reduce into a couple of different videos.

33
00:01:50,850 --> 00:01:52,590
We're going to start with the basics here.

34
00:01:52,620 --> 00:01:57,780
We're going to talk about how it works with the simplest example of summing every element in an array.

35
00:01:58,230 --> 00:02:04,050
So reduce is an array method we passed in a callback and that callback needs to follow a particular

36
00:02:04,050 --> 00:02:04,800
format.

37
00:02:06,100 --> 00:02:08,050
That format looks like this.

38
00:02:08,410 --> 00:02:11,620
It's a callback with at least two parameters.

39
00:02:11,770 --> 00:02:15,520
Now, the documentation calls this first one accumulator.

40
00:02:15,550 --> 00:02:17,500
Other people will call it total.

41
00:02:17,740 --> 00:02:23,290
But this is the variable where the parameter that will store the end result of reduce.

42
00:02:23,710 --> 00:02:27,860
And then we have current value or val or element.

43
00:02:27,880 --> 00:02:33,530
This represents each individual element in the array as reduce works its way across.

44
00:02:33,550 --> 00:02:38,440
So it doesn't matter what you name them, but the first thing, the first parameter here will store

45
00:02:38,440 --> 00:02:42,130
the total or the accumulated value that we're reducing down to.

46
00:02:42,130 --> 00:02:47,230
And then current value or just the second parameter here stores each individual element.

47
00:02:47,530 --> 00:02:51,130
So this example sums all numbers in this array.

48
00:02:51,880 --> 00:02:55,270
If we take a look at this table, I think it helps explain how it works.

49
00:02:55,510 --> 00:03:02,830
The accumulator variable is going to start as the first element in the array and current value starts

50
00:03:02,830 --> 00:03:04,060
as the next element.

51
00:03:04,390 --> 00:03:08,620
And if you look at what we're returning, accumulator plus current value.

52
00:03:08,770 --> 00:03:14,020
So take the current total, which is initialized to the first element three.

53
00:03:14,050 --> 00:03:16,180
Add it to the next value five.

54
00:03:16,180 --> 00:03:18,220
Current value that gives us eight.

55
00:03:18,220 --> 00:03:24,670
So we return eight that is then used as accumulator in the next iteration.

56
00:03:24,670 --> 00:03:30,610
So Accumulator now remembers the last time, the last sum, which was eight.

57
00:03:30,760 --> 00:03:35,980
So now Accumulator is eight and current value is the next element seven.

58
00:03:35,980 --> 00:03:42,400
So we add them together and return that which is 15 and now reduce runs again or the callback rather

59
00:03:42,400 --> 00:03:43,240
runs again.

60
00:03:43,750 --> 00:03:45,610
Accumulator is now 15.

61
00:03:45,640 --> 00:03:48,010
It remembers the value from last time.

62
00:03:48,010 --> 00:03:51,460
The sum or the total and current value is nine.

63
00:03:51,460 --> 00:03:52,990
So we add 15 and nine.

64
00:03:52,990 --> 00:03:55,500
That's what I'm reducing or how I'm reducing.

65
00:03:55,510 --> 00:03:58,600
We get 24, it goes one more time.

66
00:03:58,630 --> 00:04:01,300
Accumulator is 24 on the fourth call.

67
00:04:01,840 --> 00:04:04,810
It holds the sum of all of these elements before it.

68
00:04:04,810 --> 00:04:07,060
And now current value is the last element.

69
00:04:07,060 --> 00:04:07,750
11.

70
00:04:08,080 --> 00:04:14,170
So we return the sum of 24 and 11, which gives us 35, and we've hit the end.

71
00:04:14,170 --> 00:04:19,420
So reduce returns 35, that is the total accumulated value.

72
00:04:19,750 --> 00:04:22,900
So we end up with 35 as the return value.

73
00:04:23,410 --> 00:04:24,900
So again, think of it this way.

74
00:04:24,910 --> 00:04:28,990
We're taking a bunch of values and we're reducing them down to a single value.

75
00:04:29,080 --> 00:04:36,220
And the function that we pass in has to follow this format where the first thing is a total or the accumulator

76
00:04:36,220 --> 00:04:39,250
or just the place, the value that you are reducing.

77
00:04:39,250 --> 00:04:43,060
And it will hold a value each time that changes or it can change.

78
00:04:43,060 --> 00:04:48,730
So every time this function runs, it's past the previous return value of the function.

79
00:04:49,090 --> 00:04:52,360
And then current value is whichever value we're working on.

80
00:04:52,900 --> 00:04:54,400
So let's try it again.

81
00:04:54,400 --> 00:04:56,110
Let's do something slightly different.

82
00:04:56,260 --> 00:04:57,910
Let's do a simple array.

83
00:04:57,910 --> 00:05:00,340
We'll go with nums just to keep it easy.

84
00:05:00,370 --> 00:05:01,330
Let's go.

85
00:05:01,540 --> 00:05:05,680
How about three, four, five, six, seven?

86
00:05:07,360 --> 00:05:14,620
And then if we call nums dot reduce and I want to multiply all numbers together and end up with a product

87
00:05:14,620 --> 00:05:19,560
of all of these numbers I need to pass in my callback which follows that format.

88
00:05:19,570 --> 00:05:24,820
You can see here I'm actually getting the autocomplete or the preview where the first value or the first

89
00:05:24,820 --> 00:05:30,700
parameter, they call it previous value in vs code and current value is the second parameter.

90
00:05:30,700 --> 00:05:33,790
Let's call this one total instead of accumulator.

91
00:05:33,910 --> 00:05:39,470
Accumulator sounds a little intense, so total and then cur curve l.

92
00:05:39,970 --> 00:05:44,290
I guess current value is fine and then I'll do an arrow function.

93
00:05:44,290 --> 00:05:50,950
So I need a set of prints around the two parameters and then my arrow and I won't do this one on one

94
00:05:50,950 --> 00:05:51,580
line.

95
00:05:51,580 --> 00:05:53,380
We'll return manually.

96
00:05:54,040 --> 00:05:57,580
I want to multiply total by the current value.

97
00:05:59,220 --> 00:06:06,630
And then let's save this to a variable cost product equals what does product equal?

98
00:06:08,220 --> 00:06:10,130
We get 2520.

99
00:06:10,980 --> 00:06:12,270
I guess that's probably right.

100
00:06:12,270 --> 00:06:12,690
Let's see.

101
00:06:12,690 --> 00:06:16,380
Three times, four times five times, six times seven.

102
00:06:16,380 --> 00:06:17,220
There we go.

103
00:06:18,300 --> 00:06:22,290
So if you feel like you understand how it works, you can go ahead and stop watching this video and

104
00:06:22,290 --> 00:06:26,630
move on to the more advanced ways of using Reduce, which is the next video.

105
00:06:26,640 --> 00:06:30,000
But if you want to step through this step by step, let's go ahead and do it.

106
00:06:30,450 --> 00:06:38,190
So the very first time reduce calls, our callback total is going to be initialized to the first element.

107
00:06:38,430 --> 00:06:40,320
So I'm going to make a little table here.

108
00:06:40,320 --> 00:06:45,540
We'll go with total and then all the way over here, we'll have current value.

109
00:06:47,880 --> 00:06:52,860
So the first time through it initializes total to three right there.

110
00:06:53,250 --> 00:07:00,420
Then current vowel is going to be set to the very next element, which is four and we are returning

111
00:07:00,420 --> 00:07:01,710
total times current value.

112
00:07:01,710 --> 00:07:09,300
So we return 12 and reduce remembers that if to if we want to personify it, it remembers the previous

113
00:07:09,300 --> 00:07:11,460
return value which was 12.

114
00:07:11,790 --> 00:07:19,470
So it uses 12 as total the next time through it passes 12 as a total and then current value is going

115
00:07:19,470 --> 00:07:20,300
to be five.

116
00:07:20,310 --> 00:07:21,510
So we get 12.

117
00:07:21,510 --> 00:07:24,840
And then all the way over here, I don't know why I made it so far away.

118
00:07:24,870 --> 00:07:26,880
We have five now.

119
00:07:26,880 --> 00:07:28,290
What's five times 12.

120
00:07:28,380 --> 00:07:30,390
What is that, 60.

121
00:07:30,540 --> 00:07:31,110
Is that right?

122
00:07:31,110 --> 00:07:32,130
Yeah, right.

123
00:07:33,090 --> 00:07:33,490
Okay.

124
00:07:33,660 --> 00:07:42,480
So the return value is 60 this time and 60 is now the new total and current value is going to be six.

125
00:07:42,480 --> 00:07:48,630
So we have 60 and then six and then the callback is called one more time.

126
00:07:48,630 --> 00:07:51,330
60 times six is 3600.

127
00:07:51,930 --> 00:07:52,320
No.

128
00:07:52,320 --> 00:07:53,280
360.

129
00:07:53,310 --> 00:07:54,030
Excuse me.

130
00:07:56,240 --> 00:08:00,310
So that is the new total that is returned from this iteration here.

131
00:08:00,320 --> 00:08:02,810
Return total 60 times six.

132
00:08:02,810 --> 00:08:04,000
That's 360.

133
00:08:04,010 --> 00:08:08,390
That is the new total and the final value in the array is seven.

134
00:08:10,560 --> 00:08:16,890
So we end up now with 360 times seven, which gives us 2520.

135
00:08:17,490 --> 00:08:19,620
So that is a step by step walk through.

136
00:08:19,620 --> 00:08:22,570
Remember that the first parameter is the total.

137
00:08:22,590 --> 00:08:25,250
It is the thing you are boiling down to.

138
00:08:25,260 --> 00:08:27,630
You're reducing down to and you're keeping track.

139
00:08:27,660 --> 00:08:28,680
It persists.

140
00:08:28,680 --> 00:08:34,140
You can think of it as having a memory throughout this whole iterative cycle, and then current value

141
00:08:34,140 --> 00:08:39,419
changes every time, depending on which iteration we're on, which element we're actually using.

142
00:08:39,419 --> 00:08:42,960
So this is a simple example of multiplying everything.

143
00:08:42,960 --> 00:08:46,140
We saw how we could sum all elements in an array.

144
00:08:46,170 --> 00:08:49,290
Next, we'll see some more advanced use cases for reduce.

