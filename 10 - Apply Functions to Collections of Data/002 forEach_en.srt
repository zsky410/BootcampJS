1
00:00:00,090 --> 00:00:04,350
The first of this new group of array methods we'll talk about is called for each.

2
00:00:04,440 --> 00:00:11,160
For each accepts a callback, it accepts a function, and it calls it on every element in a given array.

3
00:00:11,190 --> 00:00:12,180
It's an array method.

4
00:00:12,180 --> 00:00:13,650
So we call it on the array.

5
00:00:13,680 --> 00:00:15,090
Here's my nums array.

6
00:00:15,120 --> 00:00:20,250
We do nums for each, just like we would do num index of or num stat reverse.

7
00:00:20,250 --> 00:00:23,790
Both of the examples here are using anonymous function expressions.

8
00:00:23,790 --> 00:00:26,460
They're just one time things that I'm trying to do.

9
00:00:26,490 --> 00:00:28,710
I could also create a function.

10
00:00:28,710 --> 00:00:31,560
I could define it first and then pass the name of the function in.

11
00:00:31,560 --> 00:00:37,650
But again, the goal of for each is that it takes whatever function you give it and it calls it on each

12
00:00:37,650 --> 00:00:38,130
element.

13
00:00:38,130 --> 00:00:41,190
It passes each value into that function.

14
00:00:41,940 --> 00:00:43,700
So let's try a simple example.

15
00:00:43,710 --> 00:00:45,270
I have an array called numbers.

16
00:00:45,630 --> 00:00:46,410
Not exciting.

17
00:00:46,410 --> 00:00:46,950
I know.

18
00:00:47,310 --> 00:00:49,170
20, 21, 22, and so on.

19
00:00:49,500 --> 00:00:55,950
If I call numbers for each and I pass in a function, we'll start with an anonymous function here.

20
00:00:56,670 --> 00:00:58,290
I need to give it a parameter.

21
00:00:58,290 --> 00:01:01,710
I can name this whatever I want, but it is going to store.

22
00:01:01,710 --> 00:01:04,170
It will represent one element at a time.

23
00:01:04,170 --> 00:01:08,220
So the very first time for each run is the first iteration.

24
00:01:08,250 --> 00:01:13,320
It will call whatever I have here this function and we'll pass in the value of 20.

25
00:01:13,320 --> 00:01:21,360
So I'll go with numb or NW it doesn't matter element l something descriptive and then I'll use numb

26
00:01:21,360 --> 00:01:21,870
in here.

27
00:01:21,870 --> 00:01:23,070
We'll start really simple.

28
00:01:23,070 --> 00:01:24,870
We'll console that log numb.

29
00:01:26,760 --> 00:01:31,260
And if I run this code, there we go, 2021, all the way to 27.

30
00:01:31,530 --> 00:01:38,250
So for each calls this function, however many times it needs to, and it passes each element in one

31
00:01:38,250 --> 00:01:39,030
at a time.

32
00:01:39,570 --> 00:01:42,510
So we could also do console.log num times two.

33
00:01:42,540 --> 00:01:46,360
Just as a quick example here and we get 40, 42, 44.

34
00:01:46,410 --> 00:01:47,190
Great.

35
00:01:47,700 --> 00:01:50,580
We could have also written a function ahead of time.

36
00:01:51,660 --> 00:01:53,670
Let's do print double.

37
00:01:54,660 --> 00:01:55,380
Let's do triple.

38
00:01:55,380 --> 00:01:57,060
Just to have something a little different.

39
00:01:57,960 --> 00:01:59,940
And it will accept a single number.

40
00:01:59,940 --> 00:02:04,590
We'll call it DN and it will console.log and times three.

41
00:02:05,100 --> 00:02:13,770
So now I have a standalone function called print triple and I can call numbers for each and pass in

42
00:02:13,770 --> 00:02:14,880
print triple.

43
00:02:16,200 --> 00:02:17,220
Just like that.

44
00:02:17,490 --> 00:02:19,640
So this is accomplishing the same thing.

45
00:02:19,650 --> 00:02:22,980
Well, we're tripling here instead of doubling, but it's the same idea.

46
00:02:23,300 --> 00:02:24,560
Numbers dot for each.

47
00:02:24,570 --> 00:02:27,350
This function we're telling for each.

48
00:02:27,360 --> 00:02:28,170
Here's the function.

49
00:02:28,170 --> 00:02:30,480
I want you to call for each element.

50
00:02:30,930 --> 00:02:40,250
So internally it would call print triple with 20 and then afterwards 21 and then afterwards 22.

51
00:02:40,260 --> 00:02:42,660
And it does it until it hits the end of the array.

52
00:02:44,070 --> 00:02:48,180
So if we double check this one now, we get print triple.

53
00:02:48,630 --> 00:02:51,660
I'll comment this out so we can just see it on its own.

54
00:02:51,660 --> 00:02:52,290
There we go.

55
00:02:52,290 --> 00:02:57,510
60 down to 81, 20 times 360, 27 times three is 81.

56
00:02:58,140 --> 00:03:04,200
So two different ways of using for each JavaScript doesn't care that are both functions.

57
00:03:04,200 --> 00:03:10,800
The main difference is that this is a function we can reuse if we needed to, which is great, but a

58
00:03:10,800 --> 00:03:15,660
lot of the time with for each and a lot of these methods we'll see in this section, you're just trying

59
00:03:15,660 --> 00:03:16,950
to get some code to run.

60
00:03:16,950 --> 00:03:21,210
You don't care about having a name for that function, being able to reuse it.

61
00:03:21,210 --> 00:03:22,830
It's just a one time thing.

62
00:03:23,160 --> 00:03:28,860
So in that case, you would use an anonymous function or it would make sense to at least you don't have

63
00:03:28,860 --> 00:03:29,280
to.

64
00:03:29,580 --> 00:03:30,720
So we pass in that function.

65
00:03:30,720 --> 00:03:33,570
It's called let's do another example here.

66
00:03:33,570 --> 00:03:37,680
I have a more complex array where each element is an object.

67
00:03:37,830 --> 00:03:40,380
Let's say I want to print out every title.

68
00:03:40,380 --> 00:03:41,490
We'll just start with that.

69
00:03:41,490 --> 00:03:48,900
I want to print each title using for each I would call books, which is the name of the array for each

70
00:03:50,310 --> 00:03:51,120
function.

71
00:03:51,120 --> 00:03:55,650
And we'll call this placeholder, this parameter B or book.

72
00:03:56,550 --> 00:04:01,080
It represents one element in that array, which in our case happens to be an object.

73
00:04:01,080 --> 00:04:09,780
And then to print the title, I would just cancel that log book title and let's do dot to uppercase.

74
00:04:10,530 --> 00:04:17,670
So if I refresh, we now get four different book titles in all caps, so for each is going to pass in

75
00:04:17,670 --> 00:04:18,329
each element.

76
00:04:18,329 --> 00:04:20,610
In this case, the element is an object.

77
00:04:20,610 --> 00:04:24,060
It's not a single number like we had earlier, it's a whole object.

78
00:04:24,780 --> 00:04:26,790
And then we can do whatever we want in here.

79
00:04:27,030 --> 00:04:33,090
Now you might be thinking this doesn't seem that useful because we have things like for loops or for

80
00:04:33,090 --> 00:04:33,630
of.

81
00:04:33,630 --> 00:04:43,050
I could do the exact same thing using a four of so I would do four let book of books console.log and

82
00:04:43,050 --> 00:04:44,550
I'll just copy that line over.

83
00:04:45,450 --> 00:04:49,080
We'll comment this one out, we get the same output.

84
00:04:49,170 --> 00:04:51,330
And you're right, this works.

85
00:04:51,330 --> 00:04:52,590
It is different.

86
00:04:52,590 --> 00:04:54,060
This is not identical.

87
00:04:54,090 --> 00:04:55,770
Obviously the syntax is different.

88
00:04:55,770 --> 00:05:00,900
But the key difference as far as JavaScript is concerned is here we have a function that's being called

89
00:05:00,900 --> 00:05:02,610
this is just a block.

90
00:05:03,030 --> 00:05:07,740
That doesn't really mean much in this example, but I just want you to understand there is a difference.

91
00:05:08,010 --> 00:05:13,880
So yeah you could use a four of loop for each has been around much longer than for oth.

92
00:05:13,920 --> 00:05:16,440
So we used to not have this option at all.

93
00:05:16,530 --> 00:05:21,180
We had a regular for loop for let i equals zero.

94
00:05:21,210 --> 00:05:26,580
I is less than book book length plus plus.

95
00:05:27,480 --> 00:05:29,610
And then we would console this out.

96
00:05:30,420 --> 00:05:31,890
But we don't have book.

97
00:05:31,890 --> 00:05:39,120
We would have to do books of I title to uppercase and this would give us the same thing.

98
00:05:39,750 --> 00:05:45,840
But it's just nicer in my opinion to do a for each or a four of where we don't have to use I if we don't

99
00:05:45,840 --> 00:05:52,650
care about the index, we're not using the index except to access each element, then why use it?

100
00:05:53,070 --> 00:05:56,490
So for each was the alternative we use for a long time.

101
00:05:56,490 --> 00:06:02,220
People still use for each, but we also now have four of you can use it to achieve the same end.

102
00:06:02,220 --> 00:06:05,190
So here are all three versions doing the same thing.

103
00:06:06,720 --> 00:06:09,270
Now there's one other thing to know about for each.

104
00:06:09,270 --> 00:06:16,140
We can also add a second parameter to our callback to the function here if we want to use the index.

105
00:06:16,290 --> 00:06:20,760
So if I wanted to print out each actually let's do it up here instead of books.

106
00:06:20,760 --> 00:06:22,110
Let's go back to numbers.

107
00:06:23,130 --> 00:06:30,060
If I wanted to print out the index and then the number using a for each, I could do numbers for each

108
00:06:31,440 --> 00:06:32,850
pass in my callback.

109
00:06:33,570 --> 00:06:35,170
We'll call this num.

110
00:06:35,340 --> 00:06:37,560
And then the second parameter.

111
00:06:37,560 --> 00:06:39,180
This is how for each works.

112
00:06:39,180 --> 00:06:47,220
The second parameter will be the index which we can call I id x index and we'll just do a simple console.log

113
00:06:47,220 --> 00:06:49,380
index comma num.

114
00:06:51,210 --> 00:06:52,950
We run it and there we go.

115
00:06:53,070 --> 00:06:59,460
Zero element is 20 element 121 all the way down to element 727.

116
00:07:00,240 --> 00:07:01,230
So this is nice.

117
00:07:01,230 --> 00:07:05,240
If you need the index, sometimes you do, you could use a for each.

118
00:07:05,250 --> 00:07:10,800
There's not an easy way to get an index if you're using a regular four of although if you use a regular

119
00:07:10,800 --> 00:07:12,600
four loop, you definitely can get it.

120
00:07:12,600 --> 00:07:19,860
You have to generate it yourself using I and I less than whatever I plus plus with for each you get

121
00:07:19,860 --> 00:07:21,210
the index for free.

122
00:07:21,720 --> 00:07:29,220
So what's happening here is that this function is being called each time for one element and for each

123
00:07:29,250 --> 00:07:33,360
is passing in not only the element, but it passes in the index.

124
00:07:33,360 --> 00:07:39,240
And if you don't use that index, it's still being passed in for each is just saying here's the number

125
00:07:39,240 --> 00:07:42,660
or here's the element and here's the index for that element.

126
00:07:42,840 --> 00:07:43,890
You can ignore it.

127
00:07:43,890 --> 00:07:47,790
You don't have to accept it or do anything with it, but it's going to be passed in.

128
00:07:47,790 --> 00:07:51,450
And so if you want it, you can capture it as a parameter.

129
00:07:52,290 --> 00:07:52,560
All right.

130
00:07:52,560 --> 00:07:53,910
So that's for each.

131
00:07:53,910 --> 00:07:56,640
Again, it's the simplest of these methods.

132
00:07:56,640 --> 00:07:57,240
We'll see.

133
00:07:57,270 --> 00:08:03,810
It accepts a callback and it runs that callback once per element in the array where that element's value

134
00:08:03,840 --> 00:08:06,360
will be an argument to the callback.

