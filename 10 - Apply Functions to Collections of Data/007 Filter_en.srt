1
00:00:00,270 --> 00:00:04,570
Next up, we have yet another array method that expects you to pass in a callback.

2
00:00:04,590 --> 00:00:05,880
It's called filter.

3
00:00:06,210 --> 00:00:10,710
Filter allows us to filter out subsets of an array.

4
00:00:10,740 --> 00:00:15,630
Basically, we we pass in a function which returns true or false, a test function.

5
00:00:15,630 --> 00:00:21,780
And if an element passes that function, it will be added into the returned or the result array.

6
00:00:22,020 --> 00:00:27,180
So if we had an array of a bunch of numbers, we want to create a new array with only the event.

7
00:00:27,210 --> 00:00:29,190
We could filter the evens out.

8
00:00:29,550 --> 00:00:32,280
It doesn't update the original, it doesn't mutate it.

9
00:00:32,280 --> 00:00:35,360
So filtering it out makes it sound like we're removing them.

10
00:00:35,370 --> 00:00:40,710
We're really just creating a copy with specific targeted information or elements.

11
00:00:41,070 --> 00:00:42,720
So let's do a couple of examples.

12
00:00:42,990 --> 00:00:44,400
We'll start simple with numbers.

13
00:00:44,400 --> 00:00:45,360
I know it's boring.

14
00:00:45,690 --> 00:00:49,150
Const nums equals and I'll just type some random numbers in here.

15
00:00:49,170 --> 00:00:50,400
That's good enough there.

16
00:00:51,120 --> 00:00:58,080
And if I wanted to filter so that I get a new array only with odd numbers, I could call numbers or

17
00:00:58,080 --> 00:01:03,000
nums dot filter and I'll use a single line arrow function.

18
00:01:03,030 --> 00:01:09,300
Implicit return and is my parameter and mod two equals one.

19
00:01:09,300 --> 00:01:10,890
That's how we know if something is odd.

20
00:01:11,400 --> 00:01:14,220
So this function right here is a boolean function.

21
00:01:14,280 --> 00:01:16,170
It's what's called a test function.

22
00:01:16,170 --> 00:01:20,340
At least if you look at the docs for filter, it returns true or false.

23
00:01:20,340 --> 00:01:27,690
So filter is going to start with an empty array and it's going to try 34 and pass it into our test function.

24
00:01:27,810 --> 00:01:28,740
Does that pass?

25
00:01:28,740 --> 00:01:29,790
Do we get true?

26
00:01:29,880 --> 00:01:33,900
No, we do not because this is even so it goes to 35.

27
00:01:33,900 --> 00:01:35,760
That does pass this test.

28
00:01:35,760 --> 00:01:37,020
It returns true.

29
00:01:37,050 --> 00:01:43,830
So 35 is added to the result and then 67 would be added and then 54 would not be added.

30
00:01:43,830 --> 00:01:48,120
And then as soon as it hits the end of the array, it returns this result.

31
00:01:48,120 --> 00:01:51,180
So I can save this to a variable called ODS.

32
00:01:52,260 --> 00:01:53,640
Let's check it out.

33
00:01:54,840 --> 00:01:59,010
There's odds it contains the four odd numbers.

34
00:01:59,010 --> 00:02:03,150
If we look at nums, it's not altered in any way.

35
00:02:03,150 --> 00:02:04,710
So we're not removing them.

36
00:02:04,710 --> 00:02:07,500
We're simply creating a new array with those values.

37
00:02:08,560 --> 00:02:10,650
We could do the same thing for evens.

38
00:02:10,690 --> 00:02:12,180
It would be very simple change.

39
00:02:12,190 --> 00:02:18,640
Name the variable evens and then say num mod two equals zero.

40
00:02:18,670 --> 00:02:21,470
There is no remainder when we divide by two.

41
00:02:21,550 --> 00:02:23,230
So now I'm just unchanged.

42
00:02:23,230 --> 00:02:26,290
But now we have evens containing the even numbers.

43
00:02:27,010 --> 00:02:31,480
If I wanted to get large numbers, I'll call them big numbers.

44
00:02:31,600 --> 00:02:39,940
I could do num stop filter with the parameter name of and again where NW is greater than how about 50?

45
00:02:40,930 --> 00:02:46,090
So this will give me an array of numbers where each number is larger than 50.

46
00:02:46,760 --> 00:02:47,890
Let me just save my code.

47
00:02:47,890 --> 00:02:48,840
Run it over here.

48
00:02:48,850 --> 00:02:50,230
We'll look at big numbers.

49
00:02:50,230 --> 00:02:53,990
And now we have 67, 54, 109 and 102.

50
00:02:54,010 --> 00:02:57,000
So we write a function that returns true or false.

51
00:02:57,010 --> 00:03:01,810
If that function returns true for an element, it's added into the result that we get.

52
00:03:01,930 --> 00:03:03,430
Otherwise it's ignored.

53
00:03:03,790 --> 00:03:06,120
Let's do a few more complex examples.

54
00:03:06,130 --> 00:03:12,360
I've updated this book's array to include more books, but also each book has some new properties.

55
00:03:12,370 --> 00:03:17,050
We have a genre or genres property, which is an array of genres.

56
00:03:17,080 --> 00:03:21,190
We have more books that each have a rating and that's pretty much it.

57
00:03:21,190 --> 00:03:23,110
There's what, ten or so books in here?

58
00:03:23,110 --> 00:03:23,950
Maybe eight.

59
00:03:24,460 --> 00:03:31,180
Now imagine that we're actually creating a ecommerce bookstore or a website like Goodreads where you

60
00:03:31,180 --> 00:03:36,790
can search for books, add them to your reading list, and it's a social network for books.

61
00:03:37,510 --> 00:03:43,870
A lot of the time we want to give users the ability to search for things, to search for a book based

62
00:03:43,870 --> 00:03:51,490
off of a title, or to narrow down search results so that they could check a box that says rating,

63
00:03:51,880 --> 00:03:59,020
I don't know, four star or greater rating or only fantasy books we would use filter to narrow down

64
00:03:59,020 --> 00:04:00,550
the results that we're showing.

65
00:04:00,640 --> 00:04:02,440
So let's do a couple of examples.

66
00:04:02,530 --> 00:04:04,120
Let's start with a simple one.

67
00:04:04,120 --> 00:04:11,560
Let's select the ratings or the books that have high ratings so their rating is greater than maybe 4.3.

68
00:04:12,610 --> 00:04:14,530
So that would be content.

69
00:04:14,740 --> 00:04:24,880
Good books equals books filter for B, we want B to be greater than 4.3.

70
00:04:26,110 --> 00:04:27,310
Let's see what we get.

71
00:04:27,850 --> 00:04:29,020
Good books.

72
00:04:29,470 --> 00:04:30,190
All right.

73
00:04:30,190 --> 00:04:31,840
Well, that's my fault.

74
00:04:32,020 --> 00:04:33,940
I'm comparing the entire book.

75
00:04:33,970 --> 00:04:36,280
This is an object I need to compare.

76
00:04:36,310 --> 00:04:37,600
B rating.

77
00:04:38,020 --> 00:04:39,040
Try that again.

78
00:04:40,330 --> 00:04:46,450
And now we have four books, Bone, which has a rating of 4.42 gentlemen in Moscow.

79
00:04:46,450 --> 00:04:48,120
Great book 4.36.

80
00:04:48,130 --> 00:04:50,410
Name of the Wind 4.54.

81
00:04:50,410 --> 00:04:53,110
And The Way of Kings 4.65.

82
00:04:53,920 --> 00:04:56,110
So we just grabbed the highest rated books.

83
00:04:56,110 --> 00:04:58,060
But again, books is unchanged.

84
00:04:58,060 --> 00:04:59,860
It still has nine books in it.

85
00:05:00,550 --> 00:05:09,190
If a user then wanted to pivot and look at, let's say, only fantasy books, let's filter where genre

86
00:05:09,190 --> 00:05:10,780
includes fantasy.

87
00:05:10,990 --> 00:05:12,640
So we have a couple of them here.

88
00:05:13,090 --> 00:05:15,640
In order to do that, we'll use filter.

89
00:05:15,640 --> 00:05:21,520
So const fantasy books equals bookstore filter.

90
00:05:21,550 --> 00:05:27,910
This one is probably going to be a bit long for a single line, so I'll do for each book or that would

91
00:05:27,910 --> 00:05:29,200
be the name of the parameter.

92
00:05:30,160 --> 00:05:33,310
I'll use an implicit return with parentheses.

93
00:05:33,610 --> 00:05:37,000
We want book dot genres.

94
00:05:37,150 --> 00:05:38,830
DOT includes.

95
00:05:40,480 --> 00:05:41,380
Fantasy.

96
00:05:42,280 --> 00:05:45,940
We could do this on one line, but whoops, no semicolon in there.

97
00:05:46,210 --> 00:05:47,920
And let's see what we get.

98
00:05:47,920 --> 00:05:49,060
Run it over here.

99
00:05:49,150 --> 00:05:50,320
Fantasy books.

100
00:05:50,320 --> 00:05:51,970
We get five books each.

101
00:05:51,970 --> 00:05:54,670
One should include fantasy as one of its genres.

102
00:05:55,450 --> 00:05:57,400
So this one has fantasy.

103
00:05:57,580 --> 00:05:58,720
This one has fantasy.

104
00:05:58,720 --> 00:06:03,910
American gods bone has fantasy, and good omens does as well.

105
00:06:04,670 --> 00:06:13,270
Okay, let's do another example where we filter for short form books where basically it's either essays

106
00:06:13,270 --> 00:06:14,260
or short stories.

107
00:06:14,260 --> 00:06:19,660
I don't know what you would call those small books made up of smaller pieces, anthology books.

108
00:06:19,930 --> 00:06:21,100
We'll call it short form.

109
00:06:21,100 --> 00:06:23,560
So short form equals books.

110
00:06:23,750 --> 00:06:26,080
Filter book is our parameter name.

111
00:06:26,800 --> 00:06:29,010
And then I'll do another implicit return.

112
00:06:29,020 --> 00:06:37,900
We want to check if book dot genres dot includes either short stories.

113
00:06:38,350 --> 00:06:48,250
Let me just make sure it was short stories, plural or I want essays so I'll do or book genres includes

114
00:06:49,780 --> 00:06:50,470
essays.

115
00:06:52,180 --> 00:06:55,750
Let's see what we get for short form, we have two results.

116
00:06:55,750 --> 00:06:58,780
The first one is Changing My Mind by Zadie Smith.

117
00:06:58,810 --> 00:07:00,940
In genres we can see essays.

118
00:07:01,180 --> 00:07:05,770
The second one is by Richard Powers called the Overstory really cool book.

119
00:07:05,770 --> 00:07:12,010
Short Stories is in genres as well, so a whole bunch of different ways to filter just this one array

120
00:07:12,010 --> 00:07:12,770
of books.

121
00:07:12,790 --> 00:07:16,660
Think of any e-commerce website you can filter by rating.

122
00:07:16,660 --> 00:07:19,030
You can filter by searching for something.

123
00:07:19,030 --> 00:07:20,170
So let's try that.

124
00:07:20,470 --> 00:07:27,370
Let's search through a title and find books that contain, I don't know, the in their title.

125
00:07:27,700 --> 00:07:32,440
So to mimic a search box, let's make a variable called query.

126
00:07:33,370 --> 00:07:35,440
And this will be coming from a user.

127
00:07:35,440 --> 00:07:40,180
We don't know what it is, so I'll leave it blank for now and then we'll do books.

128
00:07:40,180 --> 00:07:41,200
Dot Filter.

129
00:07:42,190 --> 00:07:50,440
I'll save this to a variable called results and we'll filter where the book title includes that query.

130
00:07:50,440 --> 00:07:53,950
And to be extra sure, we'll also down case everything.

131
00:07:53,950 --> 00:07:55,540
So it's case insensitive.

132
00:07:55,720 --> 00:08:05,050
So book we'll do book dot title dot two lowercase dot includes.

133
00:08:06,580 --> 00:08:10,120
And then I want to make sure I'm lowercase doing the query as well.

134
00:08:10,150 --> 00:08:12,670
Query to lowercase.

135
00:08:14,570 --> 00:08:15,920
To give us a bit more room.

136
00:08:17,180 --> 00:08:23,090
And honestly, in this scenario, this is fine as a one liner, but just for some variety, I'll break

137
00:08:23,090 --> 00:08:23,690
this up.

138
00:08:24,440 --> 00:08:28,760
So I'll use a regular arrow function where I need to explicitly return something.

139
00:08:28,760 --> 00:08:30,760
So I'll extract this to a variable.

140
00:08:30,770 --> 00:08:38,980
I'll call it title equals box title or book title to lowercase, and then I'll just do return.

141
00:08:38,990 --> 00:08:45,920
Title dot includes query, not local lowercase, regular lowercase.

142
00:08:46,610 --> 00:08:47,210
All right.

143
00:08:47,210 --> 00:08:53,330
So whatever the user searches for, let's say they're searching for, is there anything we could get

144
00:08:53,330 --> 00:08:54,800
multiple results with?

145
00:08:55,460 --> 00:09:03,020
I guess we've got the it's quite boring, but if a user types the we're going to down case this right

146
00:09:03,020 --> 00:09:08,840
here and we're going to compare it to every book title by down casing the title so that we don't care

147
00:09:08,840 --> 00:09:10,100
about casing at all.

148
00:09:10,100 --> 00:09:10,820
Then we'll just check.

149
00:09:10,820 --> 00:09:14,110
Does each title include that lowercase query?

150
00:09:14,120 --> 00:09:16,190
If it does, this returns true.

151
00:09:16,220 --> 00:09:17,780
It gets added to our results.

152
00:09:17,780 --> 00:09:18,710
Let's run it.

153
00:09:18,710 --> 00:09:19,970
Let's look at results.

154
00:09:20,690 --> 00:09:21,860
We get five.

155
00:09:22,160 --> 00:09:24,170
They all contain the phone.

156
00:09:24,170 --> 00:09:26,030
The complete is a complete journey.

157
00:09:26,030 --> 00:09:27,860
Complete Story, Complete Edition.

158
00:09:27,860 --> 00:09:31,850
The Name of the Win The Overstory The Way of Kings and Lord of the Flies.

159
00:09:31,940 --> 00:09:33,410
Here we don't have an uppercase.

160
00:09:33,410 --> 00:09:38,600
The here we do have uppercase though so those are some examples of using filter.

161
00:09:38,600 --> 00:09:40,040
It's a great method.

162
00:09:40,040 --> 00:09:46,640
There's so many applications where you need to narrow down an array to smaller a smaller portion.

163
00:09:46,640 --> 00:09:51,410
Remember, you're not actually updating or mutating the original, but it gives you a return value that

164
00:09:51,410 --> 00:09:53,090
you can save and then work with.

165
00:09:53,270 --> 00:09:56,390
So I use Filter all the time and it's relatively simple.

166
00:09:56,390 --> 00:10:00,050
You pass in a test function that you write, it returns true or false.

167
00:10:00,050 --> 00:10:05,000
If it's true for a given element, then that element is added to the filtered result array.

