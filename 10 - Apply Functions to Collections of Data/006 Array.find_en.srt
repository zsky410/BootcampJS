1
00:00:00,150 --> 00:00:04,400
The next one of these array methods that expects a callback is called Find.

2
00:00:04,410 --> 00:00:07,010
Find does pretty much what it sounds like.

3
00:00:07,020 --> 00:00:08,280
It finds an element.

4
00:00:08,280 --> 00:00:12,660
It retrieves an element from an array based off of a function that we pass in.

5
00:00:12,780 --> 00:00:15,810
So this function needs to return true or false.

6
00:00:15,810 --> 00:00:20,970
And each time find we'll call that function with one of these elements.

7
00:00:20,970 --> 00:00:24,930
And if that function returns true, then it's done.

8
00:00:24,960 --> 00:00:27,540
It will return to you the value of that element.

9
00:00:27,540 --> 00:00:31,440
So it only returns one value, one element that matches.

10
00:00:31,440 --> 00:00:37,050
Even if there are ten matches in a given array, it stops after it finds the very first one.

11
00:00:37,680 --> 00:00:38,910
So here's an example.

12
00:00:38,940 --> 00:00:40,440
I have an array called movies.

13
00:00:40,440 --> 00:00:41,790
It has four strings.

14
00:00:41,790 --> 00:00:46,650
Every movie has either Mr. or Mrs. or both in its title.

15
00:00:47,160 --> 00:00:55,590
If I want to find the first movie that has the string Mrs. in it, I could do movies that find I'll

16
00:00:55,590 --> 00:01:01,920
do an arrow function, I'll call the parameter movie and this needs to be a Boolean function that returns

17
00:01:01,920 --> 00:01:03,150
true or false.

18
00:01:03,150 --> 00:01:05,610
So how do I figure out if movie contains?

19
00:01:05,610 --> 00:01:06,500
Mrs..

20
00:01:06,510 --> 00:01:14,370
I have a couple of ways, but I'll do movie dot includes Mrs. and I need to make sure I return this

21
00:01:14,370 --> 00:01:20,790
if I'm not going to use an implicit return and then I'll save this to a variable, I'll call this concert

22
00:01:20,790 --> 00:01:21,570
movie.

23
00:01:22,500 --> 00:01:23,610
Let's see what happens.

24
00:01:23,610 --> 00:01:27,690
We'll look at movie and it contains Mr. and Mrs. Smith.

25
00:01:27,690 --> 00:01:29,520
Now movies is unchanged.

26
00:01:29,820 --> 00:01:32,430
All we're doing is a simple find a search.

27
00:01:32,430 --> 00:01:35,280
We're not removing or updating movies in any way.

28
00:01:35,790 --> 00:01:39,720
So this function right here again has to return true or false.

29
00:01:39,720 --> 00:01:46,620
And the first time it returns true for a given movie, a given element find is done and it returns that

30
00:01:46,620 --> 00:01:47,250
movie.

31
00:01:47,490 --> 00:01:54,000
So the fantastic Mr. Fox was movie the very first time through it was plugged into this function.

32
00:01:54,000 --> 00:01:59,790
It does not include Mrs. so it returns false, which means find moves on to the next element.

33
00:01:59,790 --> 00:02:08,699
Mr. and Mrs. Smith that became movie movie includes Mrs. now is true this returns true so then find

34
00:02:08,699 --> 00:02:11,970
stops everything and it returns this string right here.

35
00:02:12,000 --> 00:02:19,350
If I wanted to instead find the first movie that starts with Mrs. not just includes Mrs. somewhere I

36
00:02:19,350 --> 00:02:21,120
could write it as concept.

37
00:02:21,120 --> 00:02:24,420
I'll just do movie two equals movies dot find.

38
00:02:24,930 --> 00:02:26,910
We'll do an implicit return this time.

39
00:02:26,910 --> 00:02:33,480
M I'll do parent to start m index of Mrs..

40
00:02:33,600 --> 00:02:38,190
I do need to pay pay attention to capitalization or down case everything.

41
00:02:39,600 --> 00:02:41,310
I want that to equal one.

42
00:02:42,060 --> 00:02:44,130
That would mean that Mrs..

43
00:02:44,130 --> 00:02:45,120
Actually, what am I saying?

44
00:02:45,120 --> 00:02:46,410
I want two equals zero.

45
00:02:46,530 --> 00:02:51,930
That would mean that Mrs. comes at the very beginning of the string and that should match Mrs. Doubtfire,

46
00:02:51,930 --> 00:02:53,910
but not Mr. and Mrs. Smith.

47
00:02:53,970 --> 00:02:55,660
So let's see if it works.

48
00:02:55,660 --> 00:02:58,530
I run my code movie too.

49
00:02:58,770 --> 00:03:01,380
We get Mrs. Doubtfire again.

50
00:03:01,380 --> 00:03:05,460
This first one was looking for anything that contained Mrs. anywhere.

51
00:03:05,460 --> 00:03:08,520
We do have two matches, but this one doesn't matter.

52
00:03:08,520 --> 00:03:13,080
It's never found because find is going to stop after the first match it returns.

53
00:03:13,080 --> 00:03:15,360
Mr. and Mrs. Smith, the other movies.

54
00:03:15,360 --> 00:03:17,010
There could be 1000 other movies.

55
00:03:17,010 --> 00:03:18,120
They don't get looked at.

56
00:03:18,120 --> 00:03:19,140
They're passed over.

57
00:03:19,170 --> 00:03:24,000
This error function we wrote here, we could just do on a single line if we wanted to.

58
00:03:25,480 --> 00:03:25,920
Huh?

59
00:03:26,380 --> 00:03:30,520
For me, it's a bit long with my editor zoomed in, but it's not too bad.

60
00:03:30,520 --> 00:03:32,830
So this works if you want to do it that way.

61
00:03:33,250 --> 00:03:35,950
Now let's do another example with a different data structure.

62
00:03:35,950 --> 00:03:39,310
Here I have that box array we've been using for a couple of examples.

63
00:03:39,310 --> 00:03:40,510
Each book is an object.

64
00:03:40,510 --> 00:03:44,440
It has a title author's, which is an array and a rating.

65
00:03:44,860 --> 00:03:52,060
If I wanted to find a book that had a rating greater than 4.3, I would do books that find error function.

66
00:03:52,060 --> 00:03:56,320
I'll just go with B as the parameter B rating.

67
00:03:57,310 --> 00:04:04,210
I can spell rating is greater than or equal to 4.3 and we'll save that to a variable concept.

68
00:04:05,020 --> 00:04:05,980
Good book.

69
00:04:08,660 --> 00:04:09,710
Let's take a look.

70
00:04:10,130 --> 00:04:13,640
Good book is Bone The Complete Edition.

71
00:04:13,640 --> 00:04:14,690
Great graphic novel.

72
00:04:14,720 --> 00:04:17,570
By the way, rating is 4.42.

73
00:04:17,600 --> 00:04:19,279
It gave us the first match.

74
00:04:19,670 --> 00:04:24,710
We could also do something like find the first book where Neil Gaiman is an author.

75
00:04:25,010 --> 00:04:27,560
So contact Neil Book.

76
00:04:29,670 --> 00:04:33,070
Equals books don't find be.

77
00:04:33,630 --> 00:04:35,580
We want be authors.

78
00:04:36,000 --> 00:04:40,110
DOT Includes Neil Gaiman.

79
00:04:41,670 --> 00:04:42,480
There we go.

80
00:04:42,960 --> 00:04:45,240
And I think that one is good enough for one line.

81
00:04:45,240 --> 00:04:48,690
It's not that long, but just to have a little variety.

82
00:04:48,690 --> 00:04:51,090
Let's do it with parents.

83
00:04:52,860 --> 00:04:53,640
There we go.

84
00:04:54,480 --> 00:04:55,350
Let's take a look.

85
00:04:55,380 --> 00:04:56,310
Nail book.

86
00:04:57,450 --> 00:05:02,130
And it gave us Good Omens, the first book where he is listed as an author.

87
00:05:02,400 --> 00:05:06,720
So this one doesn't matter because find only gives us the first match.

88
00:05:07,170 --> 00:05:12,900
So find is really useful when you're trying to, for example, find something based off of an ID if

89
00:05:12,900 --> 00:05:19,290
you have a list of comments and or how about a list of posts that a user has created and they've clicked

90
00:05:19,290 --> 00:05:22,040
a button to delete one of those posts.

91
00:05:22,050 --> 00:05:24,420
If it's a web app, they want to remove it.

92
00:05:24,450 --> 00:05:26,070
When that button is clicked.

93
00:05:26,160 --> 00:05:31,320
Most likely you'll end up sending an ID you'll call a function with an ID of that post.

94
00:05:31,590 --> 00:05:35,010
It will be something like delete post with ID of two.

95
00:05:35,610 --> 00:05:37,170
It would be something like this.

96
00:05:37,500 --> 00:05:43,080
You would have a function called delete, maybe delete post you'd pass in two and then you would use

97
00:05:43,080 --> 00:05:46,470
to to find the post with that ID.

98
00:05:46,740 --> 00:05:58,140
So you might do post find for the post parameter p p dot id equals two and maybe instead of deleting

99
00:05:58,140 --> 00:05:59,250
you want it to update.

100
00:05:59,250 --> 00:06:05,850
So you would find the post and then update the post based off of that id we used find a lot, especially

101
00:06:05,850 --> 00:06:09,660
when we're looking for something based off of an identifier, a username.

102
00:06:09,660 --> 00:06:12,270
But remember, it only gives us the first match.

