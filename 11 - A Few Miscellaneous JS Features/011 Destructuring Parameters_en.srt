1
00:00:00,120 --> 00:00:05,760
There's one more place you'll often see the structuring used, which is inside of a function definition

2
00:00:05,760 --> 00:00:07,860
where the parameters are listed.

3
00:00:07,890 --> 00:00:14,130
We can use the syntax, the same D structuring syntax we've seen to de structure an array or an object.

4
00:00:14,130 --> 00:00:21,090
But if we put it inside the parentheses of a function definition, what this will do is extract or unpack

5
00:00:21,090 --> 00:00:23,520
values from the arguments passed in.

6
00:00:23,730 --> 00:00:30,450
So what I'm doing here is saying I'm expecting full name to be passed an object, hence the curly braces.

7
00:00:30,450 --> 00:00:33,000
And I only really care about first and last.

8
00:00:33,000 --> 00:00:35,970
So the object could contain a whole bunch of other things.

9
00:00:35,970 --> 00:00:39,570
But I'm only going to extract first and last and use them.

10
00:00:39,570 --> 00:00:40,910
So let's try it out.

11
00:00:40,920 --> 00:00:42,360
We'll define a function.

12
00:00:42,360 --> 00:00:46,650
We can use an arrow function, a regular function expression, a function declaration.

13
00:00:46,650 --> 00:00:47,580
It doesn't matter.

14
00:00:47,610 --> 00:00:50,850
Let's go with function prints.

15
00:00:51,060 --> 00:00:52,140
How about just print?

16
00:00:52,650 --> 00:00:56,010
And rather than just accepting a person.

17
00:00:57,470 --> 00:01:01,310
Like this and then extracting the parts we want from person.

18
00:01:01,430 --> 00:01:08,840
If we're going to print out something along the lines of Let's go with first, last and then title.

19
00:01:08,960 --> 00:01:14,390
So if we pass this runner in, we would get Eliot Kipchoge, the elder of the order of the golden heart

20
00:01:14,390 --> 00:01:15,020
of Kenya.

21
00:01:16,130 --> 00:01:25,430
So we could de structure first, last and title from person contact first last title.

22
00:01:26,030 --> 00:01:35,720
Oops, title equals person and then console.log here and I'll use a string template literal to display

23
00:01:35,720 --> 00:01:42,710
first and then a space and then last comma and then title.

24
00:01:43,760 --> 00:01:45,320
And this should work.

25
00:01:45,350 --> 00:01:48,950
If I run print runner.

26
00:01:50,160 --> 00:01:50,640
There we go.

27
00:01:50,670 --> 00:01:54,630
Elliott Kipchoge comma elder of the Order of the Golden Heart of Kenya.

28
00:01:55,050 --> 00:02:01,590
But if I wanted to instead de structure the object right here, I can shorten my code up significantly.

29
00:02:01,590 --> 00:02:08,910
So I'm going to duplicate this and comment out the original and get rid of this line entirely and instead

30
00:02:08,910 --> 00:02:10,770
de structure right here.

31
00:02:10,770 --> 00:02:14,310
So when the data is passed in, we'll just grab the parts we want.

32
00:02:14,310 --> 00:02:17,040
We'll unpack first, last and title.

33
00:02:17,640 --> 00:02:20,820
We don't need the rest of the object here.

34
00:02:20,820 --> 00:02:27,180
We have person so we could access country if we needed to or let's say there was 50 other properties,

35
00:02:27,180 --> 00:02:29,400
we would have access to them in here.

36
00:02:29,490 --> 00:02:34,470
But if all we need is these three, then why not de structure them?

37
00:02:34,470 --> 00:02:35,730
Just make it cleaner.

38
00:02:35,940 --> 00:02:39,420
Now if I run this code, it still should work.

39
00:02:39,420 --> 00:02:42,630
Print runner we get the exact same output.

40
00:02:44,190 --> 00:02:49,860
So that's pretty much that, at least for objects, we can do the same thing with arrays and I'll do

41
00:02:49,860 --> 00:02:52,260
a slightly different example here.

42
00:02:52,260 --> 00:02:56,550
I have an array that could represent a HTTP response.

43
00:02:56,550 --> 00:02:59,810
If you're not super familiar with HTTP, don't worry.

44
00:02:59,820 --> 00:03:07,110
Some frameworks and some some technologies will represent a response from a website as an array, and

45
00:03:07,110 --> 00:03:11,370
each line of the response will be represented as one element.

46
00:03:11,460 --> 00:03:18,180
And if I wanted to write a function that used the status code, which is the second element, what I

47
00:03:18,180 --> 00:03:20,010
could do is define my function.

48
00:03:20,010 --> 00:03:30,300
Let's go with parse response or something and let's de structure this element out of response.

49
00:03:30,570 --> 00:03:31,950
So this is an array.

50
00:03:31,950 --> 00:03:37,170
If I'm expecting an array to be passed in, I could grab each individual piece right here.

51
00:03:37,650 --> 00:03:41,040
So this first element, let's call that protocol.

52
00:03:41,790 --> 00:03:47,340
The second element would be status code and the third element would be content type.

53
00:03:49,620 --> 00:03:52,920
Now inside of here, I have access to those pieces.

54
00:03:52,920 --> 00:03:54,780
And let's just print status code.

55
00:03:55,380 --> 00:04:00,180
Let's do status colon.

56
00:04:01,220 --> 00:04:02,150
Status code.

57
00:04:03,560 --> 00:04:10,760
And if I run parse response, whoops, parse response and I pass in my response.

58
00:04:11,640 --> 00:04:13,170
Let me open this up a bit.

59
00:04:13,740 --> 00:04:20,760
We get 200 OC, so we're d structuring in the exact same way when a value is passed in.

60
00:04:20,790 --> 00:04:27,270
This is expecting an array to be passed in and we are unpacking all three elements or the first three.

61
00:04:27,270 --> 00:04:31,160
If there were more, we would be ignoring them versus up here.

62
00:04:31,200 --> 00:04:36,150
We're doing the same thing, but with an object and we're unpacking based off of the property name.

63
00:04:36,150 --> 00:04:41,700
So you'll see this often, far more often with objects, definitely, where you just need one or two

64
00:04:41,700 --> 00:04:42,720
pieces of the object.

65
00:04:42,720 --> 00:04:47,760
Or more than that, it's fine, but you don't need every single thing and it's just a nice way to shorten

66
00:04:47,760 --> 00:04:52,620
your functions up, make things cleaner, and not have to declare variables in the function.

67
00:04:52,620 --> 00:04:58,050
You can just grab them in the definition when an argument is passed in and that's pretty much it for

68
00:04:58,050 --> 00:05:00,780
DE Structuring a really versatile new feature.

69
00:05:00,780 --> 00:05:04,500
You'll see it a lot in the real world as well, and I'm going to be quiet.

