1
00:00:00,150 --> 00:00:00,480
All right.

2
00:00:00,480 --> 00:00:04,080
So we just talked about the arguments object and some of its shortcomings.

3
00:00:04,080 --> 00:00:05,610
It's been around for a long time.

4
00:00:05,610 --> 00:00:07,050
It's doing the best it can.

5
00:00:07,140 --> 00:00:10,050
Now we have a new, nicer syntax in rest.

6
00:00:10,170 --> 00:00:12,330
So rest is three dots.

7
00:00:12,330 --> 00:00:13,180
One, two, three.

8
00:00:13,200 --> 00:00:14,790
Just like we use for spread.

9
00:00:14,970 --> 00:00:19,050
But we put it inside the parameter list of a function definition.

10
00:00:19,050 --> 00:00:25,920
And what it does is it collects all remaining arguments into a 100% real actual array.

11
00:00:25,950 --> 00:00:30,600
Not an array like object, not an array, imitation, a real array.

12
00:00:30,750 --> 00:00:33,420
So earlier we wrote this function called Sum.

13
00:00:33,420 --> 00:00:34,920
Using the arguments object.

14
00:00:34,920 --> 00:00:36,780
We had to convert it into an array.

15
00:00:36,930 --> 00:00:39,900
If we want to write the same function using rest.

16
00:00:39,930 --> 00:00:46,020
What we do is we put three dots right here and then we decide on a name and that will be the name of

17
00:00:46,020 --> 00:00:49,390
the array that contains all of the arguments in our case.

18
00:00:49,410 --> 00:00:51,540
All arguments will be collected.

19
00:00:51,780 --> 00:00:57,090
So let's go with nums and then we can start by just contact logging nums.

20
00:00:57,450 --> 00:00:59,760
We need to match that name that we gave it here.

21
00:01:00,930 --> 00:01:04,200
Let's call some on four or five, six, seven.

22
00:01:04,800 --> 00:01:06,780
And it's an actual array.

23
00:01:07,470 --> 00:01:10,380
It's not an array like object, it's a real array.

24
00:01:10,650 --> 00:01:16,680
So I could implement the same functionality where I return using reduce on nums.

25
00:01:16,680 --> 00:01:18,810
So nums dot reduce.

26
00:01:19,200 --> 00:01:25,770
And then we have our reducer function which will be total and then current.

27
00:01:26,130 --> 00:01:32,940
Val, I'll use an arrow function and we just want to return total plus curve.

28
00:01:32,970 --> 00:01:35,580
Val let's check it out.

29
00:01:36,300 --> 00:01:36,900
It works.

30
00:01:36,900 --> 00:01:38,070
We get 22.

31
00:01:38,250 --> 00:01:41,370
So this is the simplest way to use rest.

32
00:01:41,370 --> 00:01:43,590
We're collecting all arguments.

33
00:01:43,590 --> 00:01:49,290
Everything passed in, whether it's 20, the first one, the last one, they're all combined into the

34
00:01:49,290 --> 00:01:50,280
nums array.

35
00:01:50,460 --> 00:01:53,250
But we can also use it in a different way.

36
00:01:53,280 --> 00:01:58,680
We can use it to collect the remaining arguments, which is what I wrote here collects all remaining

37
00:01:58,680 --> 00:01:59,280
arguments.

38
00:01:59,280 --> 00:02:01,770
So not just every argument, no matter what.

39
00:02:01,770 --> 00:02:06,510
Instead, it collects the remaining arguments that have not been matched with a parameter.

40
00:02:06,960 --> 00:02:13,680
So if we go back to that example where I had full name and I wanted a function where we have a first,

41
00:02:13,680 --> 00:02:22,710
a last and then a list of titles I could use rest right here to collect the remaining titles first last.

42
00:02:22,710 --> 00:02:25,080
Those will be their own parameters.

43
00:02:25,080 --> 00:02:27,510
Then everything else is collected here.

44
00:02:27,510 --> 00:02:35,700
So I'll start by just constant logging first with first and then I'll do the same thing for last and

45
00:02:35,700 --> 00:02:37,860
then one more time for titles.

46
00:02:38,940 --> 00:02:45,780
And if I call full name where I'm passing Tom as first, Jones as last, and then a bunch of arguments

47
00:02:45,780 --> 00:02:47,010
to be the titles.

48
00:02:47,910 --> 00:02:54,480
You can see what we get first is still Tom last is Jones, but titles only contains the remaining arguments.

49
00:02:54,480 --> 00:02:59,940
When we tried the same thing with the arguments object, it contained every argument, including first

50
00:02:59,940 --> 00:03:01,470
and last or Tom Jones.

51
00:03:01,470 --> 00:03:06,540
But in this case it is only collecting the unclaimed arguments, if that makes sense.

52
00:03:06,720 --> 00:03:12,090
So we have them collected in titles and it's an array and I could use titles to do something.

53
00:03:12,090 --> 00:03:15,330
I could iterate over each title, but I'm not going to bother with it.

54
00:03:15,330 --> 00:03:18,840
I just wanted to show you that we have a way of separating them out.

55
00:03:19,170 --> 00:03:21,750
We have first, last, and then everything else.

56
00:03:21,930 --> 00:03:24,870
Because of the way rest works, it collects everything.

57
00:03:24,870 --> 00:03:29,460
You wouldn't have multiple rests, JavaScript wouldn't know what to do.

58
00:03:29,490 --> 00:03:36,450
Because the logic here is combine everything that has not been put in a parameter already into the titles

59
00:03:36,450 --> 00:03:36,960
array.

60
00:03:36,960 --> 00:03:42,210
So how could we have something afterwards if we just claimed everything before it into the titles array?

61
00:03:42,840 --> 00:03:48,420
You can name these whatever you'd like as we've seen, and along with that, the order definitely matters.

62
00:03:48,420 --> 00:03:51,270
If you tried to do this, it's not going to work.

63
00:03:53,070 --> 00:03:55,050
Last would never have a value ever.

64
00:03:55,050 --> 00:03:57,210
And if you tried to do it this way.

65
00:03:58,080 --> 00:04:00,210
Titles first last.

66
00:04:01,230 --> 00:04:02,370
Let's see what happens.

67
00:04:02,610 --> 00:04:02,940
Hmm.

68
00:04:02,970 --> 00:04:05,700
Rest parameter must be the last formal parameter.

69
00:04:05,700 --> 00:04:08,040
So JavaScript doesn't even let you try.

70
00:04:08,160 --> 00:04:10,750
It's telling you it has to be the last parameter.

71
00:04:10,770 --> 00:04:12,030
That's the only option.

72
00:04:12,720 --> 00:04:17,040
And then the last thing that is nice about it is that we can use it in an arrow function.

73
00:04:17,040 --> 00:04:22,650
So I could rewrite function some this function statement, the declaration, I could rewrite it as an

74
00:04:22,650 --> 00:04:23,490
arrow function.

75
00:04:23,580 --> 00:04:26,850
Just copy this and define it down here.

76
00:04:26,850 --> 00:04:28,470
Let's go with multiply actually.

77
00:04:28,470 --> 00:04:37,920
So const multiply equals our arrow function and we'll call the parameter nums the rest parameter that

78
00:04:37,920 --> 00:04:39,750
accepts everything into an array.

79
00:04:40,770 --> 00:04:42,930
And then let's do an implicit return.

80
00:04:43,650 --> 00:04:45,660
So we don't need to say return any more.

81
00:04:46,560 --> 00:04:51,660
We'll do nums dot reduce and then multiply instead of add.

82
00:04:51,660 --> 00:04:56,970
And we can use a double implicit return if we want to just do it on one line.

83
00:04:58,410 --> 00:04:59,010
Okay.

84
00:04:59,010 --> 00:05:06,660
So we have our arrow function here where we're using rest, we're calling the array nums and because

85
00:05:06,660 --> 00:05:13,400
it's an array we can call reduce and then I'm just returning total times curve l in my reducer function.

86
00:05:13,410 --> 00:05:17,820
If you skipped over the reduced videos, I really recommend you check those out.

87
00:05:17,820 --> 00:05:19,350
I know they're a bit painful.

88
00:05:19,410 --> 00:05:20,820
Trust me, I had to teach it.

89
00:05:20,820 --> 00:05:22,410
It's not it's not that exciting.

90
00:05:22,410 --> 00:05:24,810
But it is something that you'll use all the time.

91
00:05:24,810 --> 00:05:26,940
Anyway, let's make sure it works.

92
00:05:26,940 --> 00:05:30,780
So we'll call multiply, multiply.

93
00:05:30,810 --> 00:05:31,800
How about four or five?

94
00:05:31,800 --> 00:05:34,710
Six, seven and we get 840.

95
00:05:34,710 --> 00:05:36,480
Let's do something we can verify easier.

96
00:05:36,480 --> 00:05:38,910
Two, three and four gives us 24.

97
00:05:38,940 --> 00:05:39,600
Great.

98
00:05:39,990 --> 00:05:43,920
So we can use an arrow functions which we could not do with the arguments object.

99
00:05:43,920 --> 00:05:49,200
We can use it as an array because it is an array unlike the arguments object where we had to convert

100
00:05:49,200 --> 00:05:50,070
it to an array.

101
00:05:50,070 --> 00:05:52,950
And lastly, we have more discretion over what it collects.

102
00:05:52,950 --> 00:05:57,960
We can tell it to only collect the remaining arguments after certain specific parameters.

103
00:05:57,960 --> 00:06:00,690
Hence the term rest versus the arguments.

104
00:06:00,690 --> 00:06:04,050
Object just contains everything, every argument, no matter what.

105
00:06:04,590 --> 00:06:09,720
So when I say that rest is kind of like the opposite of spread, maybe you can see what I mean.

106
00:06:09,720 --> 00:06:13,740
We are collecting elements or collecting arguments into an array.

107
00:06:13,770 --> 00:06:15,270
We're not copying them over.

108
00:06:15,270 --> 00:06:16,440
We're not spreading.

109
00:06:16,440 --> 00:06:22,800
If we do something like this where we are using spread, we're taking a single element and breaking

110
00:06:22,800 --> 00:06:25,720
it up into multiple pieces into an array.

111
00:06:25,740 --> 00:06:30,260
We're copying it over one element at a time versus when we use rest.

112
00:06:30,270 --> 00:06:31,400
We're doing the opposite.

113
00:06:31,410 --> 00:06:35,850
We're taking multiple disparate elements, arguments and combining them into an array.

114
00:06:35,850 --> 00:06:41,070
So the syntax is the same, but that's why we have a different name rest versus spread.

115
00:06:41,160 --> 00:06:45,270
I guess there's a world where it could have just been spread, but it's called rest.

116
00:06:45,270 --> 00:06:50,310
It has its own page on the docs because it behaves differently and it's sort of the opposite.

117
00:06:50,310 --> 00:06:50,970
So that's it.

118
00:06:50,970 --> 00:06:54,300
For rest, we have a couple more new features in JavaScript.

119
00:06:54,300 --> 00:06:57,090
One of my favorites is coming up called D Structuring.

