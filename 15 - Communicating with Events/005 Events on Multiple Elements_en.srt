1
00:00:00,090 --> 00:00:02,210
Next up, a very important topic.

2
00:00:02,220 --> 00:00:05,230
How do we attach event listeners to multiple elements?

3
00:00:05,250 --> 00:00:09,050
We've seen how we can attach multiple event listeners to one element.

4
00:00:09,060 --> 00:00:15,300
We had a button and that button had a click listener, a click handler, and also a mouse over.

5
00:00:15,510 --> 00:00:19,790
But how do we take every button on a page and add a click event handler?

6
00:00:19,800 --> 00:00:26,340
Or how do we take every upvote arrow on Reddit and make it do something when you click upload versus

7
00:00:26,340 --> 00:00:29,790
downvote, we don't attach those manually one at a time.

8
00:00:29,790 --> 00:00:30,480
At least we don't.

9
00:00:30,510 --> 00:00:32,790
Hard code it, we use a loop.

10
00:00:33,090 --> 00:00:34,620
So here are some examples.

11
00:00:34,620 --> 00:00:40,680
This game we saw earlier on each one of these cards has some event functionality.

12
00:00:40,680 --> 00:00:44,250
When I click, it flips, I click, it flips.

13
00:00:44,250 --> 00:00:45,090
When I hover.

14
00:00:45,090 --> 00:00:46,800
That's probably done through CSS.

15
00:00:46,800 --> 00:00:49,950
So it's probably not a JavaScript event, but it could be a mouse over.

16
00:00:50,430 --> 00:00:56,640
But each time I click, there is an event that's firing and it pertains to each one of these cards.

17
00:00:56,910 --> 00:01:02,010
And there's no way I mean, there's no I can't imagine that they're doing this manually where they have

18
00:01:02,010 --> 00:01:07,320
a variable button, one button to button three, button four, and they're calling an event listener

19
00:01:07,320 --> 00:01:08,700
on every single button.

20
00:01:08,700 --> 00:01:10,560
That would be disastrous.

21
00:01:10,650 --> 00:01:13,890
Here's another example a simple calendar widget.

22
00:01:13,920 --> 00:01:15,510
It's not that simple, actually.

23
00:01:15,540 --> 00:01:22,890
It's a good amount of code coming from code pen and every single day has some functionality I can click

24
00:01:23,640 --> 00:01:24,990
and stuff happens.

25
00:01:24,990 --> 00:01:25,920
That's about it.

26
00:01:26,130 --> 00:01:32,310
But we have some click functionality on every date on this calendar, so let's see how we do that.

27
00:01:32,670 --> 00:01:40,350
I have my blank HTML page and rather than putting HTML here to start with, let's generate some with

28
00:01:40,350 --> 00:01:41,430
our JavaScript.

29
00:01:41,430 --> 00:01:46,650
So I'll delete what we had before and I'm going to make just some colored boxes.

30
00:01:46,650 --> 00:01:52,110
You'll see why in a bit different colored boxes, using an array of colors, we can just do the standard

31
00:01:52,110 --> 00:01:53,550
boring rainbow colors.

32
00:01:54,690 --> 00:01:56,010
Red, orange.

33
00:01:56,460 --> 00:01:57,690
I have an array of colors.

34
00:01:57,690 --> 00:01:58,680
Red, orange, yellow.

35
00:01:58,680 --> 00:01:59,880
Green, blue, purple, indigo.

36
00:01:59,880 --> 00:02:00,510
Violet.

37
00:02:00,720 --> 00:02:07,080
I want to loop over all of these colors and create a div on the page with that background color.

38
00:02:07,680 --> 00:02:11,940
So I'll do a four let color of colors.

39
00:02:12,840 --> 00:02:19,770
We want to create a div, so document dot create element div save that to a variable.

40
00:02:19,980 --> 00:02:23,280
I'll call it box and I'm going to do a couple of things.

41
00:02:23,280 --> 00:02:31,050
First, I'll actually define a class called Box in my CSS and I'll give it a width of let's start with

42
00:02:31,050 --> 00:02:39,810
200 pixels, a height of 200 pixels, and then let's create a container to insert all of our boxes in

43
00:02:39,810 --> 00:02:40,950
our HTML.

44
00:02:41,250 --> 00:02:48,030
So we'll create maybe a section, give it an ID of boxes, and that's where we'll attach all of these

45
00:02:48,030 --> 00:02:48,780
boxes.

46
00:02:49,200 --> 00:02:57,360
So we'll select that document dot query selector using the ID sign boxes.

47
00:02:57,360 --> 00:03:00,600
We'll call this the container as the variable name.

48
00:03:01,560 --> 00:03:02,910
We want to make a box.

49
00:03:03,360 --> 00:03:13,410
We also want to assign that box, dot style, dot background color, camel cased to be color from the

50
00:03:13,410 --> 00:03:13,980
loop.

51
00:03:14,130 --> 00:03:19,590
So the first one will be an empty div with a background of red and then orange and so on, and we'll

52
00:03:19,590 --> 00:03:21,390
append them to the container.

53
00:03:21,390 --> 00:03:31,170
So container dot append child or just regular append if you don't care about i.e. append child of box.

54
00:03:32,730 --> 00:03:37,170
And I also have that box class, but let's see if it's showing up at all right now.

55
00:03:37,830 --> 00:03:45,390
If we inspect, we should see that we do have Divs in there, but they have no content and they don't

56
00:03:45,390 --> 00:03:49,050
have a height or width because our class is not being used.

57
00:03:49,260 --> 00:03:52,980
So let's add that class box dot class list.

58
00:03:53,370 --> 00:03:55,260
Add box.

59
00:03:56,750 --> 00:03:57,590
Refresh.

60
00:03:58,100 --> 00:03:59,500
Hey, there's our boxes.

61
00:03:59,510 --> 00:04:00,980
I'm way zoomed in again.

62
00:04:01,660 --> 00:04:04,130
Okay, so we've got these different boxes.

63
00:04:04,670 --> 00:04:06,380
I'm quickly going to style them.

64
00:04:06,380 --> 00:04:14,090
So in my case, what I'm going to do is give the boxes ID, which is our container.

65
00:04:14,780 --> 00:04:16,880
A display of flex.

66
00:04:17,450 --> 00:04:22,400
If you're not familiar with flex box, well, we don't have time to talk about that in this video.

67
00:04:22,430 --> 00:04:27,530
It's a relatively easy way of positioning elements on the page and divvying up space.

68
00:04:28,190 --> 00:04:30,800
I'll do justified content center.

69
00:04:31,040 --> 00:04:33,200
Align Items Center.

70
00:04:34,310 --> 00:04:35,690
Let's see if that works for us.

71
00:04:35,720 --> 00:04:36,320
Okay.

72
00:04:37,190 --> 00:04:37,820
Awesome.

73
00:04:37,820 --> 00:04:39,350
So we have this going now.

74
00:04:39,350 --> 00:04:43,830
We have our boxes on the page now for the main event.

75
00:04:43,850 --> 00:04:46,370
How do we add a click listener to each one?

76
00:04:47,030 --> 00:04:52,640
Well, the most obvious answer that you probably came up with is to use a loop, and that's the right

77
00:04:52,640 --> 00:04:53,510
way of doing it.

78
00:04:53,510 --> 00:04:58,940
So we just loop over all those boxes, we add an event to or an event listener to each one.

79
00:04:58,940 --> 00:05:03,770
But if we want to do something unique for each box, if I wanted to print out the color that we're clicking

80
00:05:03,770 --> 00:05:06,290
on, we have to add a little more code in.

81
00:05:06,290 --> 00:05:10,160
But let's start by adding in an event listener for each box.

82
00:05:10,490 --> 00:05:17,270
So we could do a separate loop, we could select all the boxes and using query selector all loop over

83
00:05:17,270 --> 00:05:20,150
each box and do box add event listener.

84
00:05:20,300 --> 00:05:26,900
Or we could just do it right here as we append it or after we append it, it doesn't matter.

85
00:05:27,050 --> 00:05:30,380
I could do box dot add event listener.

86
00:05:30,380 --> 00:05:38,720
Remember this box variable is a new div each time through so it will reference or it refers to the red

87
00:05:38,720 --> 00:05:39,740
box we see here.

88
00:05:39,740 --> 00:05:44,120
And then next time around it's the orange one, then all the way down to the violet one.

89
00:05:44,900 --> 00:05:47,630
So boxed add event listener for click.

90
00:05:48,140 --> 00:05:53,300
We'll add in our function here and why don't we just console.log?

91
00:05:53,300 --> 00:05:55,160
Clicked a box.

92
00:05:56,480 --> 00:05:58,490
So this is simple enough.

93
00:05:58,580 --> 00:06:01,730
We should get a console.log click to box.

94
00:06:01,730 --> 00:06:02,450
Click the box.

95
00:06:02,450 --> 00:06:04,640
I'm clicking if you can't hear that.

96
00:06:04,910 --> 00:06:09,920
But what if I want to print out the specific color that was clicked or do something with that color,

97
00:06:09,950 --> 00:06:13,010
maybe change the background of the entire body?

98
00:06:13,010 --> 00:06:14,570
It's actually not that bad.

99
00:06:14,570 --> 00:06:20,000
In this loop we have box I could just access box I could console.log.

100
00:06:20,000 --> 00:06:23,990
Box dot and then style dot.

101
00:06:24,290 --> 00:06:26,090
Background color.

102
00:06:27,280 --> 00:06:28,540
And print that out.

103
00:06:28,570 --> 00:06:30,040
Let's refresh the page.

104
00:06:30,730 --> 00:06:31,990
Red, orange.

105
00:06:31,990 --> 00:06:32,380
Yellow.

106
00:06:32,380 --> 00:06:33,130
Green, blue.

107
00:06:33,130 --> 00:06:33,580
Purple.

108
00:06:33,580 --> 00:06:33,970
Indigo.

109
00:06:33,970 --> 00:06:34,660
Violet.

110
00:06:34,660 --> 00:06:35,440
Indigo.

111
00:06:36,160 --> 00:06:36,730
Violet.

112
00:06:36,730 --> 00:06:37,120
Violet.

113
00:06:37,120 --> 00:06:37,450
Violet.

114
00:06:37,450 --> 00:06:37,880
Indigo.

115
00:06:37,900 --> 00:06:38,420
Okay.

116
00:06:38,500 --> 00:06:40,450
Anyway, distracted.

117
00:06:40,450 --> 00:06:40,810
Here.

118
00:06:40,810 --> 00:06:41,860
This works.

119
00:06:41,980 --> 00:06:46,210
We have access to the variable box because we're inside the loop still.

120
00:06:46,660 --> 00:06:48,970
But here's where it gets a little trickier.

121
00:06:49,030 --> 00:06:54,760
Let's say that my code is getting really long, and I want to break it into separate functions.

122
00:06:54,760 --> 00:06:59,440
I don't want to have all of this, all my logic contained in one loop.

123
00:06:59,620 --> 00:07:00,720
I want to break it out.

124
00:07:00,730 --> 00:07:03,970
Maybe this function here is 50 lines.

125
00:07:04,360 --> 00:07:05,830
How could I make that work?

126
00:07:05,860 --> 00:07:09,940
Well, if I make a separate function, let's call this function.

127
00:07:11,350 --> 00:07:13,540
Let's do a function expression.

128
00:07:13,540 --> 00:07:15,310
We'll go with print.

129
00:07:15,310 --> 00:07:19,330
Color equals a function.

130
00:07:20,050 --> 00:07:27,790
And in here, what I want to do is print out the background color and I'll update my ADD event listener.

131
00:07:28,850 --> 00:07:32,780
To call print color like this.

132
00:07:33,050 --> 00:07:38,870
So boxed add event listener of click when there's a click on that box print color.

133
00:07:39,740 --> 00:07:43,400
Right now, I don't have a way to access box at all.

134
00:07:43,910 --> 00:07:48,960
I could pass it in, but I can't do that here because the function will execute right away.

135
00:07:48,980 --> 00:07:50,690
If I were to pass box in.

136
00:07:51,170 --> 00:08:00,110
So I guess I could rewrite this as a function like this and then call print color and then pass in box

137
00:08:00,110 --> 00:08:00,950
like this.

138
00:08:01,400 --> 00:08:03,620
Let's see if that works instead of print color.

139
00:08:04,190 --> 00:08:06,320
We'll accept a box.

140
00:08:07,730 --> 00:08:13,250
As a parameter and constant log box style dot background again.

141
00:08:15,330 --> 00:08:20,340
So I have this function that runs and all it does is it calls print color up here.

142
00:08:20,820 --> 00:08:22,500
Imagine we have a lot more code.

143
00:08:23,400 --> 00:08:24,460
So this does work.

144
00:08:24,480 --> 00:08:27,750
We can pass that argument around of box.

145
00:08:27,870 --> 00:08:32,669
But there's another option which doesn't involve having to add a function in here.

146
00:08:34,200 --> 00:08:42,000
I can simply pass print color and I'll have to change it because right now box will be completely undefined.

147
00:08:43,169 --> 00:08:48,120
But what is the magical keyword I can use to reference the item that has been clicked?

148
00:08:48,540 --> 00:08:50,220
It is this.

149
00:08:50,220 --> 00:08:50,850
The keyword?

150
00:08:50,850 --> 00:08:51,480
This.

151
00:08:52,320 --> 00:08:58,650
So if we console.log this and print color, we don't need to pass in a box.

152
00:08:58,890 --> 00:09:00,270
Let's see what happens now.

153
00:09:01,320 --> 00:09:02,430
Red, orange.

154
00:09:02,430 --> 00:09:03,090
Yellow.

155
00:09:03,210 --> 00:09:07,280
This is referring to the individual div that was clicked on.

156
00:09:07,290 --> 00:09:15,690
Remember that this instead of a method which is added on to an object, this will refer to that object.

157
00:09:15,720 --> 00:09:20,220
If you skipped over the section on this, I highly recommend you go back and check it out.

158
00:09:20,250 --> 00:09:23,770
It's not the sexiest thing ever in JavaScript, but it is important.

159
00:09:23,790 --> 00:09:29,610
We also could rewrite this to do something else instead of printing out the background color.

160
00:09:29,640 --> 00:09:35,910
Let's either change the background color of the body or maybe we'll add an h1n up top.

161
00:09:36,330 --> 00:09:43,610
H one say pick a color and we'll change the color of our h one depending on what you click on.

162
00:09:43,620 --> 00:09:49,260
And I'm going to give my h1a text, a line of center, not text decoration.

163
00:09:49,950 --> 00:09:51,480
So it's aligned in the middle.

164
00:09:52,350 --> 00:09:55,740
And then in my JavaScript I'll select that h one.

165
00:09:56,520 --> 00:10:07,080
So const H one equals document dot query selector h one and I'll put it in the function up top.

166
00:10:07,680 --> 00:10:11,490
And instead of calling this print color, we'll go with change color.

167
00:10:12,210 --> 00:10:14,220
We'll call change color down here.

168
00:10:15,270 --> 00:10:25,350
And then what we want to do is update h one dot style dot color to be this dot style dot background

169
00:10:25,350 --> 00:10:25,950
color.

170
00:10:25,980 --> 00:10:30,990
So whichever div we clicked on, we want to take the background color of that, which is what we're

171
00:10:30,990 --> 00:10:36,330
doing right here, get that value and set the H one, which isn't on the page right now.

172
00:10:36,360 --> 00:10:37,120
There it is.

173
00:10:37,140 --> 00:10:39,880
Set the H one to be that color.

174
00:10:39,900 --> 00:10:41,760
Now, change color is not defined.

175
00:10:41,760 --> 00:10:42,210
Let's see.

176
00:10:42,210 --> 00:10:43,110
Change color.

177
00:10:43,560 --> 00:10:44,430
Extra e.

178
00:10:44,460 --> 00:10:45,150
There we go.

179
00:10:46,250 --> 00:10:47,510
Let's see if it works.

180
00:10:47,930 --> 00:10:48,290
All right.

181
00:10:48,290 --> 00:10:52,760
We've got red, orange, yellow, green, blue, purple, indigo, violet.

182
00:10:53,000 --> 00:10:53,750
Awesome.

183
00:10:53,760 --> 00:10:56,490
So we've got this nice little color picker.

184
00:10:56,510 --> 00:10:57,530
Very simple.

185
00:10:57,830 --> 00:11:03,770
But the point that I want to make here is that we can add event listeners to multiple elements inside

186
00:11:03,770 --> 00:11:04,430
of a loop.

187
00:11:04,880 --> 00:11:10,460
I'm not saying that you should use this pattern here where you always need to use the keyword this,

188
00:11:10,640 --> 00:11:17,210
but generally inside of an event handler like we have here, this will refer to the individual element

189
00:11:17,210 --> 00:11:20,060
that the event listener has been added to.

190
00:11:20,750 --> 00:11:28,040
So if I instead had instead of boxed add event listener, if I instead had document body date of add

191
00:11:28,040 --> 00:11:33,890
event listener or I had a button, this will refer to whatever I'm attaching that event listener to.

192
00:11:34,040 --> 00:11:36,710
So let's add one to our H one very quickly.

193
00:11:36,710 --> 00:11:38,180
We have our H one.

194
00:11:38,630 --> 00:11:47,150
I'll just select it up here now and do H one add event listener and we'll listen for maybe a mouse over.

195
00:11:48,960 --> 00:11:49,960
No capital.

196
00:11:49,980 --> 00:11:51,840
Oh, that always gets me.

197
00:11:52,200 --> 00:11:53,940
And we'll add in our function.

198
00:11:54,600 --> 00:12:02,640
Why don't we just console.log this dot in our text and we'll see what happens here.

199
00:12:02,670 --> 00:12:06,330
And now when I mouse over that h one, we're getting pick a color.

200
00:12:06,360 --> 00:12:12,990
This is referring to the H one that the ad event listener ran on or that we attached it to.

201
00:12:13,500 --> 00:12:14,620
So I'll get rid of that.

202
00:12:14,640 --> 00:12:17,100
We don't need to add that mouse effect.

203
00:12:17,310 --> 00:12:18,840
And we'll leave it at this.

204
00:12:19,800 --> 00:12:21,180
No pun intended, but.

205
00:12:21,180 --> 00:12:21,810
All righty.

206
00:12:21,810 --> 00:12:26,950
So we saw that we can add multiple click listeners to or one click listener to multiple elements.

207
00:12:26,970 --> 00:12:30,010
They are separate add event listener calls.

208
00:12:30,030 --> 00:12:32,790
It's not like we have one event that we're listening for.

209
00:12:32,820 --> 00:12:37,980
We're attaching eight or nine or however many different colors we have where it's hatching that many

210
00:12:37,980 --> 00:12:39,030
event listeners.

211
00:12:39,060 --> 00:12:42,300
It's not like we just have one overarching event listener.

212
00:12:42,300 --> 00:12:43,590
We have multiple.

213
00:12:43,830 --> 00:12:44,460
All right.

