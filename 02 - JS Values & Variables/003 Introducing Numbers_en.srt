1
00:00:00,270 --> 00:00:00,840
All righty.

2
00:00:00,840 --> 00:00:03,469
With that out of the way, let's start learning JavaScript.

3
00:00:03,480 --> 00:00:06,990
So the first of these primitive types we'll talk about is number.

4
00:00:07,020 --> 00:00:09,510
Number is pretty self-explanatory.

5
00:00:09,510 --> 00:00:13,650
It is a way of storing or representing a number in JavaScript.

6
00:00:13,770 --> 00:00:17,820
So other languages have multiple different types for numbers.

7
00:00:17,820 --> 00:00:23,310
For example, some languages store decimal numbers differently than whole numbers or integers.

8
00:00:23,310 --> 00:00:26,190
But in JavaScript we have one type of number.

9
00:00:26,190 --> 00:00:27,780
It's just called number.

10
00:00:27,930 --> 00:00:34,440
That's it number works with positive numbers, negative numbers, whole numbers, integers, decimal

11
00:00:34,440 --> 00:00:36,900
numbers, which are also often called floats.

12
00:00:37,200 --> 00:00:38,460
I'll show you a couple of examples.

13
00:00:38,460 --> 00:00:42,690
If I open up my console again, I'll pop this out into its own window.

14
00:00:43,080 --> 00:00:46,440
I can just enter a number like 13 and hit enter.

15
00:00:46,470 --> 00:00:48,030
It doesn't really do anything.

16
00:00:48,030 --> 00:00:50,310
The console just tells me, Oh yeah, I know.

17
00:00:50,310 --> 00:00:50,730
13.

18
00:00:50,730 --> 00:00:51,450
Here you go.

19
00:00:51,630 --> 00:00:53,250
It's not storing it.

20
00:00:53,250 --> 00:00:54,540
It's not saving it.

21
00:00:54,540 --> 00:00:57,360
I'm just simply referencing a number.

22
00:00:57,360 --> 00:01:02,100
So we've got numbers like this, we've got negative numbers, we've got decimal numbers.

23
00:01:02,400 --> 00:01:06,840
And because of the way JavaScript stores numbers, there are some important limitations to be aware

24
00:01:06,840 --> 00:01:07,290
of.

25
00:01:07,320 --> 00:01:14,130
If you ever need extreme precision with your numbers like you have, let's say something like this.

26
00:01:15,830 --> 00:01:16,130
All right.

27
00:01:16,130 --> 00:01:17,300
Well, that works still.

28
00:01:17,510 --> 00:01:19,180
But if I keep adding zeros, there we go.

29
00:01:19,190 --> 00:01:20,460
It was one zero off.

30
00:01:20,480 --> 00:01:23,660
You can see that we lose that entire decimal portion.

31
00:01:23,660 --> 00:01:29,060
So it does not store an infinitely precise number which makes sense.

32
00:01:29,060 --> 00:01:33,810
Everything is represented in memory and there is a maximum size for those numbers.

33
00:01:33,830 --> 00:01:38,170
Now, it's pretty rare that you would come up against this, at least when you're starting out.

34
00:01:38,180 --> 00:01:43,400
Most of the time you don't need precision to this point, but it is important to be aware of now while

35
00:01:43,400 --> 00:01:48,200
we're in the console here, one other thing you can do that I like to do often is clear my console.

36
00:01:48,650 --> 00:01:51,170
It looks like this clear and parentheses.

37
00:01:51,170 --> 00:01:54,740
This is actually something called a function which we'll talk about later.

38
00:01:54,770 --> 00:01:59,270
It doesn't do much except make you space so you can now type one.

39
00:02:00,320 --> 00:02:02,480
So numbers on their own aren't that useful.

40
00:02:02,480 --> 00:02:08,300
Just typing a number and getting it spit back to us is great, but we can't really do much with it until

41
00:02:08,300 --> 00:02:10,400
we talk about these basic operations.

42
00:02:10,400 --> 00:02:16,010
So with numbers, we have different mathematical operations that we can use, kind of like a calculator

43
00:02:16,010 --> 00:02:21,200
and on their own without other things in JavaScript, without what we're going to learn later.

44
00:02:21,200 --> 00:02:25,130
It really is just a glorified calculator, but it's important to start here.

45
00:02:25,430 --> 00:02:30,850
So we have things like addition, subtraction, multiplication and division, and there are a couple

46
00:02:30,850 --> 00:02:32,660
of others I'll point out in just a moment.

47
00:02:32,660 --> 00:02:35,810
But first, I want to talk about these great outlines.

48
00:02:35,960 --> 00:02:38,810
These are called comments in JavaScript.

49
00:02:38,810 --> 00:02:44,930
If you type to forward slashes in a row, it creates a comment which JavaScript will just ignore.

50
00:02:45,080 --> 00:02:48,560
So these aren't really useful in the console, although I can type them.

51
00:02:48,590 --> 00:02:53,900
As you can see here, it just ignores my code versus if I had this without a comment, I get an error.

52
00:02:53,930 --> 00:02:59,120
I can recall any line at any point with the up arrow, I can scroll through them.

53
00:02:59,210 --> 00:03:02,960
So if I add two slashes to the beginning, it's now ignored.

54
00:03:03,080 --> 00:03:08,540
So I use this a lot to write notes a lot of developers do to explain what they're doing here.

55
00:03:08,540 --> 00:03:14,210
I'm just using it to give you a label addition, subtraction and so on, so we can do basic addition

56
00:03:14,210 --> 00:03:15,340
and subtraction, right?

57
00:03:15,410 --> 00:03:17,450
Three plus four shocker.

58
00:03:17,450 --> 00:03:18,500
It gives us seven.

59
00:03:18,500 --> 00:03:22,670
We can do 1.5 plus eight, we get 9.5.

60
00:03:22,700 --> 00:03:26,030
We have subtraction 12 -4.5, six, seven.

61
00:03:26,960 --> 00:03:31,280
And we also have multiplication four times 1.3.

62
00:03:31,610 --> 00:03:33,980
Let's do 1.2, 4.8.

63
00:03:34,160 --> 00:03:34,760
Cool.

64
00:03:34,760 --> 00:03:35,870
I'm going to clear again.

65
00:03:36,170 --> 00:03:37,280
Now we have division.

66
00:03:37,280 --> 00:03:39,740
Now there's a couple of things I want to talk about with Division.

67
00:03:39,770 --> 00:03:46,430
First of all, it works how you would expect four divided by two gives us two spacing.

68
00:03:46,430 --> 00:03:47,600
As you probably already noticed.

69
00:03:47,600 --> 00:03:49,340
It doesn't really matter here.

70
00:03:49,340 --> 00:03:51,470
I can do four divided by two like this.

71
00:03:51,470 --> 00:03:52,910
I can add space there.

72
00:03:53,660 --> 00:03:54,650
It still works.

73
00:03:54,650 --> 00:04:00,590
There are definite situations where spacing can be important and you don't want to do this because it's

74
00:04:00,590 --> 00:04:01,580
impossible to look at.

75
00:04:01,580 --> 00:04:03,470
It's ugly and confusing.

76
00:04:03,650 --> 00:04:07,850
So I would stick to this or potentially that, but I prefer this.

77
00:04:07,850 --> 00:04:10,640
And remember, you won't always have perfect precision.

78
00:04:10,640 --> 00:04:15,020
Something like ten divided by three is going to give us 3.3, three, three, three, three, three,

79
00:04:15,020 --> 00:04:17,660
blah, blah, blah, five, which it makes sense.

80
00:04:17,899 --> 00:04:21,980
We can't store this irrational number where we have a million infinite threes.

81
00:04:21,980 --> 00:04:23,870
It's not a million, it's infinite threes.

82
00:04:23,870 --> 00:04:27,320
So we get an approximation, but just be aware of that.

83
00:04:27,320 --> 00:04:32,510
Now there are some other operators, there's one called Modulo, which some of you might be familiar

84
00:04:32,510 --> 00:04:32,990
with.

85
00:04:33,020 --> 00:04:35,450
It's also known as the remainder operator.

86
00:04:35,690 --> 00:04:42,950
What it will do is it takes the second operand and divides it into the first and then it returns the

87
00:04:42,950 --> 00:04:44,840
remainder that is left.

88
00:04:44,840 --> 00:04:46,790
So two goes into 27.

89
00:04:46,790 --> 00:04:52,670
It doesn't really matter how many times, but it goes in 13 times, which gives us 26 and the remainder

90
00:04:52,670 --> 00:04:53,510
is one.

91
00:04:54,380 --> 00:04:55,400
So we could test it out.

92
00:04:55,400 --> 00:05:00,200
We use the percent sign, so let's do 25 mod five.

93
00:05:00,560 --> 00:05:03,770
Well, it goes in cleanly, so the remainder is zero.

94
00:05:04,190 --> 00:05:08,600
Now if we did 25 mod three, this thing is spoiling it for me.

95
00:05:08,660 --> 00:05:09,620
That's annoying.

96
00:05:10,040 --> 00:05:11,630
It's giving you the answer already.

97
00:05:11,840 --> 00:05:15,410
What about if we did 14 mod four?

98
00:05:16,490 --> 00:05:17,390
Think about it.

99
00:05:17,390 --> 00:05:18,110
All right.

100
00:05:18,290 --> 00:05:24,500
14 mod four is two four goes into 14 three times cleanly, which gives us 12.

101
00:05:24,530 --> 00:05:25,850
The remainder is two.

102
00:05:26,180 --> 00:05:27,410
So that's modulo.

103
00:05:27,440 --> 00:05:28,550
It will come back later.

104
00:05:28,550 --> 00:05:32,270
We sometimes use it to determine if a number is even or odd.

105
00:05:32,270 --> 00:05:35,930
If a number is cleanly divisible by two, then it is even.

106
00:05:36,170 --> 00:05:41,660
And then the other operator I'll show you here is the exponent or exponential operator, which looks

107
00:05:41,660 --> 00:05:43,610
like this to star.

108
00:05:43,610 --> 00:05:52,100
Star if I do two star star three it is two to the third or two cubed two times two times two five star

109
00:05:52,100 --> 00:05:55,610
star two gives us 25, five times five.

110
00:05:56,330 --> 00:05:59,960
And if I did five to the fifth we get three one, two, five.

111
00:05:59,960 --> 00:06:03,350
So that is one way of doing exponents in JavaScript.

112
00:06:03,350 --> 00:06:07,430
There is a different way we'll talk about later, but I just want to throw it in here while we're talking

113
00:06:07,430 --> 00:06:08,660
about operations.

114
00:06:08,660 --> 00:06:14,210
The last thing I'll bring up is that we have the standard order of operations in JavaScript that most

115
00:06:14,210 --> 00:06:15,170
of you probably learned in.

116
00:06:15,250 --> 00:06:19,900
Middle school or at some point in school, we're in more complicated expressions.

117
00:06:19,900 --> 00:06:22,600
Different operators get precedence over others.

118
00:06:22,810 --> 00:06:29,320
So if we have something like one, let's do three minus nine times two.

119
00:06:30,200 --> 00:06:32,820
We have multiplication which will occur first.

120
00:06:32,840 --> 00:06:40,010
That gives us 18, three -18, gives us -15, and we can use parentheses to modify that.

121
00:06:40,940 --> 00:06:45,020
Parentheses is the highest or the first part of the order of operations.

122
00:06:45,020 --> 00:06:50,870
The way I learned it was Pam does parentheses exponents, multiplication, division, addition, subtraction.

123
00:06:51,290 --> 00:06:56,570
I know from one of my other courses I use PEM does in in other parts of the world they're taught with

124
00:06:56,570 --> 00:06:59,600
different acronyms, but it's generally the same order.

125
00:06:59,930 --> 00:07:04,070
So we have three minus nine that gets done first, which gives us negative six.

126
00:07:04,070 --> 00:07:07,010
We multiply that by two and we get -12.

127
00:07:07,100 --> 00:07:12,260
So you probably won't be doing a ton of really complex mathematical expressions, but if you need to,

128
00:07:12,290 --> 00:07:15,770
you can use parentheses and the regular order of operations applies.

129
00:07:15,950 --> 00:07:17,520
So that's numbers on its own.

130
00:07:17,540 --> 00:07:21,170
Again, right now we're kind of just treating JavaScript as a calculator.

131
00:07:21,260 --> 00:07:25,420
I guess it's cool enough to do that, but there's a lot more to the language.

132
00:07:25,430 --> 00:07:27,290
This is just the basics of numbers.

133
00:07:27,320 --> 00:07:31,340
Next up, we'll talk about how we store these and recall them using variables.

