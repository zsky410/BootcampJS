1
00:00:00,120 --> 00:00:06,360
Next up, a really important topic changing styles using JavaScript so we could select one element or

2
00:00:06,360 --> 00:00:10,890
20 elements and potentially change their color, their background color, their font size.

3
00:00:10,890 --> 00:00:11,930
We could hide them.

4
00:00:11,940 --> 00:00:12,870
How do we do that?

5
00:00:12,870 --> 00:00:16,680
How do we manipulate CSS properties using JavaScript and the DOM?

6
00:00:16,890 --> 00:00:20,340
Well, there's a couple of ways I'm going to show you one in this video.

7
00:00:20,340 --> 00:00:22,230
It's called the style property.

8
00:00:22,290 --> 00:00:25,680
So every element that we select has a style property.

9
00:00:25,680 --> 00:00:26,850
So why don't we select one?

10
00:00:26,850 --> 00:00:27,930
How about this?

11
00:00:28,590 --> 00:00:31,890
H one const h one equals document query selector.

12
00:00:31,890 --> 00:00:32,549
H one.

13
00:00:32,820 --> 00:00:40,650
In my CSS file that I have here, I've given all h1a color of purple and a font size of 60 pixels.

14
00:00:41,010 --> 00:00:50,130
So if I look at h one dot style, I open this up, we get this massive object, but it looks like everything

15
00:00:50,130 --> 00:00:51,330
is completely empty.

16
00:00:51,330 --> 00:00:53,850
This is not telling me what the color is.

17
00:00:53,850 --> 00:00:59,550
It's not telling me font size if I if I find color on here or I could just type it.

18
00:01:00,270 --> 00:01:00,960
Where are you?

19
00:01:00,990 --> 00:01:04,019
c0lo0, come on, here we go.

20
00:01:04,019 --> 00:01:05,010
Empty string.

21
00:01:05,250 --> 00:01:06,630
Why is that happening?

22
00:01:06,720 --> 00:01:10,410
It seems like this should be a representation of the styles on the element.

23
00:01:10,410 --> 00:01:15,330
But if I do h one style color as we just saw, nothing is there.

24
00:01:15,660 --> 00:01:20,070
So this is the first really important thing to understand about the style property.

25
00:01:20,310 --> 00:01:23,760
We can use the style property to change colors or styles.

26
00:01:23,760 --> 00:01:27,750
We can change any of those properties and they will be affected on the page.

27
00:01:27,810 --> 00:01:33,990
But if we're trying to use the style property to read existing properties, to read existing styles,

28
00:01:33,990 --> 00:01:39,390
it won't work unless those styles are defined in line, which is not really a good idea.

29
00:01:39,390 --> 00:01:41,610
We normally don't add inline styles.

30
00:01:41,610 --> 00:01:44,580
If I go to my H one, I can style it in line.

31
00:01:44,820 --> 00:01:49,080
I could say color is teal.

32
00:01:49,230 --> 00:01:50,640
I don't know why I'm doing quotes again.

33
00:01:50,640 --> 00:01:51,300
There we go.

34
00:01:51,300 --> 00:01:52,500
Color is teal.

35
00:01:53,520 --> 00:01:55,440
This is not normally what we would want to do.

36
00:01:55,470 --> 00:01:58,170
We want to separate our styles from our HTML.

37
00:01:58,350 --> 00:02:04,870
But if I do it this way and I refresh the page now, I select the H one again and I look at H one dot

38
00:02:04,890 --> 00:02:07,470
style dot color.

39
00:02:07,560 --> 00:02:09,210
It's now set to teal.

40
00:02:09,509 --> 00:02:15,420
So the style property only contains styles that you have set inline, which normally will be pretty

41
00:02:15,420 --> 00:02:18,510
much completely empty for every element that you look at.

42
00:02:18,750 --> 00:02:22,530
But we can also change the color or any of these styles here.

43
00:02:22,530 --> 00:02:25,890
Using the DOM using JavaScript I can now make this.

44
00:02:26,010 --> 00:02:27,210
Is there a color called orchid?

45
00:02:27,210 --> 00:02:29,340
Yes, there is a great color name.

46
00:02:29,490 --> 00:02:32,430
We get this change, it actually changes it.

47
00:02:32,430 --> 00:02:39,090
And if we look at what it does on our element, it now has the inline style color is orchid.

48
00:02:39,540 --> 00:02:44,100
If I go select something else, like how about just this paragraph here?

49
00:02:44,610 --> 00:02:51,120
So we'll do const p equals document query selector and then I'll just delete this.

50
00:02:51,120 --> 00:02:52,860
We want the first paragraph.

51
00:02:52,860 --> 00:02:55,560
So if I look at P, it's that paragraph right there.

52
00:02:55,590 --> 00:03:00,540
If I do P dot style dot well let's do color again.

53
00:03:00,540 --> 00:03:03,630
Color on this one will be white.

54
00:03:04,860 --> 00:03:05,280
Okay.

55
00:03:05,280 --> 00:03:10,380
So I have it highlighted so you can see it, but obviously it's not easily visible right now.

56
00:03:10,380 --> 00:03:17,250
So why don't we change the background color and the way we do a background color in CSS is this background

57
00:03:17,250 --> 00:03:18,570
dash color.

58
00:03:18,870 --> 00:03:24,270
Now, this is another very important part of working with styles in the DOM in JavaScript, the property

59
00:03:24,270 --> 00:03:31,080
names are camel cased, so there is no style background dash color.

60
00:03:31,560 --> 00:03:32,550
It doesn't exist.

61
00:03:32,550 --> 00:03:39,180
We'll get oh well I misspelled it, but this does not exist because in JavaScript this is not a valid

62
00:03:39,180 --> 00:03:39,990
identifier.

63
00:03:39,990 --> 00:03:48,330
You can't name a variable or add an object or a property to an object called B dash w that won't work.

64
00:03:48,960 --> 00:03:49,980
Syntax Error.

65
00:03:50,250 --> 00:03:54,960
So that is why all of the style properties in JavaScript are camel cased.

66
00:03:54,960 --> 00:04:00,990
So I could do P style dot background color camel case.

67
00:04:00,990 --> 00:04:05,610
It's set to an empty string because we haven't actually set an inline style.

68
00:04:05,640 --> 00:04:10,140
All of the styles we have are coming from our stylesheet and I don't think we have a background color

69
00:04:10,140 --> 00:04:14,100
anyway, but if I were to set it to black.

70
00:04:15,620 --> 00:04:17,829
Now that change takes effect.

71
00:04:17,839 --> 00:04:24,020
And if we look at the style attribute or the style property, we'll see that every single property name

72
00:04:24,020 --> 00:04:26,500
is camel case if it's more than one word.

73
00:04:26,510 --> 00:04:33,410
So any time you see animation delay or animation direction or anything like that in CSS, those would

74
00:04:33,410 --> 00:04:40,550
be dashes in between kabob, case, animation, dash delay in JavaScript in the DOM, it's all camel

75
00:04:40,550 --> 00:04:40,820
case.

76
00:04:40,820 --> 00:04:44,960
It has to be, otherwise they wouldn't be valid names for properties.

77
00:04:45,410 --> 00:04:51,590
Okay, so again, this is only inline properties that we can read out, but we can set any properties

78
00:04:51,590 --> 00:04:52,130
we want.

79
00:04:52,130 --> 00:04:57,380
But you have to remember that what you're doing is adding a property to the element itself, adding

80
00:04:57,410 --> 00:05:00,740
CSS in line, and there's nothing really wrong with that.

81
00:05:00,740 --> 00:05:04,550
But there's a better approach if you have a bunch of styles that you want to add.

82
00:05:04,580 --> 00:05:10,220
If I wanted to add like ten different styles to one of these elements or to a bunch of elements with

83
00:05:10,220 --> 00:05:13,970
this option using the style property, I have to do it one at a time.

84
00:05:14,000 --> 00:05:16,520
P styled up background color equals black.

85
00:05:16,520 --> 00:05:20,240
P style color equals white p style font size.

86
00:05:20,240 --> 00:05:26,540
You can do that one camel cased equals and how about 40 pixels?

87
00:05:26,960 --> 00:05:28,820
So that's three separate lines.

88
00:05:29,240 --> 00:05:34,130
And if this was something I was doing frequently for some reason, probably not the style specifically,

89
00:05:34,130 --> 00:05:39,890
but on a website we often have groups of styles that we want to apply to different elements and we keep

90
00:05:39,890 --> 00:05:41,120
sort of a similar theme.

91
00:05:41,120 --> 00:05:44,810
We would usually make a class, and that's what we'll get to in just a bit.

92
00:05:44,810 --> 00:05:47,030
There's another alternative for styling.

93
00:05:47,150 --> 00:05:49,340
So this is the style property.

94
00:05:49,340 --> 00:05:50,210
It's useful.

95
00:05:50,210 --> 00:05:53,060
It allows you to update styles one at a time.

96
00:05:53,060 --> 00:05:58,580
Everything's camel case if needed, but it is not a good way to figure out what the current styles are

97
00:05:58,580 --> 00:05:59,480
on an element.

98
00:05:59,480 --> 00:06:04,520
Unless you happen to write all of your styles in line, it's not going to have the values you expect.

99
00:06:04,520 --> 00:06:09,110
So there's another way we can get all of the actual styles, and that's what we'll see in the next video.

100
00:06:09,680 --> 00:06:14,960
What I'll end up with here is just showing how we can use a loop and manipulate styles instead of a

101
00:06:14,960 --> 00:06:15,740
loop as well.

102
00:06:15,740 --> 00:06:19,100
So let's change these styles of all the lies on the page.

103
00:06:19,310 --> 00:06:28,010
I'll come over to my file, my JavaScript file, select all the lies document, query, selector ally.

104
00:06:28,010 --> 00:06:29,840
Actually I want query selector all.

105
00:06:31,400 --> 00:06:39,650
We'll call this content all lies and then we can loop for let lie of all lies.

106
00:06:40,640 --> 00:06:45,800
Why don't we set like style dot color to be some color?

107
00:06:46,760 --> 00:06:49,250
Why don't we make a little array of colors actually?

108
00:06:49,490 --> 00:07:02,780
So we'll do const colors equals and then red, orange, yellow, green, blue and purple.

109
00:07:03,650 --> 00:07:05,210
How many allies do we actually have?

110
00:07:05,210 --> 00:07:06,320
One, two, three, four.

111
00:07:06,320 --> 00:07:07,250
We have six.

112
00:07:07,250 --> 00:07:07,610
All right.

113
00:07:07,610 --> 00:07:09,170
So we have seven colors here.

114
00:07:09,470 --> 00:07:11,360
Yeah, no, six.

115
00:07:11,360 --> 00:07:11,720
Okay.

116
00:07:11,720 --> 00:07:12,620
I'm a moron.

117
00:07:12,620 --> 00:07:16,220
We have six colors that works as long as we have six lives.

118
00:07:16,550 --> 00:07:23,360
So if I want to access one of these colors and use it to change the corresponding ly using a for loop,

119
00:07:23,360 --> 00:07:27,350
a four of loop is actually not going to help me much because I don't have the index.

120
00:07:27,350 --> 00:07:31,280
I want to take the first lie out of the six and set it to be red.

121
00:07:31,280 --> 00:07:33,020
The second lie set it to be orange.

122
00:07:33,020 --> 00:07:36,140
So I would probably use a regular for loop here.

123
00:07:36,440 --> 00:07:43,850
Or why don't we mix it up and use four each instead all at least for each, and then we'll write an

124
00:07:43,850 --> 00:07:44,840
arrow function.

125
00:07:44,930 --> 00:07:49,340
And remember in our arrow function we have two parameters that we can use.

126
00:07:49,340 --> 00:07:53,000
Four for each we have the element and the index.

127
00:07:54,500 --> 00:07:59,750
Why don't we just start by consult logging l and I see what we get.

128
00:08:00,570 --> 00:08:03,660
Okay, so we're getting the lie and then the index here.

129
00:08:03,720 --> 00:08:06,900
Now I can use that index to access the color.

130
00:08:06,900 --> 00:08:09,480
So const color, we'll just call it.

131
00:08:09,750 --> 00:08:13,470
Color equals colors of I.

132
00:08:14,220 --> 00:08:20,340
And that should now give me a color based off of the index of the lie that we're working with.

133
00:08:20,340 --> 00:08:22,890
So we get red, orange, yellow, green, blue and purple.

134
00:08:23,340 --> 00:08:25,440
So I'm using a for reach just to mix it up.

135
00:08:25,440 --> 00:08:29,910
And then in here we'll access the element which I think I'll rename to lie.

136
00:08:29,940 --> 00:08:35,669
It's a better name for that parameter like style color equals this color.

137
00:08:36,870 --> 00:08:38,039
Let's try running it.

138
00:08:38,370 --> 00:08:39,240
There we go.

139
00:08:39,450 --> 00:08:42,570
Red, orange, yellow, green, blue and purple.

140
00:08:43,110 --> 00:08:45,750
So why did those styles win out?

141
00:08:45,750 --> 00:08:47,550
Where if I refresh the page?

142
00:08:47,550 --> 00:08:54,030
Well, I have to comment out this code before they already had a color, some of them based off of a

143
00:08:54,030 --> 00:08:54,810
class.

144
00:08:54,810 --> 00:08:57,540
And a class is relatively specific.

145
00:08:57,540 --> 00:08:57,840
Right.

146
00:08:57,840 --> 00:08:59,310
Why did these styles win out?

147
00:08:59,310 --> 00:09:01,590
When I change the color, there was a conflict.

148
00:09:01,590 --> 00:09:03,450
This is teal and I made it red.

149
00:09:03,450 --> 00:09:04,880
Why did red win?

150
00:09:04,890 --> 00:09:11,490
Remember, this is all inline styles and any time you do inline styles, it is extremely specific.

151
00:09:11,490 --> 00:09:18,210
It's actually added to the element itself as we've seen like we have here, and that is going to win

152
00:09:18,210 --> 00:09:18,510
out.

153
00:09:18,510 --> 00:09:22,230
It's going to beat any class declaration you have for any class styles.

154
00:09:22,530 --> 00:09:25,110
So that's why those styles end up applying.

155
00:09:25,110 --> 00:09:25,500
All right.

156
00:09:25,500 --> 00:09:27,030
So that's the style property.

157
00:09:27,180 --> 00:09:34,260
Every element that we select, we can read existing inline styles, only using the style property,

158
00:09:34,260 --> 00:09:39,330
but we can set any properties or any styles that we want as long as we use the correct camel case when

159
00:09:39,330 --> 00:09:42,870
applicable, and it will actually add an inline style.

160
00:09:42,870 --> 00:09:45,030
So it's not changing our stylesheet in any way.

161
00:09:45,030 --> 00:09:49,410
It's just inserting an inline style declaration into the individual element.

162
00:09:49,780 --> 00:09:50,520
All righty.

