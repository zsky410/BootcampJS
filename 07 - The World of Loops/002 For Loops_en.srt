1
00:00:00,090 --> 00:00:00,390
All right.

2
00:00:00,390 --> 00:00:03,440
So let's talk about our first loop, the for loop.

3
00:00:03,450 --> 00:00:06,270
If you've never seen four loops before, buckle up.

4
00:00:06,300 --> 00:00:12,090
The syntax is a little bit odd the first time you see it, but you'll use it so often that eventually

5
00:00:12,090 --> 00:00:13,020
it just makes sense.

6
00:00:13,260 --> 00:00:16,830
So this is a representation of the syntax, sort of the pattern.

7
00:00:16,830 --> 00:00:17,970
I know it looks like a lot.

8
00:00:17,970 --> 00:00:20,820
It looks very confusing, but let's take it step by step.

9
00:00:21,240 --> 00:00:27,750
So a four loop is very similar to a conditional not in the way that it works, but in the syntax.

10
00:00:27,750 --> 00:00:29,430
We have a conditional statement here.

11
00:00:29,430 --> 00:00:36,060
We have if and then something in parentheses, and then a block of code enclosed by curly braces.

12
00:00:36,060 --> 00:00:42,630
And whatever code I put in here will only run if this condition is true, this code is associated with

13
00:00:42,630 --> 00:00:42,840
that.

14
00:00:42,840 --> 00:00:48,500
If when we write a for loop, it's the same pattern we have for which is the keyword.

15
00:00:48,630 --> 00:00:56,310
It has to be for not uppercase for not fo u r it needs to be f0r and then we have perrins and we'll

16
00:00:56,310 --> 00:00:58,200
talk about what goes in there in just a moment.

17
00:00:58,200 --> 00:01:04,140
And then we have curly braces, a code block, and whatever content is in here, we'll run every time

18
00:01:04,140 --> 00:01:05,459
this loop repeats.

19
00:01:05,459 --> 00:01:10,650
So if I loop ten times, this code is going to run ten times.

20
00:01:11,280 --> 00:01:12,750
I'm not sure if that's how you pronounce that.

21
00:01:12,750 --> 00:01:14,070
So what is the syntax?

22
00:01:14,070 --> 00:01:15,270
What goes in here?

23
00:01:15,720 --> 00:01:18,090
It's it's a little tricky to explain.

24
00:01:18,090 --> 00:01:20,040
There are three separate pieces.

25
00:01:20,700 --> 00:01:25,590
A lot of times people come to JavaScript or students who come from other languages ask, is there an

26
00:01:25,590 --> 00:01:29,280
easy way to just run something ten times no matter what?

27
00:01:29,580 --> 00:01:33,960
Some languages do have a really easy way to say, make this happen ten times.

28
00:01:33,960 --> 00:01:35,880
Let's say I have console.log.

29
00:01:35,880 --> 00:01:37,740
I want to console.log.

30
00:01:37,770 --> 00:01:38,520
Hello?

31
00:01:38,700 --> 00:01:40,710
Ten times without a loop.

32
00:01:40,740 --> 00:01:43,830
The obvious way is to do this and that sucks.

33
00:01:43,830 --> 00:01:45,930
And I think I'm only at nine times.

34
00:01:45,930 --> 00:01:46,800
But there we go.

35
00:01:46,800 --> 00:01:47,640
Ten times.

36
00:01:47,760 --> 00:01:52,560
But this is obviously horrendous and this is only ten times we're running something.

37
00:01:52,560 --> 00:01:58,770
But there are many situations if we have an array of 10,000 items or even 1000 items, each one is different.

38
00:01:58,770 --> 00:02:03,570
If we had to write it by hand to print out each item in the array, that would be a nightmare.

39
00:02:03,570 --> 00:02:10,949
We would do something like console.log array of zero and then manually array of one and array of two.

40
00:02:10,949 --> 00:02:15,540
If we have even just 100, my fingers are going to fall off by the time I finished typing that out.

41
00:02:15,630 --> 00:02:21,780
So we use loops, but a for loop is not as easy as saying make this happen ten times or 20 times.

42
00:02:21,780 --> 00:02:23,670
There are three separate pieces.

43
00:02:23,670 --> 00:02:30,570
The main idea behind a for loop is that we define a variable and this variable is like a counter.

44
00:02:30,570 --> 00:02:34,650
It's a counter for that loop and we started at some value.

45
00:02:35,040 --> 00:02:39,150
If I want to run something ten times, I'll just do ten total times.

46
00:02:39,150 --> 00:02:44,250
I could start a variable at zero at one, I could start it at 50.

47
00:02:44,640 --> 00:02:47,580
It doesn't really matter where it starts, at least in this case.

48
00:02:48,030 --> 00:02:50,100
And then I define a stopping point.

49
00:02:50,100 --> 00:02:53,550
So if I went from 50, I'm going to go upwards.

50
00:02:53,550 --> 00:02:57,480
I'll say we'll stop when we hit 60, that would give me ten iterations.

51
00:02:57,480 --> 00:03:02,640
And then the third step is what happens to this variable each time through.

52
00:03:02,970 --> 00:03:09,090
So if we're trying to run ten times, I would say add one to the variable ten different times.

53
00:03:09,270 --> 00:03:18,060
So there are three pieces the initial value when to run the loop and then how to change value each time.

54
00:03:19,140 --> 00:03:21,330
This kind of looks like gibberish here.

55
00:03:21,660 --> 00:03:23,400
So let's revisit our slide.

56
00:03:23,400 --> 00:03:27,270
We have four and then in parens we will define a variable.

57
00:03:27,630 --> 00:03:31,350
Let's say it starts at zero, then we'll say a condition.

58
00:03:31,350 --> 00:03:38,730
And this condition is something like while that variable is less than ten, run this loop and then we

59
00:03:38,730 --> 00:03:43,160
increment that variable by one or by two or by negative five.

60
00:03:43,170 --> 00:03:44,430
It's up to us.

61
00:03:44,430 --> 00:03:46,170
So here's a simple example.

62
00:03:47,010 --> 00:03:49,320
We're going to define a variable in this loop.

63
00:03:49,320 --> 00:03:50,640
That's the first piece.

64
00:03:50,640 --> 00:03:52,530
The initial value for a variable.

65
00:03:52,980 --> 00:03:59,940
Usually people will use the variable name I because it's short and it doesn't have to mean very much.

66
00:03:59,940 --> 00:04:03,690
I think originally maybe it stood for index or integer.

67
00:04:03,810 --> 00:04:06,900
It doesn't matter, but you'll see people use IJC.

68
00:04:06,930 --> 00:04:08,580
You can name this whatever you want.

69
00:04:08,580 --> 00:04:10,500
It's just a variable you're making.

70
00:04:11,010 --> 00:04:12,210
Let's have it start.

71
00:04:12,210 --> 00:04:13,260
Let's go with one.

72
00:04:13,260 --> 00:04:16,110
We'll have it start at one and then we need a semicolon.

73
00:04:16,890 --> 00:04:22,200
Then we have a second piece which tells JavaScript when this loop should continue running.

74
00:04:22,200 --> 00:04:28,050
Four So we're going to run as long as AI is less than or equal to ten.

75
00:04:29,130 --> 00:04:35,640
As soon as we're past ten, it should stop and then we tell it how to update I each time through the

76
00:04:35,640 --> 00:04:36,150
loop.

77
00:04:36,660 --> 00:04:42,420
It's pretty standard to do plus plus because a lot of the time you want to loop one number at a time,

78
00:04:42,420 --> 00:04:45,000
one and then two and then three and then four.

79
00:04:45,000 --> 00:04:47,220
But you could also do plus equals three.

80
00:04:47,220 --> 00:04:48,720
This would loop by threes.

81
00:04:48,720 --> 00:04:52,530
So we would start with one and then we add three.

82
00:04:52,530 --> 00:04:58,140
So we get four and then we add three and we'd have seven, then we add three and we hit ten.

83
00:04:58,320 --> 00:04:59,940
And then if you did it again.

84
00:05:00,070 --> 00:05:04,810
We would get 13, at which point we're past this so it no longer runs.

85
00:05:05,410 --> 00:05:08,770
But let's just add one each time using that nice shortcut.

86
00:05:08,770 --> 00:05:09,730
Plus plus.

87
00:05:10,210 --> 00:05:12,790
And we could start by simply console logging.

88
00:05:12,790 --> 00:05:13,150
Hello.

89
00:05:13,150 --> 00:05:14,080
Ten times.

90
00:05:14,740 --> 00:05:17,050
I'm going to refresh my code over here.

91
00:05:17,410 --> 00:05:20,110
Oh, so annoying that the chrome console does this.

92
00:05:20,110 --> 00:05:26,920
It collects all those ten identical contact logs and displays them as one with the number ten next to

93
00:05:26,920 --> 00:05:27,250
it.

94
00:05:27,670 --> 00:05:29,230
So it did print out ten times.

95
00:05:29,230 --> 00:05:30,580
It's just hard to see.

96
00:05:30,910 --> 00:05:33,190
So why don't we also print out I?

97
00:05:33,220 --> 00:05:40,810
So I'll just do a hello colon and then the variable I which is our loop variable, I'll refresh the

98
00:05:40,810 --> 00:05:42,820
page and there we go.

99
00:05:44,020 --> 00:05:46,120
So to step through this one more time, so make a variable.

100
00:05:46,120 --> 00:05:53,650
I started at one, keep looping if I is less than or equal to ten and then add one to I each time through.

101
00:05:54,250 --> 00:05:57,130
So I started at one that's less than ten.

102
00:05:57,130 --> 00:06:05,500
So we're going to console.log I Which gives us hello one which is what we see here and then is incremented.

103
00:06:05,800 --> 00:06:10,810
So I becomes two because we did plus plus is I still less than or equal to ten.

104
00:06:10,810 --> 00:06:11,590
Yes, it is.

105
00:06:11,590 --> 00:06:13,360
So we cancelled that log two.

106
00:06:13,510 --> 00:06:14,650
So that's printed out.

107
00:06:14,650 --> 00:06:19,180
Now I is going to be added one or have one added to it again till we get three.

108
00:06:19,180 --> 00:06:24,070
This keeps going until I is nine, at which case we're still in the clear.

109
00:06:24,070 --> 00:06:26,620
We add one, I becomes ten.

110
00:06:27,130 --> 00:06:30,760
This is still true because we have less than or equal to ten.

111
00:06:30,760 --> 00:06:31,870
So that's fine.

112
00:06:31,870 --> 00:06:34,000
But then we print out hello ten.

113
00:06:34,000 --> 00:06:39,280
After which I is incremented to 11 and then this is no longer true.

114
00:06:39,550 --> 00:06:41,950
I is not less than or equal to ten.

115
00:06:41,980 --> 00:06:43,570
11 is greater than ten.

116
00:06:43,570 --> 00:06:45,460
So we are done with the loop.

117
00:06:46,120 --> 00:06:50,320
So this loop is going to run ten times because of the way I set it up.

118
00:06:50,470 --> 00:06:56,890
But if I instead said I starts at five, it only runs five times or six.

119
00:06:56,890 --> 00:06:59,200
I can't do math because we're including ten.

120
00:06:59,260 --> 00:07:01,570
One, two, three, four, five, six.

121
00:07:02,200 --> 00:07:05,680
If I instead did I equals one.

122
00:07:05,860 --> 00:07:09,670
But instead of I plus plus I did plus equals three.

123
00:07:09,700 --> 00:07:10,660
I'll duplicate this.

124
00:07:10,660 --> 00:07:12,280
So we have a record of the original.

125
00:07:13,690 --> 00:07:16,240
I'm now going to increment by three.

126
00:07:17,140 --> 00:07:25,000
Refresh the page and this is what we get four total times that it ran and the value of I was one for

127
00:07:25,000 --> 00:07:26,620
seven and then ten.

128
00:07:26,890 --> 00:07:29,920
Afterwards it became 13 and the loop stopped.

129
00:07:29,920 --> 00:07:33,880
So if you feel comfortable with the syntax at this point, go ahead and move on.

130
00:07:33,880 --> 00:07:37,390
We have more to talk about with four loops in the next couple of videos, but if you want some more

131
00:07:37,390 --> 00:07:39,400
practice, I'll do a few more examples.

132
00:07:39,400 --> 00:07:42,460
Let's generate the first 20 perfect squares.

133
00:07:42,460 --> 00:07:47,110
Now a perfect square is just a number of times itself, so the first one is one times one.

134
00:07:47,110 --> 00:07:48,700
Then we have two times two.

135
00:07:48,730 --> 00:07:54,610
We have three times three, which is nine, four times 416 all the way up until 20 times 20.

136
00:07:54,820 --> 00:08:00,580
So to print those out, I would need to loop from 1 to 20 and then console.log each number of times

137
00:08:00,580 --> 00:08:01,270
itself.

138
00:08:01,360 --> 00:08:06,370
So to loop from 1 to 20, we need to initialize a variable at one and we can name it.

139
00:08:06,370 --> 00:08:09,400
Anything like I said, is very, very standard.

140
00:08:09,400 --> 00:08:11,230
But just to prove it that it doesn't matter.

141
00:08:11,230 --> 00:08:12,280
Let's go with NUM.

142
00:08:12,460 --> 00:08:13,570
So we'll start at one.

143
00:08:13,570 --> 00:08:14,500
NUM is one.

144
00:08:14,860 --> 00:08:22,090
We'll continue while NUM is less than or equal to 20 or alternatively less than 21.

145
00:08:22,570 --> 00:08:24,010
I like to do it this way.

146
00:08:24,010 --> 00:08:29,650
If I know I want to include 20, I like to put less than or equals instead of this.

147
00:08:29,650 --> 00:08:31,810
I don't know why it's an extra character.

148
00:08:31,840 --> 00:08:37,659
Other people prefer it the other way around, but I'll do it this way, and each time through we will

149
00:08:37,659 --> 00:08:39,100
add one to NUM.

150
00:08:40,030 --> 00:08:46,780
So let's make sure we're generating the correct numbers by just constant logging each num 1 to 20.

151
00:08:46,810 --> 00:08:51,040
Now we want to print the perfect square instead, which is num times num.

152
00:08:51,040 --> 00:08:56,110
And I think I'm actually going to do a little string template literal so that I print something out

153
00:08:56,110 --> 00:08:59,260
like four times four equals 16.

154
00:09:00,460 --> 00:09:08,620
So I will interpolate here and display num and then x for multiplication and then interpolate again

155
00:09:08,620 --> 00:09:11,380
with the dollar sign display num again.

156
00:09:11,680 --> 00:09:13,120
Let's just see what we get now.

157
00:09:13,120 --> 00:09:18,880
One times one, 20 times 20, and then I'm going to add my equal sign and then interpolate one more

158
00:09:18,880 --> 00:09:22,060
time with the dollar sign and do my actual math.

159
00:09:22,060 --> 00:09:25,630
Num num times num refresh the page.

160
00:09:26,110 --> 00:09:26,800
Awesome.

161
00:09:27,010 --> 00:09:31,750
One times one is 149 1625 all the way up to 400.

162
00:09:32,500 --> 00:09:34,600
So this is looping in one direction.

163
00:09:34,600 --> 00:09:37,930
We're going from a low number up to a higher number.

164
00:09:38,290 --> 00:09:41,080
I'll also show that we can go the opposite direction.

165
00:09:41,080 --> 00:09:48,970
So here's a loop where I starts at 50 and we subtract ten each time and we continue looping as long

166
00:09:48,970 --> 00:09:51,310
as I is greater than or equal to zero.

167
00:09:51,310 --> 00:09:53,740
So as long as it's positive or zero.

168
00:09:54,310 --> 00:09:58,360
So 50 we subtract ten next time is 40 then 30 then 20 then.

169
00:09:58,360 --> 00:09:59,650
Ten then zero then.

170
00:09:59,760 --> 00:10:00,450
We're done.

171
00:10:00,930 --> 00:10:04,470
So this is counting backwards and you can definitely do that.

172
00:10:04,590 --> 00:10:06,160
We'll do one more example of that.

173
00:10:06,180 --> 00:10:07,470
Let's comment this one out.

174
00:10:07,830 --> 00:10:12,990
Let's count down from 200 and count down in intervals of 25.

175
00:10:13,080 --> 00:10:17,220
So 201, 75, one, 51, 25, 100.

176
00:10:17,580 --> 00:10:22,950
So we'll go back to using AI because that is the standard term, unless we have nested loops, in which

177
00:10:22,950 --> 00:10:25,860
case you'll see we use other letters like J and K.

178
00:10:26,940 --> 00:10:28,090
We're not going to start at zero.

179
00:10:28,110 --> 00:10:30,750
We'll start at 200 if that's what we're going to do.

180
00:10:30,780 --> 00:10:35,040
We'll loop while AI is greater than or equal to zero.

181
00:10:35,040 --> 00:10:38,130
So not less than we definitely want.

182
00:10:38,160 --> 00:10:44,550
Greater than if we have AI starting at 200 and we're saying run this loop while AI is less than zero.

183
00:10:44,640 --> 00:10:49,340
It's never going to run because 200 is already greater than zero.

184
00:10:49,350 --> 00:10:54,270
So if I tried that each time through, we will subtract 25.

185
00:10:55,200 --> 00:10:56,130
Let's see what we get.

186
00:10:56,160 --> 00:10:57,420
Console.log.

187
00:10:58,020 --> 00:10:59,100
Does it work?

188
00:11:00,240 --> 00:11:01,410
Refresh the page.

189
00:11:01,530 --> 00:11:06,690
We don't get anything and that's because we wrote our loop in such a way that it's never true.

190
00:11:06,720 --> 00:11:09,270
AI begins at 200 and this is checked.

191
00:11:09,300 --> 00:11:11,430
Is 200 less than or equal to zero?

192
00:11:11,430 --> 00:11:12,060
Nope.

193
00:11:12,150 --> 00:11:13,620
So nothing happens.

194
00:11:13,620 --> 00:11:14,970
We just move on to the next line.

195
00:11:14,970 --> 00:11:22,170
So if I put this line down here after the loop, we would see that it is the only thing to run or the

196
00:11:22,170 --> 00:11:23,310
only thing to print out.

197
00:11:23,820 --> 00:11:26,970
So what I wanted to do was go from 200 down to zero.

198
00:11:27,210 --> 00:11:31,650
So I want to go while AI is greater than or equal to zero.

199
00:11:31,890 --> 00:11:37,750
I want to stop when I becomes negative and we'll subtract 25 each time.

200
00:11:37,770 --> 00:11:42,930
Remember, this is a shorthand way of saying I equals I -25.

201
00:11:43,320 --> 00:11:46,230
It's easier just to do minus equals 25.

202
00:11:46,950 --> 00:11:48,300
Let's try it.

203
00:11:48,300 --> 00:11:51,990
And instead of saying, does it work, let's just print out I.

204
00:11:53,340 --> 00:11:54,330
And there we go.

205
00:11:54,360 --> 00:12:00,750
201 75 150 all the way down until we hit zero, which is the last thing we print out the last AI, at

206
00:12:00,750 --> 00:12:01,920
which point AI is zero.

207
00:12:01,950 --> 00:12:05,210
We subtract 25, which gives us -25.

208
00:12:05,220 --> 00:12:11,340
This is now false and we no longer print anything out and the code moves on and this runs instead.

209
00:12:11,340 --> 00:12:16,080
So when we do have a loop like we have here, this code is going to keep running over and over and over

210
00:12:16,080 --> 00:12:17,970
until the loop is false.

211
00:12:17,970 --> 00:12:22,290
This condition is false and then whatever happens afterwards will run.

212
00:12:22,290 --> 00:12:24,410
Okay, so for loops are a lot.

213
00:12:24,420 --> 00:12:29,410
I know they're always a little tricky to teach to people who have never coded before.

214
00:12:29,430 --> 00:12:35,070
Unfortunately, there's just a lot of there's not many moving pieces, but the syntax is kind of ugly.

215
00:12:35,160 --> 00:12:41,130
Just remember the three pieces you're variable that you're using for the loop, usually called AI.

216
00:12:41,160 --> 00:12:42,660
You give it some initial value.

217
00:12:42,900 --> 00:12:49,050
Then the next part after semicolon is the condition that checks if the loop should continue running.

218
00:12:49,050 --> 00:12:51,810
So the loop will run as long as this is true.

219
00:12:51,930 --> 00:12:59,160
And then another semicolon and then whatever operation you're performing on, I usually adding or subtracting,

220
00:12:59,160 --> 00:13:02,940
but you could also multiply, you could divide, you can do anything there.

221
00:13:02,940 --> 00:13:08,880
But most of the time we're doing simple math and 99% of the stuff I do at least is adding one.

222
00:13:09,480 --> 00:13:14,130
It's really, really common that you just want to add one to something, as we'll see when we work with

223
00:13:14,130 --> 00:13:16,260
arrays and strings in just a video or two.

224
00:13:17,700 --> 00:13:18,230
That's a lot.

225
00:13:18,240 --> 00:13:18,810
I know.

226
00:13:18,810 --> 00:13:19,960
Hopefully you're still there.

227
00:13:19,980 --> 00:13:20,430
Good job.

