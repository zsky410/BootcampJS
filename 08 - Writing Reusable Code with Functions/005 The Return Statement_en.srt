1
00:00:00,120 --> 00:00:05,670
There's one more key function concept we have yet to discuss, which is the return statement returning

2
00:00:05,670 --> 00:00:07,300
values from a function.

3
00:00:07,320 --> 00:00:10,110
We talked about functions that take inputs.

4
00:00:10,110 --> 00:00:16,440
And then on the diagram I had, if we go back a couple of slides, I have this arrow indicating output.

5
00:00:16,440 --> 00:00:21,300
But right now our functions aren't returning a value, they are printing a value out.

6
00:00:21,300 --> 00:00:23,490
And there's a big difference between the two.

7
00:00:24,270 --> 00:00:30,240
If we take a look at one of the built in methods, any of them, how about hello to uppercase?

8
00:00:30,240 --> 00:00:36,090
So the two uppercase method when I run that the console prints out hello.

9
00:00:36,090 --> 00:00:37,500
And we see the text.

10
00:00:37,500 --> 00:00:38,040
Hello.

11
00:00:38,040 --> 00:00:40,110
But that's only in the console.

12
00:00:40,260 --> 00:00:44,610
It's just being helpful for us to immediately see the return value.

13
00:00:45,000 --> 00:00:50,520
If I paste that in to a file and I run this code, refresh the page.

14
00:00:50,520 --> 00:00:51,720
We see nothing.

15
00:00:52,020 --> 00:00:57,720
This code is run and to uppercase does return a value, but it's lost forever.

16
00:00:57,720 --> 00:01:00,150
We're not printing it, we're not capturing it.

17
00:01:00,150 --> 00:01:03,570
What we would normally do is one of those either print it out.

18
00:01:03,570 --> 00:01:11,340
Most likely though, we just put it in a variable const scream equals hello to uppercase we refresh

19
00:01:11,370 --> 00:01:19,680
now scream has a value stored in it, so this returned an output to uppercase return to value.

20
00:01:19,710 --> 00:01:21,750
We captured it in screen.

21
00:01:21,930 --> 00:01:27,330
So printing something to the console is entirely different than returning a value.

22
00:01:27,330 --> 00:01:33,120
When we're working in the console they might seem similar, but there are still is a significant difference

23
00:01:33,120 --> 00:01:35,490
if I run that code again.

24
00:01:35,490 --> 00:01:39,690
Hello to uppercase notice this little arrow I get here.

25
00:01:39,690 --> 00:01:41,520
It's pointing the other direction.

26
00:01:41,520 --> 00:01:51,360
This signifies I'm looking at a return value now if I console.log the same thing Hello to uppercase

27
00:01:52,530 --> 00:02:00,000
it's printed out differently This is an actual console.log I don't have the arrow This is a return value

28
00:02:00,360 --> 00:02:05,430
So return values are extremely useful because we can capture them in a variable.

29
00:02:05,430 --> 00:02:08,070
We could pass them to another function.

30
00:02:08,520 --> 00:02:13,560
Remember that most of the time in applications that we create later on in this course and in the real

31
00:02:13,560 --> 00:02:17,700
world, we don't print much to the console any given website.

32
00:02:17,850 --> 00:02:22,470
If you open the console, maybe there's a line or two that a developer left in there.

33
00:02:22,470 --> 00:02:27,900
Or sometimes if you go to a website like Facebook and we open the console, we have a message here.

34
00:02:27,900 --> 00:02:34,590
In this case, it's to prevent people from running code or something that is fraudulent or scammy or

35
00:02:34,590 --> 00:02:35,340
sketchy.

36
00:02:35,670 --> 00:02:40,350
If someone told you to copy and paste something here to enable a Facebook feature, it's a scam, blah

37
00:02:40,350 --> 00:02:40,920
blah blah.

38
00:02:41,220 --> 00:02:46,920
But other than that, we're not usually contact logging things unless we're debugging or trying to test

39
00:02:46,920 --> 00:02:47,640
something out.

40
00:02:48,000 --> 00:02:53,700
Most of what we do when we write functions is we return a value and we use that value somehow.

41
00:02:53,700 --> 00:02:56,400
Console.log is just useful when we're starting out.

42
00:02:56,400 --> 00:03:01,950
We haven't talked about how we manipulate a web page, how we change HTML, how we display content.

43
00:03:01,950 --> 00:03:04,020
So for now we just show it in the console.

44
00:03:04,020 --> 00:03:10,110
But when we have a function console, logging something instead of returning is not a substitute.

45
00:03:10,470 --> 00:03:17,370
If we take a look at this add function, add x and y, it console logs x plus y when I call it.

46
00:03:17,640 --> 00:03:22,680
If I refresh my page here, add one and two, it prints out the value three.

47
00:03:22,680 --> 00:03:30,930
But if I try and store that in a variable like const sum equals, if we look at some it's undefined.

48
00:03:30,960 --> 00:03:33,780
There is no value returned from this function.

49
00:03:33,780 --> 00:03:38,130
It prints something which is better than nothing, but it doesn't actually return a value.

50
00:03:38,130 --> 00:03:39,270
There's no output.

51
00:03:39,270 --> 00:03:40,500
So let's change that.

52
00:03:40,530 --> 00:03:43,290
Let's add in returns to our functions.

53
00:03:43,320 --> 00:03:46,470
All we have to do is use the return keyword.

54
00:03:46,770 --> 00:03:49,380
So return and then some value.

55
00:03:49,800 --> 00:03:51,000
We can have an expression.

56
00:03:51,000 --> 00:03:53,670
This will evaluate first and then be returned.

57
00:03:53,940 --> 00:04:06,420
So if we do that, add x and y, return x plus y, run my code again, add four comma five in the console

58
00:04:06,420 --> 00:04:07,050
we see nine.

59
00:04:07,050 --> 00:04:09,120
But that's not actually being printed out.

60
00:04:09,120 --> 00:04:11,880
It's just the chrome console showing us a return value.

61
00:04:11,940 --> 00:04:19,589
And if I save that to a variable cost total equals add for comma five, we look at total.

62
00:04:19,589 --> 00:04:21,990
It now stores the value nine.

63
00:04:21,990 --> 00:04:28,020
So we return something from the function which we can capture later, which is what I did here.

64
00:04:28,620 --> 00:04:30,660
There are some rules to know about returning.

65
00:04:30,660 --> 00:04:33,510
First of all, you can only return one thing from a function.

66
00:04:33,630 --> 00:04:39,480
That doesn't mean you can't have multiple return statements, but when you actually return something,

67
00:04:39,480 --> 00:04:41,160
there needs to be one value.

68
00:04:41,190 --> 00:04:48,690
So if I wanted to return X and Y for some reason instead of the total, I could use an array and do

69
00:04:48,690 --> 00:04:55,830
x, y, or I could do a string where I add x inside and y inside.

70
00:04:55,830 --> 00:04:59,880
But I can't return two separate values so I can collect them in some.

71
00:05:00,110 --> 00:05:01,010
In return that.

72
00:05:01,970 --> 00:05:03,530
But I need to return one thing.

73
00:05:03,530 --> 00:05:07,130
So I said we could have multiple return statements in a single function.

74
00:05:07,160 --> 00:05:08,960
I'll show you an example of that now.

