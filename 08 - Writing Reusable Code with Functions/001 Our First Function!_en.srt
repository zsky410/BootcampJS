1
00:00:00,270 --> 00:00:00,480
Hey.

2
00:00:00,480 --> 00:00:01,500
Welcome back, everyone.

3
00:00:01,500 --> 00:00:03,510
We've got a very big topic here.

4
00:00:03,750 --> 00:00:10,800
By big, I don't mean long, difficult, challenging, but more so central, hugely important, crucial

5
00:00:10,800 --> 00:00:12,170
to all of JavaScript.

6
00:00:12,180 --> 00:00:13,980
That topic is functions.

7
00:00:13,980 --> 00:00:20,490
Functions in some people's minds at least are the one topic that you must understand to be a good JavaScript

8
00:00:20,490 --> 00:00:21,150
developer.

9
00:00:21,180 --> 00:00:23,040
They are central to the language.

10
00:00:23,040 --> 00:00:28,830
I know I've really overused that phrase in this course because all the things we've covered so far are

11
00:00:28,830 --> 00:00:29,700
important.

12
00:00:29,700 --> 00:00:33,720
We use them in pretty much every application or script we ever write.

13
00:00:33,750 --> 00:00:37,290
We're definitely going to use variables and data structures, arrays and objects.

14
00:00:37,290 --> 00:00:41,100
We'll have logic with conditionals, we'll use loops, we'll use functions.

15
00:00:41,100 --> 00:00:46,260
But more than that, functions are very important to the way JavaScript is structured.

16
00:00:46,260 --> 00:00:49,650
They're crucial to JavaScript identity as a language.

17
00:00:49,650 --> 00:00:53,130
And you'll see what I mean as we progress through the rest of the course.

18
00:00:53,400 --> 00:00:58,950
It's not only about defining our own functions and learning the syntax, but also there are a lot of

19
00:00:58,950 --> 00:01:04,019
quirks with functions, a lot of things we can do that are cool with functions that just take some time

20
00:01:04,019 --> 00:01:04,709
to understand.

21
00:01:04,709 --> 00:01:10,620
So it's a big topic because it's important, because it's something we use every single time we write

22
00:01:10,620 --> 00:01:12,720
code basically from here on out.

23
00:01:13,020 --> 00:01:17,940
So we're not going to understand and cover every single topic around functions in this one section.

24
00:01:17,940 --> 00:01:20,280
We have a couple of main goals for this section.

25
00:01:20,280 --> 00:01:21,690
We want to understand the basics.

26
00:01:21,690 --> 00:01:22,650
What is a function?

27
00:01:22,650 --> 00:01:23,850
Why do you use them?

28
00:01:23,850 --> 00:01:26,010
And then mostly how do we define them?

29
00:01:26,010 --> 00:01:26,940
What's the syntax?

30
00:01:26,940 --> 00:01:31,680
And then we'll write a ton of example functions, we'll have some exercises, some code alongs.

31
00:01:31,680 --> 00:01:33,270
We just need to get practice.

32
00:01:33,270 --> 00:01:36,690
So functions are not difficult, at least writing your own functions.

33
00:01:36,690 --> 00:01:41,460
It's pretty straightforward, but there are a lot of things to understand about functions different

34
00:01:41,460 --> 00:01:47,310
variations, different capabilities or features, and that will all unfold across a couple of sections.

35
00:01:47,310 --> 00:01:49,320
So it's not all concentrated right here.

36
00:01:49,740 --> 00:01:51,510
Okay, so let's begin.

37
00:01:51,510 --> 00:01:53,040
What the heck is a function?

38
00:01:53,070 --> 00:01:55,950
A function is simply a reusable procedure.

39
00:01:55,950 --> 00:01:59,490
It's a chunk of code that we've wrapped up in a function.

40
00:01:59,490 --> 00:02:04,380
So it's a bunch of lines of code that we can call again at any point we can refer back to it.

41
00:02:04,530 --> 00:02:11,550
So we can have a function called get latest Reddit posts and any time we called it, it would have code

42
00:02:11,550 --> 00:02:16,590
inside of it that would presumably request new Reddit posts and send them back to us.

43
00:02:16,620 --> 00:02:18,120
Or we could have a simpler one.

44
00:02:18,120 --> 00:02:24,780
Find average in array or just find average, or we could have a function called square and it simply

45
00:02:24,780 --> 00:02:31,530
squares a value every time we pass in a number like ten it should return the square 100.

46
00:02:31,530 --> 00:02:33,150
So we make these chunks of code.

47
00:02:33,150 --> 00:02:38,220
They're little machines, which is why I'm using this sort of imagery here, mechanical stuff.

48
00:02:38,220 --> 00:02:42,030
It's a bunch of code that we put together and we wrap it up into a package.

49
00:02:42,030 --> 00:02:46,500
And the advantage of doing this is that we can then call that chunk of code, we can call that function

50
00:02:46,500 --> 00:02:50,460
later on, which is kind of what this visual is supposed to represent.

51
00:02:50,490 --> 00:02:53,970
I had a really hard time coming up with a graphic for functions.

52
00:02:53,970 --> 00:03:00,240
This represents the function, the machinery, and then this button right here is calling that function.

53
00:03:00,240 --> 00:03:04,200
Every time we press it, the function does its thing, it does its action.

54
00:03:04,200 --> 00:03:08,700
So there's a two step process for every function that we ever used that we write.

55
00:03:08,700 --> 00:03:14,100
First, we define the function, we lay it out, we tell JavaScript, Here is how this thing should

56
00:03:14,100 --> 00:03:14,610
work.

57
00:03:14,790 --> 00:03:19,860
It's kind of like registering it or going to the, I don't know, the DMV filling out forms, saying,

58
00:03:19,860 --> 00:03:24,630
here's this new function, but that doesn't do anything as far as running the code.

59
00:03:24,810 --> 00:03:28,470
It's just defining it, telling JavaScript about the function.

60
00:03:28,470 --> 00:03:33,210
Then the second step is to execute the function, to run it, and we can run it once.

61
00:03:33,210 --> 00:03:34,710
We could run it 100 times.

62
00:03:34,710 --> 00:03:37,170
It's totally up to you and when you need to use it.

63
00:03:37,170 --> 00:03:40,020
But the point here is that it's a two step process.

64
00:03:40,020 --> 00:03:41,640
You write it and then you run it.

65
00:03:41,640 --> 00:03:44,100
We've been working with quite a few functions so far.

66
00:03:44,310 --> 00:03:47,340
We've been calling the method, which is important.

67
00:03:47,340 --> 00:03:49,200
It is a distinction in terminology.

68
00:03:49,200 --> 00:03:52,710
It's one we will address later once we learn how to write our own methods.

69
00:03:52,710 --> 00:03:54,900
But methods are functions.

70
00:03:54,900 --> 00:03:55,920
They are actions.

71
00:03:55,920 --> 00:04:01,500
They're chunks of code that have been wrapped up, given a name and made into a repeatable function.

72
00:04:01,680 --> 00:04:10,710
So things like Hello Dot to Uppercase to Uppercase is a built in method, which again we'll just call

73
00:04:10,710 --> 00:04:11,160
a function.

74
00:04:11,160 --> 00:04:12,780
For now it's a built in function.

75
00:04:12,990 --> 00:04:16,350
Every time I call it, I need to use parentheses.

76
00:04:16,890 --> 00:04:22,380
It's referring back to the same definition, the same built in set of instructions that says Here is

77
00:04:22,380 --> 00:04:24,000
how to uppercase works.

78
00:04:24,150 --> 00:04:29,010
So we're skipping the first step because it's a built in function or method.

79
00:04:29,010 --> 00:04:30,810
We're simply running that code.

80
00:04:31,740 --> 00:04:34,230
It's already been defined or written for us.

81
00:04:34,380 --> 00:04:35,970
But notice we use parentheses.

82
00:04:35,970 --> 00:04:37,170
We've seen that before.

83
00:04:37,440 --> 00:04:40,770
It's the exact same thing when we're running our own functions.

84
00:04:41,010 --> 00:04:44,010
So we've been using functions, but we haven't been defining them.

85
00:04:44,190 --> 00:04:45,600
How do we define our own?

86
00:04:45,750 --> 00:04:52,020
There are quite a few different syntax and syntax, different ways of writing functions in JavaScript.

87
00:04:52,020 --> 00:04:57,660
The one we'll focus on for now at least is called a function declaration or a function statement.

88
00:04:57,780 --> 00:04:59,800
It looks like this the func.

89
00:05:00,150 --> 00:05:05,100
Keyword, a space and then a name for the function, which is totally up to you.

90
00:05:05,130 --> 00:05:06,630
As long as it's a valid name.

91
00:05:06,630 --> 00:05:08,970
So you don't want to name your function const.

92
00:05:09,000 --> 00:05:13,440
You don't want to name your function function or for or if.

93
00:05:13,590 --> 00:05:14,800
But in general.

94
00:05:14,820 --> 00:05:15,240
Name it.

95
00:05:15,240 --> 00:05:16,200
Whatever you want.

96
00:05:16,200 --> 00:05:17,820
Just don't put spaces in there.

97
00:05:17,970 --> 00:05:19,530
It has to be a valid identifier.

98
00:05:19,530 --> 00:05:23,880
Shouldn't start with a number and then parentheses, open and closing parentheses.

99
00:05:23,880 --> 00:05:29,700
Sometimes we put stuff in there which we'll get to shortly and then curly braces and we write our code

100
00:05:29,700 --> 00:05:30,360
in here.

101
00:05:30,570 --> 00:05:36,630
Whatever code we put in here in the body of the function will be called when this function runs.

102
00:05:36,630 --> 00:05:43,220
So here's a simple, trivial, obnoxious example I'm defining a function called Grumpy's.

103
00:05:43,470 --> 00:05:45,120
It doesn't mean anything at all.

104
00:05:45,240 --> 00:05:48,720
It's just printing out three grouchy console logs.

105
00:05:48,750 --> 00:05:51,330
UG you again for the last time.

106
00:05:51,330 --> 00:05:52,470
Leave me alone.

107
00:05:52,650 --> 00:05:56,880
And every time we call Grumpy's, these three lines would be printed out.

108
00:05:57,540 --> 00:06:00,480
So it doesn't seem useful because this is not useful.

109
00:06:00,480 --> 00:06:01,680
Why would you ever need this?

110
00:06:01,680 --> 00:06:03,720
Why would you need a function called Grumpy's?

111
00:06:03,930 --> 00:06:07,200
We'll get to useful ones, but the pattern is very important.

112
00:06:07,200 --> 00:06:09,390
Function is a key word space.

113
00:06:09,390 --> 00:06:12,840
And then our function name with parentheses, curly braces.

114
00:06:12,840 --> 00:06:14,520
We put some content inside.

115
00:06:14,520 --> 00:06:16,140
So let's define it over here.

116
00:06:16,140 --> 00:06:21,540
Function Grumpy's parentheses and then console.log.

117
00:06:21,540 --> 00:06:22,380
Three things.

118
00:06:22,470 --> 00:06:24,600
There we go and just copied it over.

119
00:06:24,600 --> 00:06:26,430
We have three console logs.

120
00:06:26,430 --> 00:06:29,430
I'm going to save this file and refresh the page.

121
00:06:29,640 --> 00:06:30,720
Nothing happens.

122
00:06:31,290 --> 00:06:33,750
All that we've done is tell JavaScript.

123
00:06:33,750 --> 00:06:37,170
Here is a function called Grumpy's, but it's never running.

124
00:06:37,290 --> 00:06:38,730
We're just registering it.

125
00:06:38,730 --> 00:06:41,640
We're letting JavaScript know Here's a thing called Grumpy's.

126
00:06:41,640 --> 00:06:48,330
So to run it, which is the second step, all we do is write the name of the function followed by parentheses,

127
00:06:48,630 --> 00:06:52,260
just like we've done with string methods like two uppercase.

128
00:06:52,530 --> 00:06:55,650
We add those parents if we leave them off.

129
00:06:55,830 --> 00:06:59,040
You might remember we talked about this briefly in one of the videos.

130
00:06:59,370 --> 00:07:03,960
It's almost like JavaScript is telling us, Oh yeah, yeah, I know what that thing is that was registered

131
00:07:03,960 --> 00:07:04,590
with me.

132
00:07:04,590 --> 00:07:10,740
It's showing us there is some code in this case, native code built in code, but it's not actually

133
00:07:10,740 --> 00:07:11,160
running it.

134
00:07:11,160 --> 00:07:12,780
We have to add those per N's.

135
00:07:13,260 --> 00:07:14,730
So same thing for Grumpy's.

136
00:07:14,730 --> 00:07:21,330
If I simply type Grumpy's and I don't add those per ns, I'm seeing from JavaScript that this is a function,

137
00:07:21,330 --> 00:07:26,340
it's been registered, it exists, but I'm not running it, I'm just referencing it.

138
00:07:27,000 --> 00:07:28,530
So I need those friends.

139
00:07:29,040 --> 00:07:29,910
And there we go.

140
00:07:29,940 --> 00:07:31,890
My three lines actually run.

141
00:07:31,890 --> 00:07:33,570
The function is executed.

142
00:07:33,780 --> 00:07:36,090
So Grumpy's, let's do it three times.

143
00:07:36,090 --> 00:07:39,960
Grumpy is grumpy we'll save.

144
00:07:39,960 --> 00:07:43,800
I'm going to refresh the page and now we get nine consult logs.

145
00:07:43,800 --> 00:07:49,560
We've defined our function and we've executed it two steps and we can execute it like this.

146
00:07:49,560 --> 00:07:51,090
We could execute it in a loop.

147
00:07:51,090 --> 00:07:56,260
If I wanted to loop 20 times for less, I equals zero, I lessen or equal.

148
00:07:56,400 --> 00:07:59,730
Let's do less than let's do 50 plus plus.

149
00:07:59,760 --> 00:08:07,110
We've got a whole flock of grumpy faces I can call Grumpy's, refresh the page and we get a whole lot

150
00:08:07,110 --> 00:08:13,260
of grumpy, grumpy text printed out, a very stupid and grumpy function.

151
00:08:13,260 --> 00:08:20,550
But the point is not the content, it is the format, function, keyword, space, some function name,

152
00:08:20,550 --> 00:08:23,520
whatever this name is, you must reference later.

153
00:08:23,940 --> 00:08:28,470
So if I tried to call Grumpy with a capital G that doesn't exist, I get an error.

154
00:08:29,400 --> 00:08:30,780
It has to match the name.

155
00:08:30,780 --> 00:08:34,500
We gave it up here and then print in order to execute it.

156
00:08:35,039 --> 00:08:35,429
All right.

157
00:08:35,429 --> 00:08:36,809
So this is just the beginning.

158
00:08:36,840 --> 00:08:39,510
We'll very quickly see some more useful functions.

159
00:08:39,510 --> 00:08:40,980
We've got a lot more to talk about.

