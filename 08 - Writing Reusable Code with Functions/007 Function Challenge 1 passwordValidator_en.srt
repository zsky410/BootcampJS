1
00:00:00,210 --> 00:00:04,820
All right, let's get some practice writing functions with return values and arguments.

2
00:00:04,830 --> 00:00:07,740
We'll have a couple of these challenges or code alongs.

3
00:00:07,740 --> 00:00:09,540
It's up to you how you want to treat them.

4
00:00:09,540 --> 00:00:13,650
If you want to attempt to write the function on your own, I highly recommend that approach.

5
00:00:13,650 --> 00:00:18,840
But if you are completely new to functions and you're a little overwhelmed, then maybe take a step

6
00:00:18,840 --> 00:00:22,230
back, follow along with me and revisit these later on.

7
00:00:22,230 --> 00:00:23,430
So here's the first one.

8
00:00:23,700 --> 00:00:25,980
There's some description, some text I wrote.

9
00:00:25,980 --> 00:00:31,110
You can download this if you want and write your own function without looking at my solution.

10
00:00:31,140 --> 00:00:37,890
The goal is to write a function called is valid password and it accepts two different arguments a password

11
00:00:37,890 --> 00:00:42,840
and a username, and you can assume both of them are strings and this function should return.

12
00:00:42,840 --> 00:00:43,950
True or false?

13
00:00:44,670 --> 00:00:45,870
It's a boolean method.

14
00:00:46,230 --> 00:00:51,210
If the password meets all of the requirements which we'll go into in a moment, it should return.

15
00:00:51,210 --> 00:00:51,690
True.

16
00:00:51,720 --> 00:00:54,960
If any of them fail, then it should not be valid.

17
00:00:54,960 --> 00:00:56,370
So we return false.

18
00:00:56,370 --> 00:00:59,100
So the password needs to be at least eight characters.

19
00:00:59,550 --> 00:01:03,930
It cannot contain any spaces and it cannot contain the username.

20
00:01:04,530 --> 00:01:10,620
So if my username is dog lover, which is what I have here, this is an invalid password.

21
00:01:11,010 --> 00:01:12,540
It contains that text.

22
00:01:12,540 --> 00:01:14,010
It's not as safe.

23
00:01:14,010 --> 00:01:19,260
This is still not a very good set of rules for a password in general, but it's good enough for our

24
00:01:19,260 --> 00:01:20,850
function examples.

25
00:01:20,850 --> 00:01:25,680
So no username that cannot be contained anywhere in the string in the middle at the beginning.

26
00:01:26,220 --> 00:01:33,180
Also we need to make sure at least eight characters so another example would be is valid password and

27
00:01:33,180 --> 00:01:40,770
then if the password was only hello one, that would be false because it's not long enough as would

28
00:01:40,770 --> 00:01:42,960
this because it does not have a space.

29
00:01:43,350 --> 00:01:46,980
We don't need to return any specific reason for why it's invalid.

30
00:01:46,980 --> 00:01:49,830
So don't return something like password to short.

31
00:01:49,860 --> 00:01:52,170
It should be a boolean, true or false?

32
00:01:52,290 --> 00:01:54,290
So go ahead and try this if you'd like.

33
00:01:54,300 --> 00:01:57,060
Pause the video and then let's write a solution.

34
00:01:57,510 --> 00:02:03,900
So I'll start off by defining my function is valid password two parameters.

35
00:02:03,900 --> 00:02:05,520
The first one will be password.

36
00:02:05,550 --> 00:02:07,230
The second one is username.

37
00:02:07,230 --> 00:02:09,330
You could do it the other way around if you want.

38
00:02:09,330 --> 00:02:14,040
I'm just following the pattern I laid out here, but you just need to make sure you have two parameters

39
00:02:14,040 --> 00:02:15,570
and give them meaningful names.

40
00:02:15,570 --> 00:02:19,050
So if we're calling this one password, then we better treat it as password.

41
00:02:19,590 --> 00:02:21,630
So we have three different things we're checking for.

42
00:02:21,660 --> 00:02:23,940
Let's start with the length of the password.

43
00:02:25,170 --> 00:02:26,520
So we need a conditional.

44
00:02:26,910 --> 00:02:32,220
We need to check if password length is greater than or equal to eight.

45
00:02:32,670 --> 00:02:34,890
If that's the case, it is valid.

46
00:02:34,890 --> 00:02:37,050
So we could write it this way.

47
00:02:37,320 --> 00:02:43,470
But it's a little trickier because we need to make sure all of these are valid in order for the whole

48
00:02:43,470 --> 00:02:44,460
thing to be valid.

49
00:02:44,460 --> 00:02:48,420
So we need all of these to be true in order for us to return true.

50
00:02:48,480 --> 00:02:52,680
So I couldn't just say if password length is greater than or equal to eight return.

51
00:02:52,680 --> 00:02:58,470
True, because that might work if the password is eight characters like that.

52
00:02:58,470 --> 00:03:03,690
But one of those characters could be a space at which point it's invalid.

53
00:03:03,690 --> 00:03:11,010
So I need to make sure all of them are true so I could chain them all together with and I'm not a fan

54
00:03:11,010 --> 00:03:15,870
of this approach for a bunch of pieces together, this could get quite long.

55
00:03:16,170 --> 00:03:17,550
We have to check if there are spaces.

56
00:03:17,550 --> 00:03:21,240
We have to check if there's username, if the username is contained in the password.

57
00:03:21,240 --> 00:03:28,890
So I'm going to reverse my logic and say if password length is less than eight, return false because

58
00:03:28,890 --> 00:03:30,870
only one of these needs to be untrue.

59
00:03:30,870 --> 00:03:34,380
It needs to be false in order for the entire password to be invalid.

60
00:03:34,380 --> 00:03:35,700
So we'll just check.

61
00:03:35,730 --> 00:03:39,060
Is it too short then we know automatically return false.

62
00:03:40,020 --> 00:03:41,220
Then I'll do another one.

63
00:03:41,370 --> 00:03:42,330
Are there spaces?

64
00:03:42,330 --> 00:03:43,680
So if password.

65
00:03:44,100 --> 00:03:49,050
And then how do we check if there is a space in a string or any character in that string?

66
00:03:49,860 --> 00:04:00,180
I'll just do index of the space character and remember index of will give us negative one if that character

67
00:04:00,180 --> 00:04:00,720
is not in there.

68
00:04:00,720 --> 00:04:04,350
So there's no space in ISDS and I get negative one.

69
00:04:04,770 --> 00:04:10,290
So if password index of is not negative one, that means we have a problem.

70
00:04:10,350 --> 00:04:13,500
We want it to be negative one in order for the password to be valid.

71
00:04:13,500 --> 00:04:15,540
So we'll return false here.

72
00:04:16,110 --> 00:04:17,519
That means there is a space.

73
00:04:17,519 --> 00:04:20,250
And then how do we check if it contains the username?

74
00:04:20,850 --> 00:04:22,560
Basically the exact same thing.

75
00:04:23,010 --> 00:04:25,980
Password dot index of username.

76
00:04:27,450 --> 00:04:34,920
So a username could be dog lover and dog lover is contained in this string we can use index of with

77
00:04:34,920 --> 00:04:36,060
multiple characters.

78
00:04:36,060 --> 00:04:44,470
I could do ASD as index of asd and it tells us it starts at index zero if I do so.

79
00:04:44,640 --> 00:04:49,350
This is a terrible string to use but you can see it starts at index one.

80
00:04:49,350 --> 00:04:55,380
So it's not only used for a single character at a time, if this is the case, we will return false.

81
00:04:56,880 --> 00:04:58,710
Otherwise we can return true.

82
00:04:58,710 --> 00:04:59,280
And we don't need an.

83
00:04:59,380 --> 00:04:59,920
Else.

84
00:05:00,100 --> 00:05:04,990
We also don't need to do if and else if and where to live if you could.

85
00:05:05,770 --> 00:05:09,130
But since we're returning as soon as one of them is true.

86
00:05:09,130 --> 00:05:10,720
If this is true, we return.

87
00:05:10,720 --> 00:05:11,410
We're done.

88
00:05:11,680 --> 00:05:17,230
We don't have to do if and elseif, but we'll refactor this in a moment or we'll talk about a different

89
00:05:17,230 --> 00:05:18,700
way of writing this in a moment.

90
00:05:18,700 --> 00:05:20,110
But let's just make sure it works.

91
00:05:20,740 --> 00:05:26,410
So I'm going to try calling this let's do is valid password of something that is too short.

92
00:05:26,410 --> 00:05:30,460
So asd like that and then some username.

93
00:05:30,460 --> 00:05:31,510
It doesn't really matter.

94
00:05:31,870 --> 00:05:32,980
We get false.

95
00:05:35,020 --> 00:05:37,990
Now let's do another example where there's a space.

96
00:05:38,760 --> 00:05:39,630
It could be, let's do one.

97
00:05:39,630 --> 00:05:40,620
That's long enough.

98
00:05:41,040 --> 00:05:43,830
But there's a space in there and then some username.

99
00:05:44,460 --> 00:05:45,720
We still get false.

100
00:05:45,840 --> 00:05:51,960
And now let's do our final test case where we have a long enough password like chicken.

101
00:05:51,960 --> 00:05:53,250
One, two, three, four.

102
00:05:54,520 --> 00:05:57,190
And the username is chicken.

103
00:05:58,160 --> 00:06:01,100
That's not allowed, so we get false.

104
00:06:01,400 --> 00:06:07,610
But if I no longer include chicken in my password and I instead change it to chicken spelled that way

105
00:06:08,000 --> 00:06:09,440
we finally get true.

106
00:06:09,950 --> 00:06:12,140
So we're now meeting the requirements.

107
00:06:12,590 --> 00:06:16,340
This is OC and I actually kind of like writing it this way.

108
00:06:16,370 --> 00:06:18,980
It's very explicit and clear what's going on.

109
00:06:19,280 --> 00:06:22,340
We could write it using a single conditional.

110
00:06:22,340 --> 00:06:23,800
It would just get really long.

111
00:06:23,810 --> 00:06:27,500
We can link them together and say, if one of these is true.

112
00:06:27,500 --> 00:06:31,640
So if this or this or this return false.

113
00:06:32,840 --> 00:06:33,980
So we could do that.

114
00:06:34,160 --> 00:06:38,900
I'll duplicate the function and rewrite it just so you can see what it would look like.

115
00:06:39,230 --> 00:06:41,420
So we could rewrite it as if.

116
00:06:41,900 --> 00:06:44,030
And then the first thing would be password.

117
00:06:44,030 --> 00:06:48,890
Dot length is less than eight or password.

118
00:06:49,100 --> 00:06:56,270
Index of space, not empty string, but space is not equal to negative one or password.

119
00:06:56,420 --> 00:06:59,570
Index of username is not equal to negative one.

120
00:07:00,770 --> 00:07:06,470
If that's the case, if one of those is true, return, false or more.

121
00:07:06,470 --> 00:07:14,390
If one or more is true and then return true at the end, that means everything is valid and this works.

122
00:07:14,390 --> 00:07:17,060
I would definitely just want to format it like we have here.

123
00:07:17,060 --> 00:07:19,370
Make it easier to see one long line.

124
00:07:19,370 --> 00:07:20,420
It's not so pretty.

125
00:07:20,570 --> 00:07:22,190
Let's make sure it still works.

126
00:07:22,190 --> 00:07:24,140
Let me comment out the original one here.

127
00:07:25,070 --> 00:07:26,990
Refresh and try it again.

128
00:07:27,700 --> 00:07:29,080
So this one is valid.

129
00:07:30,340 --> 00:07:32,980
This one contained chicken, which is the username.

130
00:07:32,980 --> 00:07:34,030
So it's invalid.

131
00:07:34,660 --> 00:07:38,800
This one had a space in it invalid.

132
00:07:38,800 --> 00:07:41,440
And this one was too short.

133
00:07:41,590 --> 00:07:43,060
Also invalid.

134
00:07:43,840 --> 00:07:44,950
So this is also nice.

135
00:07:44,950 --> 00:07:46,060
This is not too bad.

136
00:07:46,240 --> 00:07:51,460
Another approach you could take just by the way, if you are bored with this or you feel like you've

137
00:07:51,460 --> 00:07:53,890
got a good grasp of it, go ahead and move on.

138
00:07:53,890 --> 00:07:57,880
I probably don't even need to tell you that, but I will show you another approach.

139
00:07:57,910 --> 00:08:01,300
What we could do is make each of these into a variable.

140
00:08:01,510 --> 00:08:03,870
All of these return true or false.

141
00:08:03,880 --> 00:08:05,860
So I'm going to get rid of this.

142
00:08:05,890 --> 00:08:07,570
I'm just going to delete everything for a moment.

143
00:08:07,570 --> 00:08:09,430
And I could make a variable here.

144
00:08:10,300 --> 00:08:11,290
What would this be called?

145
00:08:11,290 --> 00:08:13,870
Maybe is to short or to short.

146
00:08:13,870 --> 00:08:23,440
So const to short equals password length, less than eight const.

147
00:08:23,440 --> 00:08:28,870
And then this one would be has spaces or has space equals this line.

148
00:08:29,350 --> 00:08:33,020
So these variables I'm making, three of them are going to be true or false.

149
00:08:33,039 --> 00:08:34,330
Boolean Values.

150
00:08:34,360 --> 00:08:34,960
Password.

151
00:08:35,110 --> 00:08:36,070
Index of username.

152
00:08:36,070 --> 00:08:37,390
So we'll call this const.

153
00:08:38,830 --> 00:08:41,620
It's a short way of saying this contains username.

154
00:08:41,620 --> 00:08:43,179
How about two similar

155
00:08:45,700 --> 00:08:46,510
like that?

156
00:08:47,650 --> 00:08:59,650
And then we can use those to make a conditional if to short or has space or to similar return false.

157
00:08:59,650 --> 00:09:00,970
And I'll do this on one line.

158
00:09:00,970 --> 00:09:02,050
There's nothing wrong with that.

159
00:09:02,890 --> 00:09:04,510
I don't need those curly braces.

160
00:09:04,510 --> 00:09:07,930
We've seen it once or twice for nice and short conditionals.

161
00:09:07,930 --> 00:09:09,550
All we need is one line of code.

162
00:09:09,550 --> 00:09:10,480
Return false.

163
00:09:10,480 --> 00:09:12,400
Otherwise, return true.

164
00:09:14,810 --> 00:09:15,290
Och.

165
00:09:15,620 --> 00:09:16,940
It should still work.

166
00:09:17,060 --> 00:09:18,410
That's invalid.

167
00:09:18,890 --> 00:09:20,840
This one with a space in it.

168
00:09:20,840 --> 00:09:23,480
Super long space still invalid.

169
00:09:23,960 --> 00:09:29,060
Let's go with a different username like dog and then a password that contains dog.

170
00:09:29,660 --> 00:09:31,250
I love dog.

171
00:09:31,250 --> 00:09:32,300
One, two, three.

172
00:09:32,330 --> 00:09:37,670
Still false, but now if I change username to be cat, password no longer contains it.

173
00:09:37,700 --> 00:09:38,750
It's true.

174
00:09:38,870 --> 00:09:41,490
And we've got yet another thing that we could change.

175
00:09:41,510 --> 00:09:46,880
And to be clear here, I'm not saying that this is the best evolution or that this version will be the

176
00:09:46,880 --> 00:09:47,850
better version.

177
00:09:47,870 --> 00:09:50,210
I just want to explore some possibilities here.

178
00:09:50,690 --> 00:09:54,580
So what we're doing right now is checking a bunch of conditions.

179
00:09:54,590 --> 00:09:57,860
Well, it's a single condition that contains a couple orders.

180
00:09:58,160 --> 00:10:01,400
And if this is true, we return false.

181
00:10:01,400 --> 00:10:04,310
If it's not true, we return true.

182
00:10:05,000 --> 00:10:09,320
So we want this to be false so that we return true, if that makes sense.

183
00:10:09,320 --> 00:10:14,990
So we could invert this instead of saying if it's too short or it has spaces or it's too similar to

184
00:10:14,990 --> 00:10:16,630
username return false.

185
00:10:16,640 --> 00:10:22,460
We could say if it's not too short, if it doesn't have space and it's not too similar return.

186
00:10:22,460 --> 00:10:23,090
True.

187
00:10:23,750 --> 00:10:27,920
And we could write that like this function is valid password.

188
00:10:27,920 --> 00:10:29,120
We can keep these variables.

189
00:10:29,120 --> 00:10:33,260
But remember, any time I have a variable here, you could just replace it with a condition.

190
00:10:33,500 --> 00:10:43,520
So we could say if it's not too short and does not have space and it's not too similar, we want to

191
00:10:43,520 --> 00:10:44,810
return true.

192
00:10:46,310 --> 00:10:47,960
Otherwise return false.

193
00:10:47,960 --> 00:10:48,890
And it should still work.

194
00:10:48,890 --> 00:10:50,510
Fine if I refresh over there.

195
00:10:50,540 --> 00:10:55,790
This one is valid, but if I now change this to be love as my username, it's false.

196
00:10:56,180 --> 00:11:00,200
If I just change the username to something and I add a space false.

197
00:11:00,200 --> 00:11:02,690
And if the password is too short, we get false.

198
00:11:04,970 --> 00:11:08,960
Now this also is good, but we can improve it even one more degree.

199
00:11:09,110 --> 00:11:11,810
I shouldn't say improve, but we can shorten it if you want it to.

200
00:11:12,680 --> 00:11:14,930
We're saying if this is true, return true.

201
00:11:14,930 --> 00:11:16,840
If this is false, return false.

202
00:11:16,850 --> 00:11:19,310
We could just say return this.

203
00:11:19,340 --> 00:11:22,790
This evaluates to true or false so I could get rid of that.

204
00:11:24,710 --> 00:11:32,240
Return this this whole thing will evaluate to true or false and then we return that value.

205
00:11:33,590 --> 00:11:34,880
So that's false.

206
00:11:35,450 --> 00:11:36,800
Let's do a longer one.

207
00:11:38,660 --> 00:11:41,650
That's true because it does not contain this username.

208
00:11:41,660 --> 00:11:42,920
I had a space.

209
00:11:42,950 --> 00:11:44,860
We've seen this a bunch of times by now.

210
00:11:44,870 --> 00:11:48,130
The logic still works and I'll stop here.

211
00:11:48,140 --> 00:11:53,030
We could continue to flip flop and change the type of logic we're doing.

212
00:11:53,240 --> 00:11:58,370
We could, instead of making a variable called to short and checking if the password is too short,

213
00:11:58,370 --> 00:12:00,500
we could go the other way around and check.

214
00:12:00,530 --> 00:12:02,270
Is this password long enough?

215
00:12:02,270 --> 00:12:06,110
In which case we'd be checking password length greater than or equal to eight.

216
00:12:06,230 --> 00:12:08,480
And then we could change our logic down here.

217
00:12:08,600 --> 00:12:11,510
The point is, we could continue to alter the logic.

218
00:12:11,930 --> 00:12:13,790
I'm not going to stress about it.

219
00:12:13,790 --> 00:12:15,200
Looking at all of them.

220
00:12:15,320 --> 00:12:17,720
I think any of them is good.

221
00:12:17,720 --> 00:12:23,360
Even this first one, which is a lot longer in terms of the number of lines, it's still very easy to

222
00:12:23,360 --> 00:12:24,440
see what's going on.

223
00:12:24,470 --> 00:12:30,680
A lot of people obsessed, especially students who are starting out obsessed with writing compact,

224
00:12:30,680 --> 00:12:36,290
super short one liner functions and really trying to do like hacky cool things.

225
00:12:36,290 --> 00:12:37,480
And that's great.

226
00:12:37,490 --> 00:12:43,220
It's always fun to see how short you can make something, but often that comes at the expense of readability

227
00:12:43,220 --> 00:12:45,710
and expressiveness, just being able to understand it.

228
00:12:45,710 --> 00:12:50,470
If someone walked into this code or walked into this file and needed to understand what was going on,

229
00:12:50,480 --> 00:12:52,130
all of these are pretty clear.

230
00:12:52,130 --> 00:12:55,430
And these in particular, I like with these variables.

231
00:12:56,120 --> 00:12:59,960
Some people would say as you don't need those variables, you're wasting memory.

232
00:12:59,960 --> 00:13:03,650
It's really a minuscule waste of memory if you want to call it that.

233
00:13:03,650 --> 00:13:07,940
And it's not worth stressing about, but pick whichever one you're comfortable with.

234
00:13:07,940 --> 00:13:10,130
I just wanted to show a couple different versions.

