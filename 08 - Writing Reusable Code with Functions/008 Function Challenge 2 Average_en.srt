1
00:00:00,210 --> 00:00:02,360
Let's do some practice with functions.

2
00:00:02,370 --> 00:00:09,090
So in this example, I'd like you to write a function called average AVG or just average the word which

3
00:00:09,090 --> 00:00:12,330
accepts an array of numbers and you can assume it's all numbers.

4
00:00:12,330 --> 00:00:15,240
You don't have to check to see if each thing is a number.

5
00:00:15,480 --> 00:00:20,760
So it accepts an array of numbers and it should return the average value of all those numbers.

6
00:00:20,880 --> 00:00:27,180
So in a simple case like zero and 50, it should return 25, but it should work for an array of any

7
00:00:27,180 --> 00:00:34,560
length, 100 numbers, 20 numbers, two numbers, return the average, so give it a shot.

8
00:00:34,710 --> 00:00:36,270
There's many ways of doing this.

9
00:00:36,750 --> 00:00:40,920
There's many ways of doing this, including some functions and some helpers we haven't covered yet.

10
00:00:40,920 --> 00:00:42,510
That would make this even easier.

11
00:00:42,660 --> 00:00:46,890
But we're just going to start with a good old fashioned loop and division.

12
00:00:47,820 --> 00:00:56,040
So let's define our function, function a V and let's give the parameter a name of array a R.

13
00:00:56,070 --> 00:01:00,540
So ah, you could also call it numbs values.

14
00:01:00,840 --> 00:01:13,920
And our main approach here is going to be loop over each num, add them together, divide by number

15
00:01:13,920 --> 00:01:17,550
of nums divided by the length of the array.

16
00:01:18,150 --> 00:01:23,460
So we need a place where we can tally or some all of the values we we need a variable.

17
00:01:23,460 --> 00:01:27,690
So I'm going to make a variable called total and I'll start it at zero.

18
00:01:28,590 --> 00:01:31,080
Then we're going to loop over each num.

19
00:01:31,770 --> 00:01:32,820
We could do a for loop.

20
00:01:32,820 --> 00:01:41,370
I like four of so for lit num, I'll call it num or x or val value of the array.

21
00:01:42,390 --> 00:01:45,510
We want to take that num and add it into total.

22
00:01:46,050 --> 00:01:48,690
So total plus equals num.

23
00:01:49,830 --> 00:01:52,890
So we start with zero and 50.

24
00:01:53,040 --> 00:01:55,590
Total starts at zero num is zero.

25
00:01:55,620 --> 00:02:00,090
The first time we add 0 to 0, then num is now 50.

26
00:02:00,090 --> 00:02:02,040
So we're going to add 50 to total.

27
00:02:02,040 --> 00:02:05,250
Total is now 50 and we've hit the end.

28
00:02:05,790 --> 00:02:11,820
So we're not done because right now we would be returning the entire sum if we returned total.

29
00:02:11,910 --> 00:02:18,180
What we need to do instead is return the total divided by the number of elements in the array.

30
00:02:19,050 --> 00:02:20,700
So we can do this.

31
00:02:20,700 --> 00:02:32,820
We can make a variable let result equal total divided by array length and then return result or rise.

32
00:02:33,720 --> 00:02:34,980
Let's see if it works.

33
00:02:36,270 --> 00:02:40,860
Average of zero and 50 is 2580 5.2.

34
00:02:40,860 --> 00:02:42,840
For this array of test scores.

35
00:02:43,050 --> 00:02:47,490
We could also just return this line without a variable.

36
00:02:48,990 --> 00:02:53,940
It's clear enough we're just taking the total dividing by the length of the array and that's it.

37
00:02:54,030 --> 00:02:55,920
We start with a total of zero.

38
00:02:55,950 --> 00:03:01,500
We loop over each element, we add that into the total, so we end up with this sum, and then we return

39
00:03:01,500 --> 00:03:04,350
that sum divided by the number of elements.

40
00:03:05,130 --> 00:03:07,050
Like I said, there's many ways of doing this.

41
00:03:07,050 --> 00:03:09,960
You could have used a for loop, a regular for loop.

42
00:03:09,960 --> 00:03:14,880
Instead, if you know about things like for each, which we haven't covered, you could have used that.

43
00:03:14,880 --> 00:03:18,870
But the main idea is you sum things together using a loop and then divide.

