1
00:00:00,150 --> 00:00:00,510
All right.

2
00:00:00,510 --> 00:00:03,600
So we've seen two different values for this so far.

3
00:00:03,630 --> 00:00:06,510
We saw that when we declared just a regular old function.

4
00:00:06,510 --> 00:00:07,970
We don't call it as a method.

5
00:00:07,980 --> 00:00:09,620
We don't put it in an object.

6
00:00:09,630 --> 00:00:11,940
This refers to the window object.

7
00:00:11,950 --> 00:00:19,170
When we use this instead of a method, it's a way of accessing the parent object, the object that the

8
00:00:19,170 --> 00:00:20,490
method is located in.

9
00:00:20,790 --> 00:00:23,520
Like we used right here with this share object.

10
00:00:24,090 --> 00:00:25,830
But that's not always the case.

11
00:00:26,250 --> 00:00:31,500
The value of this depends on the invocation context of the function that it's used in.

12
00:00:31,500 --> 00:00:37,410
What that means is the value will change depending on how the function is actually executed, not just

13
00:00:37,410 --> 00:00:38,460
where you write it.

14
00:00:38,760 --> 00:00:45,420
So yes, I wrote this inside of a method, but that doesn't mean it's guaranteed to reference this object.

15
00:00:45,690 --> 00:00:47,700
It depends on how I'm calling it.

16
00:00:47,910 --> 00:00:51,030
And here I'm calling it how you normally would call a method.

17
00:00:51,030 --> 00:00:56,340
The natural way to call this would be person, print, bio or person's full name.

18
00:00:56,970 --> 00:01:03,420
This is what is setting the value of this, the way that I'm actually executing or invoking this function.

19
00:01:04,050 --> 00:01:07,560
So this is kind of a shapeshifter in this way.

20
00:01:07,560 --> 00:01:09,700
That's why I have these different faces down here.

21
00:01:09,720 --> 00:01:14,670
It's tough to come up with a good visual representation of it, but let me show you how we could actually

22
00:01:14,670 --> 00:01:16,470
change the value of this.

23
00:01:17,520 --> 00:01:21,900
What I could do is make a reference to this function print bio.

24
00:01:22,200 --> 00:01:23,310
Let's work with that one.

25
00:01:23,460 --> 00:01:25,800
I'll call this concept print.

26
00:01:26,310 --> 00:01:28,890
Bio equals person.

27
00:01:29,010 --> 00:01:30,840
Dot, print, bio.

28
00:01:31,800 --> 00:01:36,270
So I'm just pointing this variable print bio to that function.

29
00:01:36,390 --> 00:01:39,110
It's still a property on the person object.

30
00:01:39,120 --> 00:01:41,270
I didn't remove it, I didn't delete it.

31
00:01:41,280 --> 00:01:43,800
I just made a variable pointing to it.

32
00:01:43,860 --> 00:01:45,810
And if I call print bio.

33
00:01:48,650 --> 00:01:50,200
Oh, I got to refresh the code.

34
00:01:50,570 --> 00:01:51,460
Let's try it again.

35
00:01:51,820 --> 00:01:53,080
We get a different error.

36
00:01:53,110 --> 00:01:55,360
This full name is not a function.

37
00:01:56,020 --> 00:02:03,010
So why don't we add a console.log this at the end and see what's going on.

38
00:02:04,300 --> 00:02:08,729
So if I call print bio again, this full name is not a function.

39
00:02:08,979 --> 00:02:10,030
Well, I'm an idiot.

40
00:02:10,360 --> 00:02:12,600
I'm concerned that logging after that error.

41
00:02:12,610 --> 00:02:14,290
Let's do it before the error.

42
00:02:15,880 --> 00:02:16,320
Okay.

43
00:02:16,330 --> 00:02:17,140
Here we go.

44
00:02:17,380 --> 00:02:18,970
It's referencing the window.

45
00:02:20,110 --> 00:02:21,890
Just like we had up here.

46
00:02:21,910 --> 00:02:23,200
If I call, say hi.

47
00:02:23,230 --> 00:02:24,760
It references the window.

48
00:02:25,730 --> 00:02:28,550
And that's because of how I'm executing the function.

49
00:02:29,750 --> 00:02:32,540
If I instead execute it the way we've been doing.

50
00:02:32,540 --> 00:02:34,580
Person What do we call it?

51
00:02:34,580 --> 00:02:35,450
Print bio.

52
00:02:36,350 --> 00:02:38,210
The name of this method right there.

53
00:02:39,190 --> 00:02:45,760
This is referring to the object so you can think of it as if there is something to the left and then

54
00:02:45,760 --> 00:02:48,730
a dot and then you're executing the function.

55
00:02:48,760 --> 00:02:51,990
This will be set to that thing, to the left.

56
00:02:52,000 --> 00:02:57,580
If there's nothing to the left, if we're just calling, say hi, or if we're just calling print bio.

57
00:02:58,810 --> 00:03:02,530
This will be set to the global execution scope, the window.

58
00:03:03,010 --> 00:03:05,090
So this is the confusing part of this.

59
00:03:05,110 --> 00:03:06,640
It's not set in stone.

60
00:03:07,240 --> 00:03:09,640
You probably won't call your method this way.

61
00:03:09,670 --> 00:03:14,270
It's not something you would do all the time, but it's important to understand how it behaves.

62
00:03:14,290 --> 00:03:16,270
There is a very significant difference.

63
00:03:16,270 --> 00:03:21,580
So generally when you write this in a method, you're going to call it using the dot syntax, you're

64
00:03:21,580 --> 00:03:25,360
going to call object, method, name, person, print, bio.

65
00:03:25,390 --> 00:03:26,380
Everything will be great.

66
00:03:26,380 --> 00:03:27,250
Everyone's happy.

67
00:03:27,250 --> 00:03:33,520
This refers to the object itself, the parent object that contains the method, but that doesn't mean

68
00:03:33,520 --> 00:03:35,620
it always is set to that value.

69
00:03:35,650 --> 00:03:41,410
It depends on the invocation context, how you actually execute that function, the line that you write

70
00:03:41,410 --> 00:03:44,230
that runs the code or that runs the function.

71
00:03:44,530 --> 00:03:49,540
Later on in the course, we'll see that there are some additional rules in some ways of changing the

72
00:03:49,540 --> 00:03:50,610
value of this.

73
00:03:50,620 --> 00:03:55,790
There are three special methods that are usually grouped together call, apply and bind.

74
00:03:55,810 --> 00:03:57,040
Those will come up later.

75
00:03:57,040 --> 00:04:01,240
We'll talk about classes and prototypes and creating new objects.

76
00:04:01,240 --> 00:04:02,920
That all has to do with the keyword.

77
00:04:02,920 --> 00:04:03,870
This as well.

78
00:04:03,880 --> 00:04:07,330
So right now, this is just a quick introduction.

79
00:04:07,330 --> 00:04:12,190
I want you to be aware of how this works in two of the most common scenarios.

80
00:04:12,310 --> 00:04:15,970
And then there's one more thing to talk about, which is arrow functions.

81
00:04:15,970 --> 00:04:21,130
When we write an arrow function, this is one of the key differences between a regular function and

82
00:04:21,130 --> 00:04:22,089
an arrow function.

83
00:04:22,150 --> 00:04:25,330
Arrow functions do not get their own version of this.

84
00:04:25,720 --> 00:04:28,150
It doesn't matter how you call an arrow function.

85
00:04:28,150 --> 00:04:34,570
If you execute it as a method where you call object dot name of the function, or if you just call the

86
00:04:34,570 --> 00:04:38,170
function directly, the value of this is not going to be changed.

87
00:04:38,170 --> 00:04:41,800
So in that way they are very different from a traditional function.

88
00:04:41,800 --> 00:04:43,420
And I'll show this very quickly.

89
00:04:43,450 --> 00:04:48,280
Let's just make a function called, geez, this is the hardest part of teaching anything.

90
00:04:48,280 --> 00:04:51,760
Coming up with examples, we have full name, print, bio.

91
00:04:51,790 --> 00:04:53,560
How about laugh?

92
00:04:54,040 --> 00:05:00,610
Okay, so we'll define our function, which will be an arrow function as a method.

93
00:05:01,330 --> 00:05:03,490
I'll use this key syntax, key value.

94
00:05:03,490 --> 00:05:13,300
But the colon in there and inside of this I'm going to console.log this and for laugh let's console.log

95
00:05:14,110 --> 00:05:24,280
this dot let's do a template literal let's put this dot nickname says ha ha ha ha.

96
00:05:24,850 --> 00:05:27,760
Okay, so we have this laugh method.

97
00:05:27,850 --> 00:05:32,680
If I try and call laugh person laugh.

98
00:05:34,710 --> 00:05:35,370
Okay.

99
00:05:35,580 --> 00:05:41,790
First of all, the value of this is set to the window, which is very different than the value of this

100
00:05:41,790 --> 00:05:44,430
in print, bio or in full name.

101
00:05:45,260 --> 00:05:51,650
As we saw when we call print bio, this is set to the object, the person object.

102
00:05:51,650 --> 00:05:53,990
An arrow function does not behave that way.

103
00:05:54,020 --> 00:05:56,830
The value of this does not change in the arrow function.

104
00:05:56,840 --> 00:06:00,680
It's a reference to the global scope to the window.

105
00:06:01,580 --> 00:06:03,860
So sometimes that can be a good thing.

106
00:06:03,860 --> 00:06:09,440
But generally this is why we don't use arrow functions as methods, because a lot of the methods we

107
00:06:09,440 --> 00:06:15,290
write, we want to have access to the parent object or the containing object to do things like reference

108
00:06:15,290 --> 00:06:20,450
properties or call a different method like we did inside of print bio.

109
00:06:20,480 --> 00:06:23,480
We called this full name in an arrow function.

110
00:06:23,480 --> 00:06:27,110
We couldn't do that, at least not until we see things like bind.

111
00:06:27,320 --> 00:06:32,300
So for that reason, we usually don't use arrow functions as methods in an object.

112
00:06:32,300 --> 00:06:35,690
But there's a reason that arrow functions don't get their own.

113
00:06:35,690 --> 00:06:40,490
This if you only use regular standard traditional functions like this.

114
00:06:40,910 --> 00:06:41,660
So annoying.

115
00:06:41,690 --> 00:06:43,250
Like this one right here.

116
00:06:43,400 --> 00:06:43,600
There.

117
00:06:43,760 --> 00:06:44,870
Hopefully that's clearer.

118
00:06:44,900 --> 00:06:46,220
Like this one right here.

119
00:06:46,220 --> 00:06:51,860
Sometimes you can run into issues and I'll show you an example of where that can happen in the very

120
00:06:51,860 --> 00:06:52,660
next video.

121
00:06:52,670 --> 00:06:58,640
So to summarize what we saw here, the value of this is set by the invocation context.

122
00:06:58,640 --> 00:07:02,270
It's not set in stone purely based off of where you write it.

123
00:07:02,750 --> 00:07:05,960
In this case, we put it in an object instead of a function.

124
00:07:05,960 --> 00:07:12,560
Instead of an object, we reference this and when we called it as a method person print PIO, this was

125
00:07:12,560 --> 00:07:20,720
set to the entire object, the parent object versus when we made a reference to that same function and

126
00:07:20,720 --> 00:07:27,320
instead called it just as a regular function without something to the left, without object dot something,

127
00:07:27,320 --> 00:07:28,580
just print bio.

128
00:07:29,090 --> 00:07:31,070
This was referring to the window.

129
00:07:31,190 --> 00:07:33,530
So the execution context matters.

130
00:07:33,530 --> 00:07:36,380
The way that you actually invoke it does matter.

131
00:07:36,380 --> 00:07:39,770
And then the second thing we saw was that arrow functions don't get their own this.

132
00:07:39,770 --> 00:07:43,670
And in the next video I'll expand on how that sometimes can be useful.

