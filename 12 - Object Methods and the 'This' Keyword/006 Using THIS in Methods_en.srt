1
00:00:00,120 --> 00:00:03,840
Next up, we'll see where this starts to become a lot more useful.

2
00:00:04,320 --> 00:00:09,960
If we have an object like a person object where we have a first name.

3
00:00:10,140 --> 00:00:12,630
How about share?

4
00:00:12,750 --> 00:00:14,170
What does shares full name?

5
00:00:14,190 --> 00:00:19,110
Well, thanks to Wikipedia I have it Sherilyn Sarkeesian.

6
00:00:19,110 --> 00:00:21,060
So we'll make first name.

7
00:00:21,660 --> 00:00:25,020
Sherilyn will make last Sarkeesian.

8
00:00:25,020 --> 00:00:27,240
And let's also add in a nickname.

9
00:00:29,370 --> 00:00:32,880
Let's do a nickname, camel case it, which will be share.

10
00:00:33,570 --> 00:00:35,310
All right, so we have this object.

11
00:00:35,310 --> 00:00:39,060
If I add a method to the object, let's do something simple.

12
00:00:39,090 --> 00:00:42,570
Like greets or how about full name?

13
00:00:42,570 --> 00:00:44,160
Let's do a method called full name.

14
00:00:44,790 --> 00:00:47,760
We can use the shorthand that we saw a couple videos ago.

15
00:00:47,760 --> 00:00:49,170
Or I could do it this way.

16
00:00:49,860 --> 00:00:52,080
I'll do the shorthand though I think it's nicer.

17
00:00:53,220 --> 00:00:59,310
And inside of this method let's console.log the keyword this to start and now let's run it.

18
00:00:59,370 --> 00:01:04,840
So person dot full name execute it.

19
00:01:04,860 --> 00:01:05,850
What do we get?

20
00:01:07,050 --> 00:01:13,110
Okay, so this time it is not constant logging the window, it's constant logging something else.

21
00:01:13,110 --> 00:01:17,100
Compare that to say hi, which is a function not in an object.

22
00:01:17,580 --> 00:01:22,020
We got the window object, the global execution context, the global scope.

23
00:01:22,020 --> 00:01:26,070
The window is what this is right here versus here.

24
00:01:26,070 --> 00:01:27,810
The value of this is different.

25
00:01:27,810 --> 00:01:33,090
The value of this is the object itself, the person object right here.

26
00:01:33,600 --> 00:01:40,080
So the value of this has been set to a different object, not the window, but the object that this

27
00:01:40,080 --> 00:01:41,520
method is inside of.

28
00:01:41,850 --> 00:01:43,560
Now, why is this useful?

29
00:01:43,560 --> 00:01:49,110
In the next video we'll see that this is not always the case, and depending on how you call full name,

30
00:01:49,110 --> 00:01:50,550
it could reference the window.

31
00:01:50,550 --> 00:01:52,290
But we're going to put that aside for now.

32
00:01:52,440 --> 00:01:54,900
Let's talk about why this would be useful.

33
00:01:54,900 --> 00:01:58,770
Why do you care about the current object that you are inside of?

34
00:01:59,040 --> 00:02:07,350
It allows us to reference these properties or other methods so we can have a method that is aware of

35
00:02:07,350 --> 00:02:09,419
the other contents in its object.

36
00:02:09,900 --> 00:02:16,290
So for full name, if I wanted to print out first name and last name together, I could reference this

37
00:02:16,290 --> 00:02:17,490
dot first.

38
00:02:18,450 --> 00:02:19,560
Let's start there.

39
00:02:19,590 --> 00:02:20,910
Refresh my page.

40
00:02:20,940 --> 00:02:24,690
I'll call person full name and we're getting Sherrilyn.

41
00:02:25,230 --> 00:02:28,200
So this again, is a reference to the object.

42
00:02:28,590 --> 00:02:30,780
First, we'll give me this value.

43
00:02:31,050 --> 00:02:35,190
So I could now update this to instead console.log.

44
00:02:36,360 --> 00:02:38,790
How about first?

45
00:02:38,880 --> 00:02:40,890
So this dot first.

46
00:02:42,520 --> 00:02:43,400
Space.

47
00:02:43,720 --> 00:02:46,810
And then afterwards, this last.

48
00:02:48,100 --> 00:02:50,910
And then if I wanted to use the nickname, let's just start here.

49
00:02:50,920 --> 00:02:51,910
Make sure it works.

50
00:02:52,810 --> 00:02:53,770
Refresh my page.

51
00:02:53,770 --> 00:02:54,640
Try again.

52
00:02:55,810 --> 00:02:57,280
Sherilyn Sarkeesian.

53
00:02:57,700 --> 00:03:00,640
And then afterwards, let's do a.k.a..

54
00:03:02,530 --> 00:03:03,880
This nickname.

55
00:03:05,860 --> 00:03:06,700
Try it again.

56
00:03:07,990 --> 00:03:11,590
Now, this is a good opportunity for us to use the structuring.

57
00:03:11,980 --> 00:03:14,260
We're having to write this quite a bit.

58
00:03:14,290 --> 00:03:21,490
I could add a separate line and D structure those properties from this first last nickname.

59
00:03:22,330 --> 00:03:25,960
If two camel case nickname equals this.

60
00:03:27,490 --> 00:03:32,110
Now I can remove this from here and here.

61
00:03:32,650 --> 00:03:33,970
It should still work.

62
00:03:34,750 --> 00:03:35,740
Let's verify.

63
00:03:37,400 --> 00:03:37,850
Oh.

64
00:03:37,940 --> 00:03:39,110
Did I not save?

65
00:03:40,240 --> 00:03:40,820
Here we go.

66
00:03:40,840 --> 00:03:42,400
This needs to be uppercase.

67
00:03:43,480 --> 00:03:44,380
One more time.

68
00:03:45,010 --> 00:03:48,100
Now we get Sherilyn Sarkeesian, aka Cher.

69
00:03:48,160 --> 00:03:54,320
And if I change one of those values in person, let's go with nickname.

70
00:03:54,340 --> 00:03:54,850
Person.

71
00:03:55,030 --> 00:04:00,430
Nickname equals Cher with a bunch of R's in all caps.

72
00:04:01,120 --> 00:04:03,340
So now person has a new nickname.

73
00:04:03,790 --> 00:04:05,620
If I call full name again.

74
00:04:06,250 --> 00:04:07,620
That change is reflected.

75
00:04:07,630 --> 00:04:14,260
It's looking up the value of nickname on the current execution scope, which is what this refers to.

76
00:04:14,290 --> 00:04:16,350
And it's set to this object.

77
00:04:16,360 --> 00:04:22,860
So now we have the ability to write an object or a method that is aware of the object it lives in,

78
00:04:22,870 --> 00:04:29,290
which means we can use objects not just to store different methods because they're related like we had.

79
00:04:29,830 --> 00:04:31,900
Add and subtract and multiply and divide.

80
00:04:31,900 --> 00:04:37,540
We group them together as a nice way of of just making a little container for our methods that are similar.

81
00:04:37,540 --> 00:04:43,480
But now we have a way of also interacting with properties with other values or even other methods.

82
00:04:43,480 --> 00:04:49,900
So our object can now be a little self contained world where we can have variables, we can have these

83
00:04:49,900 --> 00:04:50,710
properties.

84
00:04:51,130 --> 00:04:55,420
And this is a very simple example, but I'll show you some other examples as we go on.

85
00:04:55,450 --> 00:04:59,530
We have a little more to talk about with the keyword this in the next video, but then we're just going

86
00:04:59,530 --> 00:05:05,920
to see a bunch of examples of using this in methods and you'll be able to see hopefully why it is a

87
00:05:05,920 --> 00:05:09,280
really, really nice tool to have, why you would want to do this.

88
00:05:09,580 --> 00:05:14,200
So let me show you one more example here with the same object, we could also add another method to

89
00:05:14,200 --> 00:05:18,550
the object and call a different method using this.

90
00:05:18,550 --> 00:05:20,290
So we have full name.

91
00:05:20,290 --> 00:05:25,300
Let's make let's make a method called bio, print, bio.

92
00:05:28,280 --> 00:05:32,720
And what I want it to do is get the full name from full name.

93
00:05:32,960 --> 00:05:36,950
So we'll call this method and then print something else we'll do.

94
00:05:36,950 --> 00:05:42,890
Like Sherilyn Sarkeesian, aka Cher is a person that will be the bio.

95
00:05:43,040 --> 00:05:47,120
So I'm going to change this to return instead of console.log.

96
00:05:47,780 --> 00:05:53,720
So we now return that string and then instead of print bio, I can call this full name.

97
00:05:54,560 --> 00:05:56,290
I just have to use this.

98
00:05:56,300 --> 00:05:59,480
If I just called full name, it would not work.

99
00:05:59,510 --> 00:06:00,740
We need this.

100
00:06:00,740 --> 00:06:01,940
If I tried it.

101
00:06:02,540 --> 00:06:06,080
If I call print bio person, print bio.

102
00:06:07,600 --> 00:06:08,410
Reference error.

103
00:06:08,440 --> 00:06:13,300
Full name is not defined, so we have to use this to reference the object.

104
00:06:13,570 --> 00:06:15,250
I'm going to save that to a variable.

105
00:06:15,250 --> 00:06:16,600
We'll call it full name.

106
00:06:17,970 --> 00:06:20,940
Then I will console.log from here.

107
00:06:21,800 --> 00:06:22,550
Just put.

108
00:06:22,880 --> 00:06:24,260
Let's do a template string.

109
00:06:24,800 --> 00:06:29,630
Put full name in there and then is a person and that's the entire bio.

110
00:06:30,470 --> 00:06:32,120
So we'll try running it again.

111
00:06:32,120 --> 00:06:39,830
And now we get Sherilyn Sarkeesian a.k.a there is a person, so we called a method that is located within

112
00:06:39,830 --> 00:06:41,660
the same object using this.

113
00:06:41,990 --> 00:06:48,800
In that method we actually accessed three different properties first last a nickname using this using

114
00:06:48,800 --> 00:06:50,510
D structuring to make it cleaner.

115
00:06:50,510 --> 00:06:52,670
But we're still referencing this.

116
00:06:52,910 --> 00:06:59,390
The value of this in both of these situations here, both methods is referring to the object that they

117
00:06:59,390 --> 00:06:59,840
live in.

118
00:06:59,840 --> 00:07:00,680
And that's a great tool.

119
00:07:00,680 --> 00:07:02,390
It's a great thing to be able to reference.

120
00:07:02,390 --> 00:07:06,620
And you'll see a couple of examples, as I mentioned, as we finish up this section.

121
00:07:06,620 --> 00:07:09,890
But of course, there's a bit of a twist here in the next video.

122
00:07:09,890 --> 00:07:15,620
You'll see that sometimes this may not refer to the object, it could refer to something else.

