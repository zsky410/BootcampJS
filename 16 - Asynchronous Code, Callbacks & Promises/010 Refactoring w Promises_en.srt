1
00:00:00,120 --> 00:00:05,880
Now that we're relatively comfortable with promises, let's try and refactor this little demo from earlier

2
00:00:05,880 --> 00:00:11,790
where we had a button that was moving and eventually running out of room potentially and stopping.

3
00:00:11,790 --> 00:00:18,480
So if we can't go further, if we can't go whatever, 200, 300 pixels, whatever the jump was, let's

4
00:00:18,480 --> 00:00:18,720
see.

5
00:00:18,720 --> 00:00:20,490
I think it was 300 pixels.

6
00:00:20,640 --> 00:00:21,000
Yeah.

7
00:00:21,000 --> 00:00:26,700
So if we can't go another 300 pixels, it stops and we achieve this by using a bunch of set timeouts

8
00:00:26,700 --> 00:00:30,570
and then changing the transform property of the button.

9
00:00:30,660 --> 00:00:35,820
But every time in that set timeout we would check, do we have room to move?

10
00:00:35,820 --> 00:00:41,400
If we don't have room to move, we would call one callback that was passed in the on failure callback.

11
00:00:41,400 --> 00:00:46,890
If we did have room to move, we called the on success callback, so we ended up passing two callbacks

12
00:00:46,890 --> 00:00:54,780
in every time we call Move X and if we wanted the first one to complete the first move of 300 pixels

13
00:00:54,780 --> 00:01:00,300
before the second one started, we have to use these callbacks with the way that we've set it up without

14
00:01:00,300 --> 00:01:01,110
promises.

15
00:01:01,110 --> 00:01:02,580
It's a bunch of nesting.

16
00:01:02,610 --> 00:01:04,840
A bunch I mean, a whole bunch, as we saw.

17
00:01:05,190 --> 00:01:06,630
Very, very painful.

18
00:01:06,780 --> 00:01:09,570
So let's rewrite this using promises.

19
00:01:09,870 --> 00:01:13,410
I'll comment this out so we don't get the original movement going on.

20
00:01:14,070 --> 00:01:20,490
And I'll also duplicate this and comment it out, and then I guess I'll do it at the top here.

21
00:01:22,140 --> 00:01:24,210
We're going to refactor, move x.

22
00:01:24,570 --> 00:01:29,370
It's going to no longer accept an on success and success and on failure.

23
00:01:29,970 --> 00:01:33,480
It's going to instead return a new promise.

24
00:01:34,590 --> 00:01:42,150
Remember, this promise takes a function as its argument, resolve and reject, which are also two functions.

25
00:01:43,350 --> 00:01:48,270
And then we can move this logic from before into our promise.

26
00:01:48,840 --> 00:01:49,440
What is it called?

27
00:01:49,440 --> 00:01:50,730
Execute or function?

28
00:01:50,730 --> 00:01:51,810
Maybe I'm making that up.

29
00:01:51,810 --> 00:01:53,400
I'm pretty sure that's what it's called.

30
00:01:53,400 --> 00:01:56,010
But inside of this new promise function.

31
00:01:56,580 --> 00:02:01,230
So instead of calling on failure, we would reject the promise.

32
00:02:01,230 --> 00:02:04,980
If we can't move, we're calculating the end of the body.

33
00:02:05,010 --> 00:02:05,670
How much?

34
00:02:05,670 --> 00:02:08,880
How many pixels we have, let's say 900 pixels or something.

35
00:02:09,150 --> 00:02:16,110
Or actually we can see it's telling me I'm at, what, 1225 pixels, then we're calculating the right

36
00:02:16,110 --> 00:02:22,290
of the button and then the current left of the button, which we use if we are going to move and we

37
00:02:22,290 --> 00:02:27,990
want to check if the right whatever, let's say 800 pixels plus the amount we're trying to move, 300

38
00:02:27,990 --> 00:02:33,840
pixels, if that is greater than the boundary will reject meaning stop.

39
00:02:33,840 --> 00:02:36,660
We're not going to continue otherwise.

40
00:02:36,840 --> 00:02:40,890
Instead of on success, we'll call resolve.

41
00:02:42,300 --> 00:02:47,730
So very similar code except we've wrapped it in a promise that we're returning and we're not using.

42
00:02:47,730 --> 00:02:50,280
We're not passing in to callbacks every single time.

43
00:02:50,640 --> 00:02:52,560
So now how would we use this?

44
00:02:53,430 --> 00:02:54,450
It would look like this.

45
00:02:54,450 --> 00:03:06,000
Move X of button, let's do 300 pixels and the delay of 1/2 dot then and we're not passing any value

46
00:03:06,000 --> 00:03:08,730
in when we are rejecting or resolving.

47
00:03:08,850 --> 00:03:12,840
We could possibly maybe when we reject we could include a reason.

48
00:03:12,840 --> 00:03:18,090
We could include the maybe the current position of the element.

49
00:03:18,090 --> 00:03:19,320
We could do something with it.

50
00:03:19,320 --> 00:03:28,650
And then we've got our dot, then why don't we just cancel that log done moving and start there.

51
00:03:29,430 --> 00:03:31,350
So I'm going to refresh the page.

52
00:03:31,800 --> 00:03:33,930
It moves and we get done moving.

53
00:03:35,040 --> 00:03:42,180
Okay, so if we wanted another move X after that first one like we had before we moved 300 pixels,

54
00:03:42,180 --> 00:03:48,360
we move 300 pixels again 1/2 later, we don't have to nest it.

55
00:03:48,390 --> 00:03:51,330
All we need to do is call move x again.

56
00:03:51,930 --> 00:03:56,910
Move x button 300 pixels over 1/2, not 2 seconds.

57
00:03:57,930 --> 00:04:04,890
And if I wanted another dot, then yes, you could do this, put it inside the existing dot, then callback,

58
00:04:04,890 --> 00:04:08,220
or we just return this promise.

59
00:04:08,220 --> 00:04:11,970
This gives us a promise now, which is what we saw in the last video.

60
00:04:11,970 --> 00:04:17,399
We can change promises and I can put another then here and now I can console.log.

61
00:04:17,399 --> 00:04:18,029
Done.

62
00:04:18,720 --> 00:04:21,420
Done with both.

63
00:04:23,390 --> 00:04:23,660
Okay.

64
00:04:23,960 --> 00:04:28,850
So we do the first thing that takes some time when it finishes, when that 1/2 is over, the button

65
00:04:28,850 --> 00:04:34,460
has moved, assuming it has room, which it showed we're only going 300 pixels, then we're going to

66
00:04:34,460 --> 00:04:36,920
move x again, which will return a promise.

67
00:04:36,920 --> 00:04:42,710
It may or may not be completed or resolved depending on if we have the correct number of pixels, the

68
00:04:42,710 --> 00:04:44,210
correct space to keep moving.

69
00:04:44,210 --> 00:04:46,970
And if we do this, then we'll run.

70
00:04:47,420 --> 00:04:52,580
We don't have a catch yet, but this should be good because we're only moving 600 total and then we

71
00:04:52,580 --> 00:04:53,690
get done with both.

72
00:04:53,690 --> 00:04:58,580
So that only prints out after two move x functions are done.

73
00:04:58,580 --> 00:05:00,740
Both promises have been resolved.

74
00:05:01,490 --> 00:05:07,160
So now if we wanted to do like five of them, all we need to do is duplicate this a couple of times.

75
00:05:07,940 --> 00:05:11,230
So now we're moving four times first 300 pixels.

76
00:05:11,240 --> 00:05:15,620
It takes a second as soon as it's done, but not sooner as soon as it's done.

77
00:05:15,620 --> 00:05:21,980
Then this runs and then as soon as that finishes and hopefully is resolved, this runs, then this runs.

78
00:05:21,980 --> 00:05:25,220
We don't have a catch yet, so we may run out of space.

79
00:05:25,220 --> 00:05:25,750
300.

80
00:05:25,820 --> 00:05:26,660
300.

81
00:05:26,930 --> 00:05:28,130
Are we out of space now?

82
00:05:28,280 --> 00:05:30,050
Yes, uncut.

83
00:05:30,860 --> 00:05:34,250
So we had a rejected promise, but we didn't catch it.

84
00:05:34,400 --> 00:05:41,180
And as we saw, all we need is one catch and we'll console.log.

85
00:05:41,390 --> 00:05:43,790
Now let's do console.log.

86
00:05:43,970 --> 00:05:47,720
Out of space cannot move.

87
00:05:50,570 --> 00:05:53,480
And we should see one more time.

88
00:05:53,630 --> 00:05:54,470
Here we go.

89
00:05:54,500 --> 00:05:56,150
Outer space cannot move.

90
00:05:56,600 --> 00:05:58,150
And if I instead changed it.

91
00:05:58,160 --> 00:05:59,700
So we're trying to move.

92
00:05:59,720 --> 00:06:05,020
Like, I don't know, 3000 pixels on the third move x.

93
00:06:05,330 --> 00:06:07,570
We'll still have the same catch work.

94
00:06:07,580 --> 00:06:09,800
It will catch that promise which is rejected.

95
00:06:09,840 --> 00:06:10,820
We'll catch the error.

96
00:06:11,660 --> 00:06:13,370
So let's try that.

97
00:06:13,550 --> 00:06:17,290
First jump, second jump, third jump can't happen.

98
00:06:17,300 --> 00:06:19,000
Outer space cannot move.

99
00:06:19,010 --> 00:06:26,810
Now it's really cool is in situations like this where all we're doing in the end callback is returning

100
00:06:26,810 --> 00:06:27,920
another promise.

101
00:06:28,220 --> 00:06:31,280
We can shorten it up as we've seen with arrow functions.

102
00:06:31,280 --> 00:06:36,860
If you do choose to use arrow functions, if you are returning something and it's the only expression,

103
00:06:36,860 --> 00:06:39,830
the only line, you can use an implicit return.

104
00:06:40,070 --> 00:06:41,480
So you could use parentheses.

105
00:06:41,480 --> 00:06:43,910
We don't have to write the return keyword.

106
00:06:43,910 --> 00:06:51,020
I can just do this right here, just like that, and we can chain them together.

107
00:06:51,020 --> 00:06:54,560
So I'm just going to replace what I have with a couple of these.

108
00:06:56,360 --> 00:07:00,290
Let's do five of them and keep our one catch.

109
00:07:00,290 --> 00:07:06,380
So this only works to make it super concise and just nice and not a bunch of curly braces that only

110
00:07:06,380 --> 00:07:10,670
works if there's only one expression and it should be returned implicitly.

111
00:07:10,670 --> 00:07:13,220
So we don't right return, but it's being returned.

112
00:07:13,220 --> 00:07:16,280
If you need some review on that, check out the arrow function section.

113
00:07:17,510 --> 00:07:19,610
So let's check it out.

114
00:07:21,550 --> 00:07:25,420
First move, second move, third, fourth.

115
00:07:25,840 --> 00:07:27,400
And then we run out of space.

116
00:07:28,570 --> 00:07:29,350
Awesome.

117
00:07:29,530 --> 00:07:34,150
So I could change this to be at 100 pixels and do this a whole bunch.

118
00:07:36,480 --> 00:07:38,160
Let's see when we run out of space.

119
00:07:38,520 --> 00:07:39,540
One more time.

120
00:07:41,220 --> 00:07:43,210
That's still I guess we're moving 300.

121
00:07:43,230 --> 00:07:44,250
The very first time.

122
00:07:45,180 --> 00:07:46,440
I didn't change that one.

123
00:07:46,950 --> 00:07:49,650
And now we're out of space.

124
00:07:50,040 --> 00:07:51,390
Pretty cool stuff, I think.

125
00:07:51,540 --> 00:07:54,990
It's a really nice, nice way of shortening your code up and making it.

126
00:07:55,020 --> 00:07:56,250
It's not even about shortening it.

127
00:07:56,250 --> 00:07:59,160
It's making it just easier to follow if we compare.

128
00:07:59,370 --> 00:08:00,990
This is a huge mess.

129
00:08:01,680 --> 00:08:04,980
Not only is it nested, but we had to pass in two callbacks.

130
00:08:05,400 --> 00:08:08,520
So we get this ugly like I don't know what to call this.

131
00:08:08,520 --> 00:08:12,090
Like a triangle, a pyramid, mirror, image, the reflection.

132
00:08:12,090 --> 00:08:17,820
There we go of all of these callbacks, even if they're doing the same thing, the failure callback

133
00:08:17,850 --> 00:08:21,120
here, we just need a single catch and it does a trick.

134
00:08:21,120 --> 00:08:26,460
So the last thing we could do is refactor this a bit so our sketch could actually know.

135
00:08:26,460 --> 00:08:32,120
This callback could know where it was stopped, why we didn't keep moving to the right.

136
00:08:32,130 --> 00:08:36,990
Basically, we know we're out of room, but we could print out you.

137
00:08:36,990 --> 00:08:42,750
The button is currently at 500 pixels and you tried to move 300, but the body is X or who knows?

138
00:08:42,980 --> 00:08:51,540
We could just make a little object when we reject that included, let's say, the body boundary and

139
00:08:51,540 --> 00:08:52,800
I'll just use the shorthand here.

140
00:08:52,800 --> 00:08:57,510
So body boundary will be the key and whatever it holds will be the value.

141
00:08:57,630 --> 00:09:00,270
Let's also add in the element, right, and the amount.

142
00:09:00,270 --> 00:09:04,650
So we'll have three different properties that we are passing through when we reject.

143
00:09:04,650 --> 00:09:10,240
Then down here when we catch, we can just add in our object, we'll just call this, you can call it

144
00:09:10,290 --> 00:09:12,030
error, but it's not really an error.

145
00:09:12,030 --> 00:09:16,650
We'll call it data as a parameter and let's grab.

146
00:09:16,650 --> 00:09:23,580
We could just structure actually if we want body boundary, we want a mount.

147
00:09:23,580 --> 00:09:24,990
And what else was there?

148
00:09:25,500 --> 00:09:29,340
LL Right, so we can console.log.

149
00:09:29,340 --> 00:09:38,820
Something like body is let's do a template, literal string template literal body is body boundary.

150
00:09:40,980 --> 00:09:52,850
P wide and then below that console.log, let's say element is at L right p x.

151
00:09:54,340 --> 00:10:06,220
Comma and then we'll display the amount x is too large, so we reject with that information rather than

152
00:10:06,220 --> 00:10:10,390
just blindly or always printing out outer space cannot move.

153
00:10:10,840 --> 00:10:14,470
Let's see what happens when we finally hit that catch.

154
00:10:14,620 --> 00:10:15,340
Oh, I forgot.

155
00:10:15,340 --> 00:10:19,090
I did all these 100 pixel little tiny jumps.

156
00:10:19,130 --> 00:10:20,110
Okay, here we go.

157
00:10:20,620 --> 00:10:22,900
Body is 1354 pixels.

158
00:10:22,900 --> 00:10:25,600
Element is at 1297.

159
00:10:25,630 --> 00:10:32,200
100 pixels is too large because that would take us to 1397 and that's pretty much it.

160
00:10:32,350 --> 00:10:34,300
So still a very simple example.

161
00:10:34,300 --> 00:10:39,100
Not the most useful thing to do ever, but you can see what a massive difference is made.

162
00:10:39,100 --> 00:10:45,550
I mean, we're doing, what, ten, 15 different calls to move X and they're happening one after another

163
00:10:45,550 --> 00:10:50,140
and all of them are handled if something goes wrong, if they fail, we don't have room.

164
00:10:50,260 --> 00:10:51,940
This catches all of them.

165
00:10:52,330 --> 00:10:53,560
Compare that to this.

166
00:10:53,560 --> 00:10:59,080
This is only five or so different move x calls if we wanted to replicate this.

167
00:10:59,350 --> 00:11:01,510
I mean, I would I would be here forever.

168
00:11:01,510 --> 00:11:05,230
We would have at least twice as much code as we have right now.

169
00:11:05,230 --> 00:11:08,020
And it would be incredibly nested and hard to keep track of.

170
00:11:08,410 --> 00:11:10,750
So that is a real value of promises.

171
00:11:10,750 --> 00:11:15,520
It's not just about doing asynchronous things and being able to run some code afterwards.

172
00:11:15,610 --> 00:11:21,970
It's also about being able to catch any time a promise is rejected, having a single catch, it makes

173
00:11:21,970 --> 00:11:22,930
a huge difference.

174
00:11:22,930 --> 00:11:28,510
We don't have to have ten or 20 different catches, one per each, then for each promise.

175
00:11:28,510 --> 00:11:33,850
As long as we return a promise in the dot, then, which is what we're doing thanks to an implicit arrow

176
00:11:33,850 --> 00:11:34,810
function return.

177
00:11:35,200 --> 00:11:41,470
All right, so we're now moving on from our sort of playland promises where we're doing very, very

178
00:11:41,470 --> 00:11:42,760
trivial, simple things.

179
00:11:42,760 --> 00:11:47,380
And next, we'll move on to making real HTTP requests and use promises.

180
00:11:47,380 --> 00:11:49,960
Those functions, those methods return promises.

181
00:11:49,960 --> 00:11:53,050
So we'll get practice with all this fun stuff that we've seen so far.

