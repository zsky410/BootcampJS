1
00:00:00,090 --> 00:00:00,480
All right.

2
00:00:00,480 --> 00:00:01,170
Welcome back.

3
00:00:01,200 --> 00:00:04,580
So we saw why callbacks are so important in JavaScript.

4
00:00:04,590 --> 00:00:11,280
We passed a callback in to certain functions that the browser takes over things like set timeout, set

5
00:00:11,280 --> 00:00:12,090
interval.

6
00:00:12,120 --> 00:00:16,190
Also, when we make requests different ways of making requests we haven't really covered yet.

7
00:00:16,200 --> 00:00:19,350
The browser takes care of that and we pass in a callback.

8
00:00:19,740 --> 00:00:22,240
But callbacks are not perfect.

9
00:00:22,260 --> 00:00:25,430
They can get messy very quickly, which is what I want to show you here.

10
00:00:25,440 --> 00:00:29,670
I'm going to show you a way of doing something with callbacks, and then we'll see how to refactor it

11
00:00:29,670 --> 00:00:30,690
using promises.

12
00:00:30,690 --> 00:00:34,170
So this is finally the ramp up to promises.

13
00:00:34,200 --> 00:00:39,990
Let's write a simple function that will take a number of pixels and move our button over that number

14
00:00:39,990 --> 00:00:43,320
of pixels, and it will do it after a delay.

15
00:00:43,320 --> 00:00:47,460
So we could do like after a second, move it after another second, move it and so on.

16
00:00:47,730 --> 00:00:49,590
So I'm going to start by selecting the button.

17
00:00:49,590 --> 00:00:51,120
It's the only button on the page.

18
00:00:51,120 --> 00:00:57,210
So const BTN equals document, query, selector button.

19
00:00:57,210 --> 00:01:00,540
Then all we're going to do is change button style.

20
00:01:00,540 --> 00:01:02,550
I'll do it with Transform this time.

21
00:01:02,550 --> 00:01:08,340
I think a couple at some point in the course I did button that style that left in top, which is not

22
00:01:08,340 --> 00:01:12,510
really the most performant way of changing position or moving an element around.

23
00:01:12,510 --> 00:01:13,710
Transform is better.

24
00:01:15,000 --> 00:01:18,720
And if you're curious why I have a YouTube video, you can check out on it.

25
00:01:18,750 --> 00:01:21,490
It's called the only two CSS properties you Should Animate.

26
00:01:21,510 --> 00:01:25,890
The short story is that when you transform something, it happens much later.

27
00:01:26,010 --> 00:01:31,080
In the browser's rendering process, it's much easier for the browser to move something via transform

28
00:01:31,080 --> 00:01:36,390
rather than changing left, which causes a render of a lot of different things anyway.

29
00:01:36,390 --> 00:01:37,890
So I'm just going to do this.

30
00:01:37,890 --> 00:01:38,970
We'll move it left to right.

31
00:01:38,970 --> 00:01:45,480
So I'll just do translate X and pass in a number like 100 pixels and let's just make sure it's moving.

32
00:01:45,960 --> 00:01:46,500
Okay.

33
00:01:46,680 --> 00:01:49,740
So now I want to do this inside of a set timeout.

34
00:01:49,740 --> 00:01:52,380
So it only happens after, let's say 1/2.

35
00:01:52,380 --> 00:01:56,160
So set timeout and then I'll pass in a function.

36
00:01:56,160 --> 00:01:57,570
Just do an arrow function here.

37
00:01:58,830 --> 00:02:03,810
My duration will be 1000 milliseconds and I'll move this right there.

38
00:02:04,650 --> 00:02:08,850
So now I refresh, it should start on the left and then 1/2 later it moves.

39
00:02:09,090 --> 00:02:10,169
That works great.

40
00:02:10,440 --> 00:02:16,590
Now, if I wanted to wait another second and then move again, maybe 200 pixels this time or some other

41
00:02:16,590 --> 00:02:19,290
number, I would need to nest that function.

42
00:02:19,290 --> 00:02:22,740
Call the set timeout inside of this set timeout.

43
00:02:22,950 --> 00:02:27,870
Otherwise if I just have a second set timeout, I mean, I guess you could do this and just keep track

44
00:02:27,870 --> 00:02:30,450
of the number of seconds, but this is not ideal.

45
00:02:30,840 --> 00:02:34,380
We'll see an expanded version of what we're doing now or this wouldn't work.

46
00:02:34,380 --> 00:02:39,540
But yes, technically, if you want this to run after 1/2 and this to run a second later, you could

47
00:02:39,540 --> 00:02:42,750
do 2000 milliseconds, but we're not going to do that.

48
00:02:42,750 --> 00:02:49,050
So in here we add another set timeout, same thing we add in our callback, our duration.

49
00:02:49,050 --> 00:02:53,730
Let's do 1000 seconds or let's do 2000 milliseconds.

50
00:02:53,730 --> 00:03:01,170
So 2 seconds and then this same line, I'll just duplicate it and I need to change what we're translating

51
00:03:01,170 --> 00:03:01,770
it to.

52
00:03:02,040 --> 00:03:03,990
Let's do 200 pixels.

53
00:03:03,990 --> 00:03:06,420
So I'll refresh the second.

54
00:03:06,420 --> 00:03:08,130
It moves another 2 seconds.

55
00:03:08,130 --> 00:03:09,120
It should move again.

56
00:03:09,810 --> 00:03:10,470
Cool.

57
00:03:10,470 --> 00:03:12,270
And I could keep duplicating this.

58
00:03:12,270 --> 00:03:17,700
I just have to keep nesting if I want to make sure that this is happening after this happens.

59
00:03:17,700 --> 00:03:21,300
So we have our first set timeout for 1000 milliseconds.

60
00:03:21,390 --> 00:03:26,550
It does this and then as soon as that happens, it sets another timeout for 2000 milliseconds.

61
00:03:26,550 --> 00:03:29,460
And then again, let's just do 1000 for each of these.

62
00:03:29,460 --> 00:03:31,440
Let's translate 300 pixels.

63
00:03:32,160 --> 00:03:37,230
This isn't so bad because it's such a short thing that we're doing, but it is a lot of nesting.

64
00:03:37,230 --> 00:03:41,070
To achieve this, let's go five levels deep.

65
00:03:41,460 --> 00:03:44,010
Okay, so now I have five different set timeouts.

66
00:03:44,010 --> 00:03:44,580
All of them.

67
00:03:44,580 --> 00:03:45,750
1/2 long.

68
00:03:45,750 --> 00:03:46,470
Let's go.

69
00:03:46,470 --> 00:03:50,460
One, two, three, 400 pixels and 500 pixels.

70
00:03:50,460 --> 00:03:51,810
Let's check it out.

71
00:03:52,470 --> 00:03:56,970
It should move across the screen 100 pixels at a time, 1/2 at a time.

72
00:03:57,720 --> 00:03:58,200
Okay.

73
00:03:58,680 --> 00:04:01,200
So this is relatively readable.

74
00:04:01,200 --> 00:04:02,340
It's not too bad.

75
00:04:02,340 --> 00:04:04,830
It's kind of obnoxious to have to keep nesting them.

76
00:04:04,830 --> 00:04:08,910
But that's not this is not as bad as it will get, let's put it that way.

77
00:04:09,150 --> 00:04:13,620
So if I want to rewrite this as a function, I'm doing kind of the same thing every time.

78
00:04:13,800 --> 00:04:16,500
If I want to make this a separate function, I could call.

79
00:04:17,010 --> 00:04:21,990
What I need to do is first define my function and come up with a reasonable name.

80
00:04:21,990 --> 00:04:25,500
Let's call this move left.

81
00:04:25,650 --> 00:04:27,030
No, move right.

82
00:04:27,060 --> 00:04:30,690
I would just move X because then we could pass in a negative number to go the other direction.

83
00:04:31,740 --> 00:04:34,230
We'll do element the thing that is moving.

84
00:04:34,230 --> 00:04:38,370
So our button an amount and then a delay.

85
00:04:39,570 --> 00:04:41,610
And then we'll do a set timeout.

86
00:04:42,450 --> 00:04:46,440
And then in here our function, we'll put the delay right here.

87
00:04:47,130 --> 00:04:50,070
So that will be some number we passed in like 1000.

88
00:04:50,070 --> 00:04:57,060
And then instead of buttons, that style that transform it will be element style, dot transform equals

89
00:04:57,060 --> 00:04:58,140
and then a string.

90
00:04:58,140 --> 00:05:08,280
I'll do a string template literal translate X and then I'll put in my amount that was passed in and

91
00:05:08,280 --> 00:05:11,820
then follow it by pixels just like that.

92
00:05:12,660 --> 00:05:20,630
So if I comment this out and I just call this one time, move X of button, let's go with 600 pixels.

93
00:05:20,630 --> 00:05:23,580
So 600 and after 2 seconds.

94
00:05:23,610 --> 00:05:24,780
Let's see if it works.

95
00:05:26,560 --> 00:05:28,190
So 2 seconds go by.

96
00:05:28,370 --> 00:05:29,650
Okay, it does move.

97
00:05:30,130 --> 00:05:31,330
Now, here's the tricky part.

98
00:05:31,330 --> 00:05:38,050
If I want to then replicate this behavior where we could have something happen after this or after the

99
00:05:38,050 --> 00:05:43,580
delay immediately after we change the transform, I want another set timeout.

100
00:05:43,600 --> 00:05:46,360
It doesn't really help me if I just manually set it here.

101
00:05:46,510 --> 00:05:53,410
What we would do instead is pass in a callback, so we would write our function to accept a callback.

102
00:05:53,800 --> 00:05:55,540
We could call it callback.

103
00:05:55,720 --> 00:06:01,120
And then all we do is execute that callback function inside the set timeout.

104
00:06:01,150 --> 00:06:05,640
After we do this, we call the callback same idea that we have here.

105
00:06:05,650 --> 00:06:08,830
But now what we need to do is pass in a callback.

106
00:06:09,130 --> 00:06:10,960
So we would pass in a function.

107
00:06:10,960 --> 00:06:12,220
I'll do an arrow function.

108
00:06:12,460 --> 00:06:13,030
Whoops.

109
00:06:14,540 --> 00:06:15,350
Like this.

110
00:06:15,830 --> 00:06:19,300
And we'll just call move x again button.

111
00:06:19,310 --> 00:06:21,080
Let's go 100 pixels.

112
00:06:21,080 --> 00:06:22,940
This time we'll replicate the same behavior.

113
00:06:22,940 --> 00:06:28,430
So 1/2, another 200 pixels after 1/2.

114
00:06:28,430 --> 00:06:29,810
Let's just see if that works.

115
00:06:30,080 --> 00:06:35,540
We will run into an issue with what I have here because I haven't passed it in a callback so we could

116
00:06:35,540 --> 00:06:37,970
do something simple like if callback

117
00:06:40,370 --> 00:06:42,110
and let's see what happens.

118
00:06:45,700 --> 00:06:47,440
It appears to work right.

119
00:06:50,560 --> 00:06:56,470
So we did 100 pixels and then 200 pixels after a second and we could pass in yet another callback if

120
00:06:56,470 --> 00:06:59,020
we want to continue to change chain these.

121
00:06:59,020 --> 00:07:01,330
So move x button.

122
00:07:02,050 --> 00:07:14,020
Let's go for 300 pixels 1/2 and let's actually do four or five levels button and then 400 pixels, 1000

123
00:07:14,020 --> 00:07:19,450
milliseconds and one last one move x button.

124
00:07:19,870 --> 00:07:24,280
500 pixels, 1000 milliseconds, no callback.

125
00:07:26,840 --> 00:07:27,710
Here we go.

126
00:07:27,800 --> 00:07:28,490
There we go.

127
00:07:28,490 --> 00:07:29,390
Keep moving.

128
00:07:30,990 --> 00:07:31,650
Awesome.

129
00:07:32,080 --> 00:07:37,500
Okay, so we wrote a function here that accepts a callback and a delay.

130
00:07:37,530 --> 00:07:41,310
It does something after that delay inside the set timeout.

131
00:07:41,550 --> 00:07:43,380
That delay is variable right now.

132
00:07:43,380 --> 00:07:45,980
They're all the same, and then it executes a callback.

133
00:07:45,990 --> 00:07:49,500
If we pass one in and our callbacks are these arrow functions.

134
00:07:49,500 --> 00:07:53,880
So this is one callback, this entire thing here, from here.

135
00:07:53,880 --> 00:07:56,610
From this curly brace to this curly brace.

136
00:07:56,640 --> 00:07:57,300
Nope.

137
00:07:57,330 --> 00:07:58,140
This curly brace.

138
00:07:58,140 --> 00:07:59,490
To this curly brace.

139
00:07:59,580 --> 00:08:02,860
That is the callback for this first move x.

140
00:08:02,910 --> 00:08:09,180
So this entire thing from this yellow curly brace down to here is the first callback for move x.

141
00:08:09,180 --> 00:08:10,820
The first time we call move x.

142
00:08:10,830 --> 00:08:14,310
That function, call those per ends go all the way down.

143
00:08:14,490 --> 00:08:14,880
Right.

144
00:08:14,880 --> 00:08:21,000
This is our initial function call and then we have our callback in there and then that itself calls

145
00:08:21,000 --> 00:08:24,180
move x and then that has a massive callback.

146
00:08:24,360 --> 00:08:28,710
All this nesting, it's still not that horrible because we're just doing one thing.

147
00:08:28,710 --> 00:08:33,240
Each time you can look at it, it makes it clear you're doing this, then this, then this.

148
00:08:33,240 --> 00:08:35,700
But here's where it's going to get trickier.

149
00:08:36,090 --> 00:08:42,630
Let's rewrite our function so that we check if the element is going to go off the screen.

150
00:08:42,750 --> 00:08:48,870
And if it does go off the screen, we can do something else, maybe reverse it or just console.log or

151
00:08:48,870 --> 00:08:49,730
just stop.

152
00:08:49,740 --> 00:08:51,060
We won't do anything.

153
00:08:51,060 --> 00:08:52,800
And this is a really common pattern.

154
00:08:52,800 --> 00:08:58,530
When we're working with asynchronous code, often we'll send, let's say, an HTTP request.

155
00:08:58,740 --> 00:09:01,320
The term is request for a reason.

156
00:09:01,320 --> 00:09:02,670
We're attempting something.

157
00:09:02,670 --> 00:09:04,350
We're asking for a web page.

158
00:09:04,350 --> 00:09:08,550
We may get some successful response or the server might be down.

159
00:09:08,550 --> 00:09:10,290
We might have an invalid URL.

160
00:09:10,320 --> 00:09:12,930
Your Internet might be down at home or on the computer.

161
00:09:12,960 --> 00:09:14,370
So it's a request.

162
00:09:14,370 --> 00:09:19,500
And that request, let's just say this was the name of a function to make a request whoops out of complete

163
00:09:19,500 --> 00:09:19,980
there.

164
00:09:20,100 --> 00:09:28,020
That request will accept two callbacks, a success callback and a failure callback so you can have two

165
00:09:28,020 --> 00:09:30,410
different branches if the request works out.

166
00:09:30,420 --> 00:09:31,950
Here's the code that runs.

167
00:09:31,950 --> 00:09:37,650
If the request does not work, here is the code that runs the code to handle an error, for example.

168
00:09:38,220 --> 00:09:44,200
So why don't we mimic that functionality here for move x instead of just moving no matter what?

169
00:09:44,220 --> 00:09:50,700
Let's check if we are going to move off the screen and if that's the case, we won't do this.

170
00:09:50,700 --> 00:09:54,690
We won't call the callback, we won't move further, we'll do something else.

171
00:09:54,690 --> 00:09:59,100
We'll pass in a potential fallback or an error callback.

172
00:09:59,310 --> 00:10:00,990
So I'm going to rewrite this here.

173
00:10:00,990 --> 00:10:05,910
The logic to check if we're moving off the screen is not that important to what I'm showing you here.

174
00:10:05,910 --> 00:10:13,500
But basically we want to get the width of the screen document up, body dot, client width and we'll

175
00:10:13,500 --> 00:10:20,670
save this to a variable, let's call it const boundary, body boundary or something.

176
00:10:21,360 --> 00:10:24,030
Then I'll show you a new method we haven't seen before.

177
00:10:24,540 --> 00:10:29,490
There is something called get bounding client rect.

178
00:10:31,140 --> 00:10:32,970
Let's test it out first in the browser.

179
00:10:32,970 --> 00:10:34,410
So I have a button right here.

180
00:10:34,650 --> 00:10:35,610
It's moved already.

181
00:10:35,610 --> 00:10:44,430
I won't refresh the page if I call up that button variable and I call them zoom in here button get bounding

182
00:10:44,430 --> 00:10:48,870
client rect which is a method for rectangle rect get rect.

183
00:10:48,990 --> 00:10:49,980
Here we go.

184
00:10:50,070 --> 00:10:51,690
It returns this object.

185
00:10:51,690 --> 00:10:57,780
It's called a dom rect and dom rectangle and it tells us information about this element so we can see

186
00:10:57,780 --> 00:11:01,500
it's width 225 pixels 0.875.

187
00:11:01,590 --> 00:11:04,260
We can see its right let's see.

188
00:11:04,260 --> 00:11:06,580
733 is that correct?

189
00:11:06,600 --> 00:11:08,730
Let's try moving it further.

190
00:11:08,760 --> 00:11:10,230
So let's do the same thing.

191
00:11:10,230 --> 00:11:14,970
Why don't we on our last step, why don't we move 600 pixels over?

192
00:11:15,420 --> 00:11:19,980
So instead of 400 we should be 600 or instead of 500, I mean, we'll go 600.

193
00:11:19,980 --> 00:11:23,100
So currently it's at seven 33.875.

194
00:11:23,100 --> 00:11:27,360
If we refresh and let it let it do its thing, just wait here.

195
00:11:27,360 --> 00:11:28,350
Kill some time.

196
00:11:28,800 --> 00:11:31,620
Let's see what we get now for the right.

197
00:11:31,860 --> 00:11:35,670
The right is now 833.875.

198
00:11:35,670 --> 00:11:43,170
And if we call move x again button, we'll move 800 pixels and let's 1/2 is fine.

199
00:11:43,170 --> 00:11:45,990
No callback we wait 1/2.

200
00:11:46,020 --> 00:11:54,660
Now let's look at our get bounding client rect right is 1033 and what is our entire width right now

201
00:11:54,660 --> 00:12:04,290
of the body document dot body dot clients width not height but with 1132.

202
00:12:04,920 --> 00:12:06,030
So we're close.

203
00:12:06,060 --> 00:12:08,940
What we want to do is compare those to the right.

204
00:12:09,120 --> 00:12:12,390
If we're going to the right, at least we're just worrying about moving to the right.

205
00:12:12,390 --> 00:12:18,570
So we'll check if the right is greater than or equal to this boundary here, which we already have document

206
00:12:18,570 --> 00:12:24,120
dot, body, client width, and that will change depending on the screen and if I have the console open.

207
00:12:24,120 --> 00:12:26,940
So it's not just the dimensions of the screen itself.

208
00:12:27,000 --> 00:12:28,380
We've seen this before.

209
00:12:28,800 --> 00:12:30,390
Client width is going to update.

210
00:12:31,240 --> 00:12:31,750
Okay.

211
00:12:31,750 --> 00:12:37,270
So let's grab that variable, get bounding client rect and we want dot.

212
00:12:37,270 --> 00:12:38,080
Right?

213
00:12:38,080 --> 00:12:42,280
So let's save this const L right element.

214
00:12:42,280 --> 00:12:42,880
Right.

215
00:12:42,880 --> 00:12:49,060
And let's rewrite our function before we go any further so that we don't have to pass in this absolute

216
00:12:49,060 --> 00:12:49,720
number.

217
00:12:49,720 --> 00:12:52,860
For example, 100, then 200 and 304 hundred.

218
00:12:52,870 --> 00:12:57,850
What if I could just say move 100 and then another 100, then another 100.

219
00:12:57,850 --> 00:13:02,740
And this would put us at 300 pixels to the right of the initial position.

220
00:13:03,010 --> 00:13:05,290
We would need to update this ever so slightly.

221
00:13:05,290 --> 00:13:07,870
So I'll just comment that out for now, for amount.

222
00:13:07,870 --> 00:13:13,390
We can keep that the same, but instead of just setting translate X to be that amount, we can calculate

223
00:13:13,390 --> 00:13:19,600
the current transform or the current position on the screen and then add to that whatever amount is

224
00:13:19,600 --> 00:13:21,640
passed in and use that to translate.

225
00:13:22,120 --> 00:13:25,810
So the current amount, if we want to find that, is right here.

226
00:13:25,810 --> 00:13:31,330
If we use get bounding client rect, we have the let's see left is 808.

227
00:13:32,140 --> 00:13:37,060
And then we have a little bit of I believe it was margin or padding that added eight pixels.

228
00:13:37,150 --> 00:13:37,870
It doesn't matter.

229
00:13:38,260 --> 00:13:39,460
We're not going to be super precise.

230
00:13:39,460 --> 00:13:42,560
I don't really care if this is going to be incredibly accurate.

231
00:13:42,580 --> 00:13:43,870
I don't want to get too bogged down.

232
00:13:43,870 --> 00:13:45,520
So let's use this left.

233
00:13:45,520 --> 00:13:51,580
So whatever the left is, well then add another 100 or 200, whatever the amount is we're trying to

234
00:13:51,580 --> 00:13:52,150
move.

235
00:13:52,390 --> 00:13:53,740
I'll make a new variable.

236
00:13:53,830 --> 00:13:58,660
I'll get the left and save that to a variable called Current Left.

237
00:14:00,300 --> 00:14:05,820
Then here I'll just translate x to amount plus current left.

238
00:14:06,300 --> 00:14:10,500
So now when I call this, I hopefully can just say move 100 pixels at a time.

239
00:14:10,500 --> 00:14:11,300
It's easier.

240
00:14:11,310 --> 00:14:15,330
You don't have to keep track of if you've moved 100, then you want to move 200.

241
00:14:15,330 --> 00:14:19,070
If you want to move another 100, you have to add it together and do 300.

242
00:14:19,080 --> 00:14:22,830
Now I can just say 100 every time or 200 every time or mix it up.

243
00:14:22,830 --> 00:14:25,080
But I don't have to know how far we've already moved.

244
00:14:25,470 --> 00:14:26,520
Okay, so translate x.

245
00:14:26,610 --> 00:14:27,190
Let's just.

246
00:14:27,210 --> 00:14:28,650
Let's see if it works.

247
00:14:29,040 --> 00:14:30,240
Refresh the page.

248
00:14:31,700 --> 00:14:32,360
It's working.

249
00:14:32,360 --> 00:14:34,220
It's moving 100 pixels every time.

250
00:14:34,970 --> 00:14:39,630
So now we can go back to checking if we've gone too far or if we're going to go too far.

251
00:14:39,650 --> 00:14:41,000
We have our boundary.

252
00:14:41,030 --> 00:14:43,640
We have the current right of the element.

253
00:14:43,760 --> 00:14:46,000
And what we want to do is check if that right.

254
00:14:46,010 --> 00:14:51,650
Plus, let's say we're moving 100 pixels, if another hundred pixels to the right is going to be too

255
00:14:51,650 --> 00:14:55,240
far and we'll be off the screen, then we don't want to move.

256
00:14:55,250 --> 00:14:58,970
So we could write a simple conditional if element, right?

257
00:14:58,970 --> 00:15:03,530
Plus the amount we're trying to move is greater than the body boundary.

258
00:15:05,120 --> 00:15:06,470
What do we want to do?

259
00:15:06,500 --> 00:15:10,820
Why don't we start with just conflict logging done?

260
00:15:12,490 --> 00:15:14,890
And I apparently cannot type greater than.

261
00:15:15,820 --> 00:15:15,960
Oh.

262
00:15:16,000 --> 00:15:16,660
Console.log.

263
00:15:16,660 --> 00:15:17,380
Done.

264
00:15:17,500 --> 00:15:18,430
Can't.

265
00:15:19,570 --> 00:15:20,030
Go.

266
00:15:20,030 --> 00:15:21,400
Oops, double quotes there.

267
00:15:21,430 --> 00:15:23,440
Cannot go that far.

268
00:15:25,170 --> 00:15:25,800
Else.

269
00:15:25,800 --> 00:15:26,610
We need the else.

270
00:15:26,640 --> 00:15:29,860
Otherwise, we'll just print this out and then run our code anyway.

271
00:15:29,880 --> 00:15:31,310
So let's add an else.

272
00:15:31,320 --> 00:15:33,450
We'll do the set time out down here.

273
00:15:34,770 --> 00:15:35,270
Oh, boy.

274
00:15:35,280 --> 00:15:35,820
Okay.

275
00:15:35,820 --> 00:15:38,580
So we try and move 100 pixels every time.

276
00:15:38,580 --> 00:15:45,060
And if it's too far, like if I do the last one and try and move 500 pixels, let's see.

277
00:15:45,060 --> 00:15:46,680
We should move four times.

278
00:15:48,180 --> 00:15:50,670
To three four.

279
00:15:51,450 --> 00:15:53,100
Oh, well, I'm an idiot.

280
00:15:53,790 --> 00:15:54,720
I moved the screen.

281
00:15:54,750 --> 00:15:56,500
Let's try and move 1000 pixels.

282
00:15:56,520 --> 00:15:58,800
That should be enough for it to trigger.

283
00:15:59,430 --> 00:16:00,080
So, 100.

284
00:16:00,090 --> 00:16:00,930
100.

285
00:16:00,960 --> 00:16:02,220
And now we try and move.

286
00:16:02,250 --> 00:16:03,090
1000.

287
00:16:04,930 --> 00:16:05,530
Perfect.

288
00:16:05,530 --> 00:16:06,640
Cannot go that far.

289
00:16:06,670 --> 00:16:07,840
Let's try one more time.

290
00:16:11,090 --> 00:16:12,800
And it doesn't move us any further.

291
00:16:12,800 --> 00:16:13,520
That's it.

292
00:16:14,330 --> 00:16:16,610
Okay, so that is working.

293
00:16:17,270 --> 00:16:20,960
We now have this situation where we don't move anymore.

294
00:16:21,410 --> 00:16:25,100
Otherwise we do the set time out and everything else and we call a callback.

295
00:16:25,430 --> 00:16:30,780
Now let's go back to this idea of having a success and a failure callback so I could pass in.

296
00:16:30,800 --> 00:16:31,970
Here's what I want you to do.

297
00:16:31,970 --> 00:16:33,420
If we can keep moving.

298
00:16:33,440 --> 00:16:34,780
Here's what I want you to do.

299
00:16:34,790 --> 00:16:36,350
If we can't move anymore.

300
00:16:37,040 --> 00:16:41,030
For example, I could reset the position if we've gone all the way to the right.

301
00:16:41,030 --> 00:16:44,390
Or I could just alert something the way that we would structure this.

302
00:16:44,390 --> 00:16:48,500
And this is how a lot of older JavaScript libraries are actually written.

303
00:16:48,500 --> 00:16:54,110
They have two callbacks you pass in, so your request or whatever you're doing, oh, my gosh, I don't

304
00:16:54,110 --> 00:16:55,010
complete here.

305
00:16:55,100 --> 00:16:55,820
Here we go.

306
00:16:56,210 --> 00:17:02,240
And you pass in your success callback, which you wouldn't write like this, and then a fail callback.

307
00:17:02,930 --> 00:17:05,780
So those are two functions as arguments.

308
00:17:05,780 --> 00:17:12,109
So you would have your first function, do something and then your second function do something else.

309
00:17:12,950 --> 00:17:13,970
So let's try it.

310
00:17:13,970 --> 00:17:15,200
Let's rewrite this.

311
00:17:15,200 --> 00:17:16,940
So we have our first callback.

312
00:17:16,940 --> 00:17:22,579
Let's call this on success and on failure or on fail.

313
00:17:23,660 --> 00:17:28,220
So down here, if we've made it to this point, that means we can keep moving.

314
00:17:28,220 --> 00:17:35,370
So we'll call if on success, which I guess we can just assume our code.

315
00:17:35,390 --> 00:17:38,710
Let's just assume that it will be passed in just to make our code simpler.

316
00:17:38,720 --> 00:17:41,450
We'll do on success right there.

317
00:17:42,420 --> 00:17:43,950
And on failure.

318
00:17:43,950 --> 00:17:45,750
We'll be right in here.

319
00:17:47,070 --> 00:17:49,140
So now we have two branching paths.

320
00:17:49,770 --> 00:17:51,840
You try and move a certain number of pixels.

321
00:17:51,840 --> 00:17:57,270
If that number is two too big of a gap to jump and you'll be off screen, this element will be off the

322
00:17:57,270 --> 00:17:57,920
screen.

323
00:17:57,930 --> 00:18:00,300
We'll call the on failure callback.

324
00:18:00,630 --> 00:18:06,780
Otherwise, we'll actually do that movement after some delay that you pass in and then call your on

325
00:18:06,780 --> 00:18:07,990
success callback.

326
00:18:08,010 --> 00:18:11,760
So now we have to rewrite this whole thing to have two callbacks every time.

327
00:18:11,760 --> 00:18:17,460
So I'm going to leave the original and I'll call Move X of our button.

328
00:18:17,580 --> 00:18:23,600
Let's move 100 pixels the first time after 1/2, 1000 milliseconds.

329
00:18:23,610 --> 00:18:25,450
This is our success callback.

330
00:18:25,470 --> 00:18:27,510
If we're successful, we'll do something.

331
00:18:27,690 --> 00:18:29,180
So I'll just write success.

332
00:18:29,190 --> 00:18:31,290
Then we have to add our second callback here.

333
00:18:31,290 --> 00:18:33,000
So a whole other function.

334
00:18:33,000 --> 00:18:38,730
And this is if you cannot move, if this is too big of a jump to try and make, what do we want to do?

335
00:18:38,760 --> 00:18:40,680
Why don't we start with a simple alert?

336
00:18:41,250 --> 00:18:43,440
Cannot move further.

337
00:18:45,270 --> 00:18:45,950
Okay.

338
00:18:45,960 --> 00:18:50,610
And so then if we're successful, we'll do another move X this time.

339
00:18:50,610 --> 00:18:55,080
Why don't we move 400 pixels after 1/2?

340
00:18:55,110 --> 00:18:57,090
Here's our success callback.

341
00:18:57,090 --> 00:18:58,080
We'll do something.

342
00:18:58,080 --> 00:19:05,490
If success, I'll label these success and then we have to add a fail callback to this function call.

343
00:19:05,490 --> 00:19:07,290
And already it's getting quite messy.

344
00:19:07,290 --> 00:19:11,760
So this would be our fail for the second callback or for the second attempt.

345
00:19:11,760 --> 00:19:14,330
And here's our fail for the very first move x.

346
00:19:15,090 --> 00:19:19,020
So fail here we'll do the exact same alert cannot move further.

347
00:19:20,930 --> 00:19:27,980
And if I say if it gets all formatted funky, but this is a lot to just follow and try and read with

348
00:19:27,980 --> 00:19:29,000
your human eyes.

349
00:19:29,000 --> 00:19:29,990
It's really not pretty.

350
00:19:29,990 --> 00:19:32,120
And this is only two levels so far.

351
00:19:32,720 --> 00:19:35,820
Just adding in that second callback really complicates things.

352
00:19:35,840 --> 00:19:41,000
This is relatively easy to look at and understand this happens then after this callback will happen,

353
00:19:41,000 --> 00:19:45,050
then this callback here when we have two callbacks at a time, we pass it in.

354
00:19:45,080 --> 00:19:46,850
It's just clunky and ugly.

355
00:19:47,450 --> 00:19:50,030
Okay, so move X button.

356
00:19:50,060 --> 00:19:50,390
Let's see.

357
00:19:50,390 --> 00:19:51,470
Here's our success.

358
00:19:51,470 --> 00:19:53,690
Let's do one more move x.

359
00:19:53,690 --> 00:19:56,090
So if we move 100 pixels, we're still good.

360
00:19:56,090 --> 00:20:00,680
This calls or this is called, we try and move 400 pixels if we're still good.

361
00:20:00,710 --> 00:20:07,490
This function is called otherwise this fail is called so move x this time let's do button something

362
00:20:07,490 --> 00:20:09,410
very large like 700 pixels.

363
00:20:09,410 --> 00:20:10,580
That should do it for us.

364
00:20:10,580 --> 00:20:18,410
At least if I shrink my screen down and then after a second again, here's our success callback, we'll

365
00:20:18,410 --> 00:20:19,940
just console.log.

366
00:20:20,510 --> 00:20:25,940
Really, we still have screen left or something like that.

367
00:20:26,210 --> 00:20:29,120
And then we pass in our failure callback here.

368
00:20:30,800 --> 00:20:34,550
And this one will just alert, cannot move further.

369
00:20:37,540 --> 00:20:38,050
Oh, boy.

370
00:20:38,050 --> 00:20:38,730
I mean, look at this.

371
00:20:38,740 --> 00:20:40,450
This is nasty to look at.

372
00:20:40,450 --> 00:20:41,830
But let's just see if it works.

373
00:20:41,830 --> 00:20:48,160
So we every single time we call Move X, we're now passing in two callbacks, the one to call if things

374
00:20:48,160 --> 00:20:50,110
work and we can move the one to call.

375
00:20:50,110 --> 00:20:53,470
If we can't move that far, we'll be moving off screen.

376
00:20:53,620 --> 00:20:58,930
And then as soon as we start nesting them, it just grows into this absolute spaghetti mess.

377
00:20:59,020 --> 00:20:59,820
So let's try it.

378
00:20:59,830 --> 00:21:01,240
I'm going to refresh my page.

379
00:21:02,620 --> 00:21:03,040
Okay.

380
00:21:03,040 --> 00:21:04,240
So it actually did work.

381
00:21:04,240 --> 00:21:10,030
But when I'm when I hit enter and close this alert, you'll see what it's kind of behaving oddly or

382
00:21:10,030 --> 00:21:11,820
it might seem like it's behaving oddly.

383
00:21:11,830 --> 00:21:14,770
This is because of our set timeout and what's happening.

384
00:21:14,770 --> 00:21:19,630
If we go back, we're moving 100 pixels, then 400 and then 700 if we can.

385
00:21:20,380 --> 00:21:24,970
But because this code is running right away, we're not doing it in the set timeout.

386
00:21:25,060 --> 00:21:32,260
It seems like we're stopping too soon, but as you saw here, it stops or it appears to stop.

387
00:21:32,260 --> 00:21:32,950
But I hit enter.

388
00:21:32,950 --> 00:21:33,940
It still moves.

389
00:21:34,090 --> 00:21:37,570
So that alert is actually coming from this move.

390
00:21:37,570 --> 00:21:43,810
When we moved over here, we could fix this problem if we move our conditional into the set timeout

391
00:21:44,020 --> 00:21:49,960
just to run through what's happening here, we're moving 100 pixels, but when we move 100 pixels,

392
00:21:49,960 --> 00:21:51,370
we're starting by checking.

393
00:21:51,370 --> 00:21:52,720
Can we continue to move?

394
00:21:52,750 --> 00:21:53,080
All right.

395
00:21:53,080 --> 00:21:53,890
We can.

396
00:21:53,890 --> 00:21:56,350
So we don't run this and we set a timeout.

397
00:21:56,530 --> 00:21:58,720
This timeout takes 1/2.

398
00:21:58,750 --> 00:22:04,660
If we pass in 1000 milliseconds, it takes 1000 milliseconds for it to run and then call on success.

399
00:22:04,660 --> 00:22:08,860
But as soon as that on success is called, this code runs immediately.

400
00:22:09,130 --> 00:22:13,150
This is not part of the 1000 millisecond delay for the next time around.

401
00:22:13,300 --> 00:22:15,640
It's happening at the very beginning of the function.

402
00:22:15,640 --> 00:22:20,950
So we could rewrite this by moving this code into our set timeout.

403
00:22:21,310 --> 00:22:24,220
This isn't necessarily the best way of designing this.

404
00:22:24,220 --> 00:22:28,930
It might be better just a short circuit and just check as soon as possible if we can't move further.

405
00:22:28,930 --> 00:22:31,810
But this will make it easier to see when it's working for us.

406
00:22:31,810 --> 00:22:36,130
So now we're doing basically running the code at the exact same time.

407
00:22:36,130 --> 00:22:39,100
We're checking if we can go and we're calling failure.

408
00:22:39,100 --> 00:22:44,170
If we can't go, we're calling success if we can move and we're doing it all within the set timeout.

409
00:22:44,170 --> 00:22:48,700
So now it moves, it moves again and then it says, okay, I can't keep going.

410
00:22:48,880 --> 00:22:50,740
So we had the same outcome last time.

411
00:22:50,740 --> 00:22:53,950
It just was alerting us before we had actually moved.

412
00:22:54,970 --> 00:22:57,550
Okay, so this is looking great.

413
00:22:57,550 --> 00:22:58,570
It works, right?

414
00:22:58,570 --> 00:23:02,710
It's stopping when it should if I expand my screen all the way over here.

415
00:23:02,710 --> 00:23:03,460
Let's see.

416
00:23:04,610 --> 00:23:06,790
It now should be able to make that jump.

417
00:23:06,800 --> 00:23:14,120
And now we get really we still have screen left, which is our success for our third move.

418
00:23:14,450 --> 00:23:18,170
So you can see this is quite ugly and this is only three moves.

419
00:23:18,170 --> 00:23:20,330
But we had here was five moves.

420
00:23:20,330 --> 00:23:23,210
So why don't I take a second to recreate this?

421
00:23:23,480 --> 00:23:24,370
I won't make you watch.

422
00:23:24,380 --> 00:23:25,370
I'll just do it really quickly.

423
00:23:25,370 --> 00:23:28,460
And through the magic of editing, it will be done.

424
00:23:28,460 --> 00:23:29,150
There you go.

425
00:23:29,660 --> 00:23:35,480
So I decided to change it to 300 pixel jumps, because I know some of you will have wider screens or

426
00:23:35,480 --> 00:23:37,610
you won't have your console open like I have here.

427
00:23:37,610 --> 00:23:41,660
So I wanted to make sure in most cases that this would hit the edge of the screen.

428
00:23:41,780 --> 00:23:51,170
So I'm going 300, 300, 300, 300, 300, and then each time, if it fails, I have this failure callback.

429
00:23:51,170 --> 00:23:52,280
It's just alerting.

430
00:23:52,280 --> 00:23:54,890
Cannot move further, cannot move further, cannot move forever.

431
00:23:55,190 --> 00:23:55,760
Oh my gosh.

432
00:23:55,760 --> 00:23:57,230
Can't talk five times.

433
00:23:57,230 --> 00:23:58,580
I have to rewrite that code.

434
00:23:58,730 --> 00:24:00,860
I don't have an easy way of getting around this.

435
00:24:00,860 --> 00:24:06,950
I have to pass it in that failure callback, even if I'm just doing basically the same thing every single

436
00:24:06,950 --> 00:24:07,400
time.

437
00:24:07,400 --> 00:24:13,370
And then on our last success, instead of continuing to move, I'm just alerting you have a wide screen,

438
00:24:13,970 --> 00:24:15,740
so let's see what happens now.

439
00:24:16,100 --> 00:24:22,730
We move one time, two times, three times four, and then it stops, cannot move further.

440
00:24:22,850 --> 00:24:29,840
And if I close my console, I think we'll be able to make it to the end three, four, five.

441
00:24:29,840 --> 00:24:32,210
And then the callback, which is you have a wide screen.

442
00:24:33,440 --> 00:24:34,490
Oh, okay.

443
00:24:34,490 --> 00:24:36,740
So this has been a ton.

444
00:24:36,740 --> 00:24:39,320
I know this is an incredibly long, dense video.

445
00:24:40,220 --> 00:24:45,320
I wanted to illustrate a situation where callbacks are useful.

446
00:24:45,320 --> 00:24:50,600
We have to use callbacks with what we know so far in order to write a function like move X where we're

447
00:24:50,600 --> 00:24:52,910
waiting for something to finish and then running some code.

448
00:24:52,910 --> 00:24:59,450
We're using set timeout all over the place and our source as you see where you set timeout and in order

449
00:24:59,450 --> 00:25:04,250
to to make our functions work the way we've written them, we have to pass callbacks so we have a on

450
00:25:04,250 --> 00:25:05,660
success and on failure.

451
00:25:05,690 --> 00:25:11,510
Remember, all of this stems from the fact that JavaScript does one thing at a time and the browser

452
00:25:11,510 --> 00:25:12,260
is taking over.

453
00:25:12,260 --> 00:25:17,270
When we call set timeout, the browser is keeping track of time and then it tells JavaScript, okay,

454
00:25:17,300 --> 00:25:18,890
time's up, run this function.

455
00:25:18,890 --> 00:25:24,260
And within this function we have some logic and then we tell JavaScript which one of these to run based

456
00:25:24,260 --> 00:25:25,940
off of some conditional logic.

457
00:25:25,940 --> 00:25:31,820
So this all stems from JavaScript, fundamental nature, the fact that it's single threaded and we have

458
00:25:31,820 --> 00:25:38,270
these browser APIs, the web APIs that JavaScript works with to make a request, to set a timeout,

459
00:25:38,570 --> 00:25:41,300
to set an interval, to add an event listener.

460
00:25:41,300 --> 00:25:45,320
The browser takes care of that and then tells JavaScript, All right, here's a function, here's a

461
00:25:45,320 --> 00:25:46,040
callback.

462
00:25:46,160 --> 00:25:52,190
That's great, but it can get really messy when we start having different outcomes of success in a failure,

463
00:25:52,190 --> 00:25:54,590
which happens a lot when we make requests.

464
00:25:54,590 --> 00:26:00,860
This is a very simple example, but as you'll see shortly, when we make requests, real web HTTP requests,

465
00:26:00,860 --> 00:26:02,150
we follow the same pattern.

466
00:26:02,150 --> 00:26:07,670
We have some code to run when it when the request works, we have other code to run if the request fails.

467
00:26:07,730 --> 00:26:12,020
And so if we structure our code like this on success, on failure, we have two callbacks.

468
00:26:12,020 --> 00:26:15,980
Things get nested, ugly and very difficult to follow quickly.

469
00:26:15,980 --> 00:26:18,260
I mean, look at how separated our code is.

470
00:26:18,560 --> 00:26:22,820
Yes, part of it is the way that my code is formatting things.

471
00:26:22,820 --> 00:26:27,830
But even if we don't have all this indentation, it's still really difficult to know.

472
00:26:28,370 --> 00:26:34,610
If you want to change the failure callback for this first move x, you have to scroll down and just

473
00:26:34,610 --> 00:26:36,020
make sure you're at the right level.

474
00:26:36,020 --> 00:26:36,290
Right?

475
00:26:36,290 --> 00:26:36,950
You have to.

476
00:26:36,980 --> 00:26:38,000
Here's the first one.

477
00:26:38,000 --> 00:26:39,020
Here's the second failure.

478
00:26:39,020 --> 00:26:43,010
Third failure, it becomes hard to to really follow and understand.

479
00:26:43,010 --> 00:26:44,960
So this is where promises come in.

480
00:26:44,960 --> 00:26:50,780
Promises allow us to rewrite a function like this or this function here so that we don't have to do

481
00:26:50,780 --> 00:26:52,220
all this crazy nesting.

482
00:26:52,220 --> 00:26:54,290
It's so much, so much easier to read.

483
00:26:54,290 --> 00:26:56,240
And that's what we're going to see in the next video.

484
00:26:56,240 --> 00:27:01,970
So all of this has been set up for promises, but as long as it's been, this this video I know is probably

485
00:27:01,970 --> 00:27:04,280
the longest video in the course a real slog.

486
00:27:04,280 --> 00:27:08,960
I congratulate you if you made it here, and it will really help you understand why promises are worth

487
00:27:08,960 --> 00:27:09,260
it.

488
00:27:09,260 --> 00:27:14,330
Otherwise, if I just show you promises without showing you the struggle without promises, it doesn't

489
00:27:14,330 --> 00:27:15,410
do promises justice.

490
00:27:15,410 --> 00:27:16,490
So that's coming up next.

