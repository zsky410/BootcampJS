1
00:00:00,150 --> 00:00:00,630
Okay.

2
00:00:00,720 --> 00:00:03,680
So we establish that JavaScript is single threaded.

3
00:00:03,690 --> 00:00:07,350
That means it's doing one thing at a time, like a human sneezing.

4
00:00:07,380 --> 00:00:09,520
A human does one thing which is sneezing.

5
00:00:09,540 --> 00:00:13,140
It's very, very difficult to also talk while you sneeze or eat.

6
00:00:13,140 --> 00:00:14,130
Why you sneeze.

7
00:00:14,250 --> 00:00:18,060
Although I guess I have been driving and sneeze and I continue to drive.

8
00:00:18,060 --> 00:00:22,820
But I basically just prayed that I wouldn't crash because all I could do is sneeze.

9
00:00:22,830 --> 00:00:24,930
So JavaScript does one thing at a time.

10
00:00:24,990 --> 00:00:30,360
As we mentioned in the last video, a lot of the time we do things that take a lot of time.

11
00:00:30,360 --> 00:00:31,490
That's a bad sentence.

12
00:00:31,500 --> 00:00:37,050
Commonly, we do a lot of things that take time, whether it's getting data from a database or an API

13
00:00:37,050 --> 00:00:40,220
or trying to save something or even just set a timer.

14
00:00:40,230 --> 00:00:43,020
How how does something like a timer work in JavaScript?

15
00:00:43,260 --> 00:00:44,850
So here's a simple example.

16
00:00:44,850 --> 00:00:48,320
This is not exactly full code that would work.

17
00:00:48,330 --> 00:00:53,730
I've made up a function called save to database, but imagine we're doing something like this, a user

18
00:00:53,730 --> 00:00:55,650
type, something into a form it submits.

19
00:00:55,650 --> 00:01:01,320
We want to grab value from the form, save it to a database, and that could take a couple of seconds.

20
00:01:01,320 --> 00:01:02,370
It could take half a second.

21
00:01:02,370 --> 00:01:03,630
It could go really fast.

22
00:01:03,660 --> 00:01:06,210
It could take 10 seconds and fail.

23
00:01:06,780 --> 00:01:09,540
Does this line just not run until this finishes?

24
00:01:09,840 --> 00:01:11,730
Well, we have a workaround.

25
00:01:11,730 --> 00:01:13,650
We've seen this a couple of times before.

26
00:01:13,680 --> 00:01:18,690
We've actually seen it a lot for these processes, processes that take time.

27
00:01:18,690 --> 00:01:25,230
We pass a callback function and those functions will be executed at the appropriate time after this

28
00:01:25,230 --> 00:01:27,540
interval has passed in the case of a set timeout.

29
00:01:27,660 --> 00:01:32,480
But this doesn't really answer the question of how does it work or why does it work?

30
00:01:32,490 --> 00:01:34,560
We know that this does work.

31
00:01:34,860 --> 00:01:37,230
Set time out for 3 seconds.

32
00:01:37,230 --> 00:01:42,270
We'll wait 3 seconds before running this code, but how is JavaScript going to know?

33
00:01:42,270 --> 00:01:46,860
How does it set a timer for 3 seconds if it can only do one thing at a time?

34
00:01:47,160 --> 00:01:49,110
That is what we're going to talk about here.

35
00:01:49,110 --> 00:01:54,510
If we go back to this example where we had our first console.log and then the alert blocked everything

36
00:01:54,510 --> 00:01:58,530
else, JavaScript is fully focused on the alert until it's gone.

37
00:01:58,530 --> 00:02:01,410
Then we move on to the next console.log.

38
00:02:01,530 --> 00:02:02,190
Why?

39
00:02:02,190 --> 00:02:09,479
If I replace this with a set timeout pass in some function where we console.log?

40
00:02:10,300 --> 00:02:11,470
I happen?

41
00:02:13,080 --> 00:02:17,300
Third and then an interval or a delay.

42
00:02:17,310 --> 00:02:19,780
3 seconds, 3000 milliseconds.

43
00:02:19,800 --> 00:02:21,150
Why does this work?

44
00:02:21,720 --> 00:02:23,140
It seems like it shouldn't.

45
00:02:23,160 --> 00:02:24,900
Like nothing different is really happening.

46
00:02:24,900 --> 00:02:28,860
Except we're passing in some some function to be called later.

47
00:02:29,010 --> 00:02:32,830
But based off of what I've told you, it seems like this should run.

48
00:02:32,850 --> 00:02:38,040
Then JavaScript encounters this line which says Set a timer for 3 seconds.

49
00:02:38,280 --> 00:02:43,100
That should just take up JavaScript full capacity to focus on anything.

50
00:02:43,110 --> 00:02:44,850
It should just be setting a timer.

51
00:02:44,850 --> 00:02:52,650
How can JavaScript keep track of 3 seconds and remember to do this or call this function while also

52
00:02:52,650 --> 00:02:54,980
moving on to this console.log?

53
00:02:54,990 --> 00:03:01,050
Remember that is printed out immediately and then 3 seconds later this is going to print out.

54
00:03:01,050 --> 00:03:05,760
So if I have other code down here, I could have a whole bunch of other stuff that's all going to run.

55
00:03:05,760 --> 00:03:11,640
Assuming that it doesn't take more than 3 seconds that will run before this doesn't seem like it should

56
00:03:11,640 --> 00:03:12,690
be able to work.

57
00:03:12,690 --> 00:03:18,240
It seems like JavaScript should have to focus entirely on keeping track of 3 seconds and knowing when

58
00:03:18,240 --> 00:03:19,890
to actually execute this.

59
00:03:20,190 --> 00:03:22,410
But we have a workaround.

60
00:03:23,010 --> 00:03:26,640
The trick here is that the browser does the work.

61
00:03:26,670 --> 00:03:29,700
JavaScript is not the same thing as your browser.

62
00:03:29,850 --> 00:03:36,090
JavaScript is a language that is implemented in your browser, but the browser itself, like Chrome,

63
00:03:36,090 --> 00:03:39,300
Safari, even Internet Explorer, are a good friend.

64
00:03:39,300 --> 00:03:41,310
When I say good friend, I mean worst enemy.

65
00:03:41,310 --> 00:03:48,990
Those browsers are written in usually C++, a different programming language, and the browser itself

66
00:03:48,990 --> 00:03:56,070
is capable of doing certain tasks that JavaScript sucks at or things that take time they're handed off

67
00:03:56,070 --> 00:03:56,730
to the browser.

68
00:03:56,730 --> 00:03:59,760
So JavaScript says, Here is this thing I need you to do.

69
00:03:59,760 --> 00:04:04,590
For me, the browser takes over and then when it's done it reminds JavaScript.

70
00:04:04,590 --> 00:04:06,060
Okay, your turn again.

71
00:04:06,390 --> 00:04:08,850
So this is a really key thing to understand.

72
00:04:09,180 --> 00:04:13,560
JavaScript is not setting a timer or keeping track of how many seconds have gone by.

73
00:04:13,590 --> 00:04:18,540
JavaScript is not sending a request to an API, the browser actually handles it.

74
00:04:18,810 --> 00:04:23,580
And this is something that honestly, I went a long time without understanding about JavaScript and

75
00:04:23,580 --> 00:04:27,780
it's not crucial to being able to make a request or use set timeout.

76
00:04:27,780 --> 00:04:32,790
You've already done that in this course, but I think it helps a lot to understand why we use callbacks

77
00:04:32,790 --> 00:04:35,880
and why we get to things like promises and async functions.

78
00:04:36,270 --> 00:04:44,400
So browsers have a set of these APIs called just generally web APIs, and they can handle certain tasks

79
00:04:44,400 --> 00:04:50,070
in the background, like making a request that takes time, set time out, which we saw here, that

80
00:04:50,070 --> 00:04:50,850
takes time.

81
00:04:51,060 --> 00:04:55,320
The browser is capable of doing those things in the background.

82
00:04:55,320 --> 00:05:01,530
So JavaScript is going to encounter certain lines of code like this line.

83
00:05:01,530 --> 00:05:07,470
JavaScript knows how to do that, then it gets to set timeout and it's going to pass it off to the browser

84
00:05:07,470 --> 00:05:15,360
and say, Please remind me after 3 seconds has elapsed or Hey browser, you set this timer for me and

85
00:05:15,360 --> 00:05:18,120
when you're done, give me this function back.

86
00:05:18,300 --> 00:05:20,070
So that's why we pass a callback.

87
00:05:20,100 --> 00:05:21,720
It just keeps plowing along.

88
00:05:21,720 --> 00:05:23,760
It hands this off to the browser.

89
00:05:23,790 --> 00:05:29,220
The browser is in charge of keeping time, and then it reminds JavaScript, Hey, here's that thing

90
00:05:29,220 --> 00:05:33,630
I want you to do, or you wanted me to remind you of so JavaScript doesn't get hung up.

91
00:05:33,630 --> 00:05:39,720
It's single thread isn't blocked by this set timeout because it's passed off to something entirely different.

92
00:05:39,720 --> 00:05:41,190
It's passed off to the browser.

93
00:05:41,430 --> 00:05:47,520
Then that callback function in the case of set timeout when it's time when 3 seconds has elapsed, the

94
00:05:47,520 --> 00:05:53,520
browser is going to take that function, the one that just console.log something and put it on the call

95
00:05:53,520 --> 00:05:54,120
stack.

96
00:05:54,420 --> 00:05:56,520
So this is where the call stack comes back in.

97
00:05:57,090 --> 00:06:00,870
So let's take a closer look with some diagrams here.

98
00:06:00,870 --> 00:06:03,360
We have similar code, I think different text.

99
00:06:03,360 --> 00:06:05,070
I print first, I print second.

100
00:06:06,120 --> 00:06:06,960
So what I had.

101
00:06:07,230 --> 00:06:08,640
Okay, I capitalized it here.

102
00:06:08,640 --> 00:06:09,450
It doesn't matter.

103
00:06:09,570 --> 00:06:12,990
So JavaScript is represented by this JavaScript logo.

104
00:06:13,140 --> 00:06:15,260
It's going to encounter this line.

105
00:06:15,270 --> 00:06:16,650
The interpreter sees this line.

106
00:06:16,650 --> 00:06:17,760
It knows how to handle it.

107
00:06:17,760 --> 00:06:18,600
Can't stop log.

108
00:06:18,600 --> 00:06:19,260
I print first.

109
00:06:19,260 --> 00:06:20,070
It runs that.

110
00:06:20,770 --> 00:06:22,150
Then it gets to set.

111
00:06:22,180 --> 00:06:22,870
Timeout.

112
00:06:23,500 --> 00:06:23,820
Set.

113
00:06:23,830 --> 00:06:28,590
Timeout is something that the browser will do for us or it will do for JavaScript.

114
00:06:28,600 --> 00:06:31,540
So this is my personification a browser.

115
00:06:31,540 --> 00:06:33,160
Can you set a timer for 3 seconds?

116
00:06:33,160 --> 00:06:34,930
The browser says sure thing.

117
00:06:34,930 --> 00:06:37,240
So remember this is separate from JavaScript.

118
00:06:37,240 --> 00:06:43,240
This is the browser itself setting a timeout, keeping track of 3000 milliseconds.

119
00:06:43,240 --> 00:06:45,730
So then JavaScript is free to continue on.

120
00:06:45,760 --> 00:06:49,510
It doesn't have anything in its call stack that has to do with set timeout.

121
00:06:49,600 --> 00:06:52,060
Instead it moves on to console.log.

122
00:06:52,060 --> 00:06:58,270
I print second so it prints that out and there's a little time icon over here that signifies 3 seconds

123
00:06:58,270 --> 00:06:59,140
have elapsed.

124
00:06:59,200 --> 00:07:02,110
Now the browser says Time's Up JavaScript.

125
00:07:02,110 --> 00:07:05,680
Make sure you run that callback now and it places the callback.

126
00:07:05,680 --> 00:07:07,120
This function right here.

127
00:07:07,210 --> 00:07:11,470
I use an arrow function in this example, I just use a regular function expression here.

128
00:07:11,500 --> 00:07:14,260
It places that function back in the call stack.

129
00:07:14,260 --> 00:07:17,050
So JavaScript knows, oh, I need to do this thing.

130
00:07:17,200 --> 00:07:19,390
So JavaScript is not keep the time.

131
00:07:19,960 --> 00:07:21,490
Same thing with making a request.

132
00:07:21,490 --> 00:07:26,800
JavaScript does not make the request itself, the browser and its web APIs handle.

133
00:07:26,800 --> 00:07:30,130
They manage all of that and they simply tell JavaScript.

134
00:07:30,130 --> 00:07:32,560
They add to the call stack when it's appropriate.

135
00:07:32,560 --> 00:07:34,330
Here's the next thing for you to do.

136
00:07:34,870 --> 00:07:41,170
So JavaScript then now has a new function in the call stack and it executes it and it console.log.

137
00:07:41,170 --> 00:07:45,390
I print after 3 seconds, so understanding this relationship will help a lot.

138
00:07:45,400 --> 00:07:51,370
Once we get to promises and actually making requests, JavaScript can only do one thing at a time.

139
00:07:51,370 --> 00:07:57,220
It's single threaded, but in special cases, when we are doing things like setting a timeout, requesting

140
00:07:57,220 --> 00:08:04,060
data or adding an event listener to whatever it div in ly JavaScript isn't going to sit there and just

141
00:08:04,060 --> 00:08:08,710
listen non-stop to see if something's been clicked that's handed off to the browser.

142
00:08:08,830 --> 00:08:15,160
And the browser is in charge of deciding when to actually add a new callback or a function to the call

143
00:08:15,160 --> 00:08:16,900
stack for JavaScript to execute.

144
00:08:16,930 --> 00:08:22,510
Here's this really cool website I found that helps explain how this all works so you can type code over

145
00:08:22,510 --> 00:08:23,050
here.

146
00:08:23,200 --> 00:08:25,780
If you do play around with this, it's called loop.

147
00:08:25,780 --> 00:08:31,270
It doesn't work well or it doesn't work at all if you use arrow functions or any of the newer JavaScript

148
00:08:31,270 --> 00:08:31,900
syntax.

149
00:08:31,900 --> 00:08:33,820
So just stick to some basic stuff.

150
00:08:33,820 --> 00:08:34,929
But here's what it does.

151
00:08:35,049 --> 00:08:41,530
It actually slows down or mimics the execution and what happens behind the scenes with JavaScript and

152
00:08:41,530 --> 00:08:45,640
the handoff to Web APIs, which is what this box over here represents.

153
00:08:45,640 --> 00:08:48,600
Here's the call stack, here's web APIs.

154
00:08:48,700 --> 00:08:51,340
So JavaScript is going to encounter this line.

155
00:08:51,340 --> 00:08:55,060
The Interpreter It can run this immediately and it will console that log.

156
00:08:55,060 --> 00:08:55,870
Hi everyone.

157
00:08:56,050 --> 00:09:03,310
Then it hit set timeout and you'll see visually that the web API takes over and you'll see visually

158
00:09:03,310 --> 00:09:07,600
that the set timeout, the interval or the delay is being kept.

159
00:09:07,600 --> 00:09:11,800
Track of over here for 7 seconds is what this one is set to.

160
00:09:11,800 --> 00:09:13,630
And then another set timeout.

161
00:09:13,630 --> 00:09:16,660
This one for 3 seconds will also be handled over here.

162
00:09:16,660 --> 00:09:19,000
And in the meantime, JavaScript will move on.

163
00:09:19,000 --> 00:09:22,090
If I add in, let's do at least one more console.log.

164
00:09:22,120 --> 00:09:30,340
Console.log by for real everyone JavaScript moves on to this and then when the browser the web API is

165
00:09:30,340 --> 00:09:36,640
over here decide or calculate that the time is is up 7 seconds or 3 seconds.

166
00:09:36,640 --> 00:09:42,370
They add the callback here, not directly to the call stack, they add it to something called the callback

167
00:09:42,370 --> 00:09:42,880
queue.

168
00:09:42,910 --> 00:09:48,580
We don't have to get too far into the weeds here, but essentially this is a place where callbacks are

169
00:09:48,580 --> 00:09:51,730
added and JavaScript will draw upon this queue.

170
00:09:51,760 --> 00:09:57,400
It's a way of JavaScript to know, okay, what's something that I need to do next that is coming back

171
00:09:57,400 --> 00:09:59,000
from the Web APIs.

172
00:09:59,800 --> 00:10:06,700
So let's see what happens when I click Save and Run, I'll pause first thing call stack now has one

173
00:10:06,700 --> 00:10:08,590
function call console.log.

174
00:10:08,590 --> 00:10:09,370
Hi everyone.

175
00:10:09,730 --> 00:10:12,190
Simple enough so it does that.

176
00:10:12,280 --> 00:10:16,630
Now it gets to this set timeout function that is added to the call stack.

177
00:10:16,630 --> 00:10:22,150
But JavaScript realizes, oh, this is one of those things I can hand off to the browser so it doesn't

178
00:10:22,150 --> 00:10:23,140
take charge of this.

179
00:10:23,170 --> 00:10:25,240
It hands it to web API.

180
00:10:25,360 --> 00:10:26,590
The web API is.

181
00:10:28,140 --> 00:10:28,980
There you go.

182
00:10:29,280 --> 00:10:31,050
So it doesn't run the code.

183
00:10:31,050 --> 00:10:32,820
It doesn't run the callback.

184
00:10:32,970 --> 00:10:34,290
Oh, I just broke it.

185
00:10:34,340 --> 00:10:36,600
Okay, let me pause again at the right moment.

186
00:10:36,960 --> 00:10:37,800
There we go.

187
00:10:37,830 --> 00:10:43,500
There's a timeout that is being kept track of over here and JavaScript moves on to the next line, which

188
00:10:43,500 --> 00:10:44,910
is another set timeout.

189
00:10:44,910 --> 00:10:46,530
So the same thing happens.

190
00:10:46,740 --> 00:10:48,870
It's added to the call stack for a moment.

191
00:10:48,900 --> 00:10:54,810
JavaScript then passes it off to the web APIs and says, okay, when that interval or that delay is

192
00:10:54,810 --> 00:10:59,280
over, give me that callback back and I'll execute it at the right time.

193
00:10:59,490 --> 00:11:03,510
So we resume JavaScript moves on to these two consort logs.

194
00:11:03,930 --> 00:11:10,500
There's the first one, the second one they both run, and then the 3/2 timeout finished.

195
00:11:10,620 --> 00:11:17,160
Now there's only one over here, the 7/2 one, the 3/2 one finished and it added the web API added that

196
00:11:17,160 --> 00:11:19,810
callback here, which is supposed to console.log.

197
00:11:19,830 --> 00:11:20,550
Oink, oink.

198
00:11:20,580 --> 00:11:27,210
It added that to the callback queue, which JavaScript will now draw upon and you'll see that it.

199
00:11:27,210 --> 00:11:28,590
Oh, did I now click resume.

200
00:11:29,100 --> 00:11:29,790
There we go.

201
00:11:31,610 --> 00:11:34,940
Those functions are then executed one at a time.

202
00:11:35,150 --> 00:11:37,430
They both console.log and we're done.

203
00:11:37,430 --> 00:11:38,960
So let's do it one more time.

204
00:11:39,200 --> 00:11:40,870
Just quickly, I won't pause.

205
00:11:40,880 --> 00:11:43,910
You can see the web APIs take control of those timers.

206
00:11:43,910 --> 00:11:45,140
JavaScript moves on.

207
00:11:45,140 --> 00:11:49,490
It has one thread, it keeps going and then it draws upon that callback queue.

208
00:11:49,520 --> 00:11:55,250
When the web APIs have placed one of those functions in the callback queue, that relationship is very

209
00:11:55,250 --> 00:11:56,360
important to understand.

210
00:11:56,360 --> 00:12:01,850
So let's pause and now I'll have my console open so you can just see the whole thing as they get printed.

211
00:12:01,850 --> 00:12:03,050
So we get hi everyone.

212
00:12:03,050 --> 00:12:07,700
Then the next line which will be by everyone, then by for real everyone.

213
00:12:07,700 --> 00:12:11,570
Then that first callback, the 3/2 one is added to the queue.

214
00:12:11,600 --> 00:12:17,030
We get oink, oink and then the 7/2 interval or time out finishes so we get mu.

215
00:12:17,600 --> 00:12:18,710
So I'll stop here.

216
00:12:18,950 --> 00:12:21,680
Like I said, this is a very fundamental part of JavaScript.

217
00:12:21,680 --> 00:12:23,960
This is why we use callbacks all the time.

218
00:12:24,020 --> 00:12:28,040
This is how we get around the fact that JavaScript is not a multitasker.

219
00:12:28,040 --> 00:12:29,540
It does one thing at a time.

220
00:12:29,540 --> 00:12:35,570
So when we pass a function as an argument, as a callback function to things like set timeout, which

221
00:12:35,570 --> 00:12:39,260
the web API is handle, those functions are not called right away.

222
00:12:39,260 --> 00:12:40,850
JavaScript doesn't worry about it.

223
00:12:40,850 --> 00:12:47,150
JavaScript just passes it off and continues on its merry way until the web API is at some point place

224
00:12:47,150 --> 00:12:52,820
that function in the callback queue where JavaScript then draws upon and says, Oh, okay, you want

225
00:12:52,820 --> 00:12:53,630
me to do this thing?

226
00:12:53,630 --> 00:12:54,710
I guess it's time.

227
00:12:54,710 --> 00:13:00,890
So it does not do the hard work of keeping track of time, it doesn't do the hard work of making a request.

228
00:13:00,890 --> 00:13:06,500
And that's why we use callbacks so frequently for these asynchronous things, these these functions

229
00:13:06,500 --> 00:13:07,430
that take time.

230
00:13:07,700 --> 00:13:13,250
And I need to make that clear because now we're going to go more into async JS We'll talk about how

231
00:13:13,250 --> 00:13:15,470
we make requests and that takes a lot of time.

232
00:13:15,470 --> 00:13:20,150
And sometimes it sucks to write a ton of callbacks, which is where promises come in.

233
00:13:20,240 --> 00:13:22,310
So this has been setting the stage.

234
00:13:22,310 --> 00:13:23,840
I think it's very important to do.

235
00:13:23,840 --> 00:13:29,390
I have taut promises and async functions without really going into detail of how this works.

236
00:13:29,390 --> 00:13:30,680
But I think this will help.

237
00:13:30,680 --> 00:13:36,920
I hope and please leave some feedback if you think I'm just confusing you or it's not really relevant

238
00:13:36,920 --> 00:13:42,050
because you absolutely can learn this stuff without understanding what the web APIs are and the call

239
00:13:42,050 --> 00:13:42,740
stack.

240
00:13:42,740 --> 00:13:43,880
But I think it will help.

241
00:13:43,880 --> 00:13:44,390
Maybe.

242
00:13:44,390 --> 00:13:45,170
So let me know.

243
00:13:45,260 --> 00:13:45,590
All right.

244
00:13:45,590 --> 00:13:46,160
I'll be quiet.

245
00:13:46,160 --> 00:13:50,660
And next, we'll move on to talking more about callbacks, some of the problems with having a bunch

246
00:13:50,660 --> 00:13:53,150
of callbacks and how we can get around them with promises.

