1
00:00:00,180 --> 00:00:00,830
All righty.

2
00:00:00,840 --> 00:00:06,660
So in the last video, we saw how using a bunch of callbacks and nesting things can get really out of

3
00:00:06,660 --> 00:00:07,680
hand quickly.

4
00:00:08,160 --> 00:00:14,310
This code is just long and difficult to understand when we're passing in to callbacks to each function

5
00:00:14,310 --> 00:00:16,560
call here and they're all nested.

6
00:00:16,800 --> 00:00:23,220
There's a term for this sort of a playfully loving term in JavaScript called callback hell.

7
00:00:23,250 --> 00:00:25,680
And you can see another example of this here on the left.

8
00:00:25,710 --> 00:00:29,130
Lots of nesting, lots of functions that are nested functions.

9
00:00:29,130 --> 00:00:30,960
They're being passed as callbacks.

10
00:00:31,260 --> 00:00:36,960
This is just not very fun to write, and it's especially annoying when it gets really long and super

11
00:00:36,960 --> 00:00:39,720
far nested and indented, and it's just hard to follow.

12
00:00:40,170 --> 00:00:42,450
So this is where promises come in.

13
00:00:42,450 --> 00:00:48,120
Promises allow us to write asynchronous code that is much easier to read and understand.

14
00:00:48,120 --> 00:00:53,310
It's usually shorter, but even if it's not actually shorter in terms of the number of characters,

15
00:00:53,310 --> 00:00:54,450
it's much flatter.

16
00:00:54,480 --> 00:00:56,010
Often it's not so nested.

17
00:00:56,250 --> 00:01:02,550
So here is where we'll end up this code written or rewritten to use promises.

18
00:01:02,860 --> 00:01:09,270
It looks like this a whole lot flatter, much easier to look at on your eyes, much easier to fix or

19
00:01:09,270 --> 00:01:11,000
debug something if it goes wrong.

20
00:01:11,010 --> 00:01:14,050
We don't have to figure out which callback we need to update.

21
00:01:14,070 --> 00:01:20,070
We don't have to find the corresponding fail callback for this success.

22
00:01:20,520 --> 00:01:24,830
Thankfully, you have this bracket matcher, which helps me, but it's really obnoxious.

23
00:01:24,840 --> 00:01:26,660
So this is where we're going.

24
00:01:26,670 --> 00:01:30,510
It will take a moment though, because we need to talk about the basics of promises.

25
00:01:30,510 --> 00:01:34,480
When we work with promises, there's really two different things you need to understand.

26
00:01:34,500 --> 00:01:39,870
The first is how you create a promise, how you could create a function that returns the promise.

27
00:01:39,870 --> 00:01:45,240
And then the second is how you consume or interact with promises which we do all the time.

28
00:01:45,240 --> 00:01:51,000
Even if we're not writing the promises ourselves, we might be making a request from a library or using

29
00:01:51,000 --> 00:01:54,300
a library like Axios, which is something we'll see in just a bit.

30
00:01:54,360 --> 00:01:57,600
It returns a lot of its functions, return promises.

31
00:01:57,600 --> 00:02:00,210
So we need to understand how we work with those promises.

32
00:02:00,210 --> 00:02:01,880
So we'll tackle both of those.

33
00:02:01,920 --> 00:02:06,690
Creating promises from scratch and then also just working with promises that someone else made.

34
00:02:06,720 --> 00:02:07,250
Okay.

35
00:02:07,500 --> 00:02:09,360
So let's talk about the basics.

36
00:02:09,389 --> 00:02:11,130
A promise is just an object.

37
00:02:11,130 --> 00:02:17,280
It's a JavaScript object which represents the completion or failure of some eventual process, something

38
00:02:17,280 --> 00:02:18,330
that can take time.

39
00:02:18,330 --> 00:02:20,130
Usually it's something that takes time.

40
00:02:20,130 --> 00:02:22,320
Otherwise you probably wouldn't need a promise.

41
00:02:22,320 --> 00:02:27,010
So a promise is a way of promising a value that you may not have at the moment.

42
00:02:27,030 --> 00:02:28,920
Think of a promise in the real world.

43
00:02:29,370 --> 00:02:31,410
When I was a kid, I really wanted a dog.

44
00:02:31,440 --> 00:02:32,520
I asked my dad.

45
00:02:32,520 --> 00:02:35,820
He said, I promise we'll get you a dog if you get good grades.

46
00:02:36,030 --> 00:02:37,320
I got good grades.

47
00:02:37,320 --> 00:02:42,680
And well, he didn't follow through on the promise until he had new kids and then he got them a dog.

48
00:02:42,690 --> 00:02:48,480
But other people's parents would probably follow through on those promises and actually follow through

49
00:02:48,480 --> 00:02:50,180
and give them a dog if the kid's a dog.

50
00:02:50,190 --> 00:02:54,090
So a promise is different than saying here is a dog right now.

51
00:02:54,180 --> 00:03:02,040
It's just a guarantee or a supposed guarantee of an eventual value or a dog or whatever we're talking

52
00:03:02,040 --> 00:03:02,430
about.

53
00:03:02,430 --> 00:03:08,850
So when JavaScript promises are objects that represent an eventual either failure or success of some

54
00:03:08,850 --> 00:03:10,320
task, that takes time.

55
00:03:10,320 --> 00:03:11,730
You make a request.

56
00:03:12,120 --> 00:03:18,390
If we use a library like Axios, which we will shortly, that returns a promise because that value,

57
00:03:18,390 --> 00:03:22,980
if you're making an HTTP request, I can take time and that value may never come back.

58
00:03:23,010 --> 00:03:28,530
It might be a failure or it might be successful and you might get some data back from an API, but it

59
00:03:28,530 --> 00:03:29,160
takes time.

60
00:03:29,160 --> 00:03:32,880
So the object that is returned in the meantime is a promise.

61
00:03:32,880 --> 00:03:39,360
And what we do is we attach callbacks to that object so we don't pass it in to callbacks or a single

62
00:03:39,360 --> 00:03:40,860
callback to a function.

63
00:03:40,860 --> 00:03:45,660
And next, a whole bunch of things promises our objects that we can attach callbacks to instead.

64
00:03:46,170 --> 00:03:51,180
This may not make sense at the moment, but why don't I start by showing you how it works and it should

65
00:03:51,180 --> 00:03:52,880
click after a bit of practice.

66
00:03:52,890 --> 00:03:58,590
So the way we make a new promise in JavaScript is like this new promise with a capital P.

67
00:03:59,340 --> 00:04:00,830
I'll save this to a variable.

68
00:04:00,840 --> 00:04:10,770
Let's go with this idea of my parents promising me a dog contest will get you a dog equals new promise.

69
00:04:10,770 --> 00:04:13,710
And when we create a promise we pass in a function.

70
00:04:13,710 --> 00:04:15,570
And this function has two parameters.

71
00:04:15,570 --> 00:04:20,310
Always these two parameters we usually call resolve and reject.

72
00:04:20,310 --> 00:04:22,320
And these are actually functions.

73
00:04:22,320 --> 00:04:28,290
And at any point inside of this function here, this function that we pass into new promise, if we

74
00:04:28,290 --> 00:04:31,350
call resolve, the promise will be resolved.

75
00:04:31,350 --> 00:04:35,730
If we call reject, which is a function like this, the promise will be rejected.

76
00:04:35,730 --> 00:04:38,990
Now, what does that mean for a promise to be resolved or rejected?

77
00:04:39,000 --> 00:04:41,070
Well, why don't we just start with doing neither?

78
00:04:41,310 --> 00:04:43,020
We just have our promise here.

79
00:04:43,020 --> 00:04:44,070
New promise.

80
00:04:44,070 --> 00:04:44,850
That's it.

81
00:04:45,180 --> 00:04:47,100
And we're not doing anything in it.

82
00:04:47,100 --> 00:04:49,050
Let's see what happens if I take a look at.

83
00:04:49,050 --> 00:04:50,460
We'll get you a dog.

84
00:04:50,640 --> 00:04:52,080
I'll refresh my page.

85
00:04:52,290 --> 00:04:59,820
We'll get you a dog is a promise object and see that it has this one property called promise status.

86
00:04:59,890 --> 00:05:01,390
Which is set to pending.

87
00:05:01,660 --> 00:05:06,580
So the promise is it is a promise, but it has not been resolved or rejected.

88
00:05:06,580 --> 00:05:09,610
It has not been fulfilled or it has not been broken.

89
00:05:09,640 --> 00:05:14,950
If we were talking about this idea in the real world of a promise when someone promises you something,

90
00:05:15,520 --> 00:05:21,490
we would say the status of that promise is pending until either they break the promise or they follow

91
00:05:21,490 --> 00:05:22,200
through on it.

92
00:05:22,210 --> 00:05:28,060
So if we don't reject or resolve a promise, its value or its status will be pending.

93
00:05:28,750 --> 00:05:35,110
So the pending state of a promise is frequently what you will see initially when a promise is first

94
00:05:35,110 --> 00:05:35,470
returned.

95
00:05:35,470 --> 00:05:40,060
If we're making a request and that takes 10 seconds, which would be horrendously slow.

96
00:05:40,090 --> 00:05:42,850
During those 10 seconds, we don't have a response.

97
00:05:42,850 --> 00:05:44,680
We don't know if it's a failure or a success.

98
00:05:44,680 --> 00:05:49,750
If the response went to the right URL, if a server was up, if your internet was working, so it would

99
00:05:49,750 --> 00:05:50,560
be pending.

100
00:05:50,800 --> 00:05:56,350
But if I immediately call reject, which is a function, if I just write reject here, it's not going

101
00:05:56,350 --> 00:05:56,620
to work.

102
00:05:56,620 --> 00:05:58,480
I need to execute this function.

103
00:05:58,480 --> 00:06:02,170
Reject, refresh the page, take a look.

104
00:06:02,170 --> 00:06:03,580
Uncut in promise.

105
00:06:03,580 --> 00:06:08,560
We have an error that we didn't catch and our promise status is rejected.

106
00:06:09,530 --> 00:06:20,240
And if I instead resolve like that refresh take a look at we'll get you a dog promise now has status

107
00:06:20,240 --> 00:06:26,540
of resolved so still not very useful at this point but this is the most fundamental part of creating

108
00:06:26,540 --> 00:06:29,810
a promise we call new promise we pass in a function.

109
00:06:29,810 --> 00:06:33,530
And this function has two parameters resolve and reject.

110
00:06:33,890 --> 00:06:36,620
You can name other things, but this is standard.

111
00:06:36,620 --> 00:06:41,750
And when you call that first function, which should be called resolve, it resolves to promise, it

112
00:06:41,750 --> 00:06:44,090
fulfills it, and the status is set to resolved.

113
00:06:44,090 --> 00:06:48,830
And if we instead reject it, the status of that promise is rejected.

114
00:06:49,680 --> 00:06:53,300
Okay, so now why don't we make something slightly more interesting?

115
00:06:53,480 --> 00:06:54,080
We have.

116
00:06:54,080 --> 00:06:55,250
We'll get you a dog.

117
00:06:55,250 --> 00:07:00,110
Why don't we write a promise that is randomly resolved or rejected?

118
00:07:00,800 --> 00:07:02,480
So that's pretty much the logic.

119
00:07:02,480 --> 00:07:05,660
My dad used to decide if I was actually going to get a dog.

120
00:07:05,660 --> 00:07:10,580
I'm pretty sure he just picked a random number and decided nope, there was no real rationale here,

121
00:07:10,580 --> 00:07:12,770
so why don't we pick a random number?

122
00:07:12,770 --> 00:07:16,070
We'll do rand equals math random.

123
00:07:17,810 --> 00:07:26,060
And then if Rand is less than 0.5, we will let's do resolve, else we will reject.

124
00:07:27,260 --> 00:07:33,560
So now this promise, every time I refresh the page, should be one of these states either immediately

125
00:07:33,560 --> 00:07:37,640
resolved or immediately rejected, depending on that random number.

126
00:07:37,640 --> 00:07:39,560
So this time it was resolved.

127
00:07:39,560 --> 00:07:40,640
I try it again.

128
00:07:40,670 --> 00:07:43,760
Resolved now it was rejected.

129
00:07:44,530 --> 00:07:46,240
So this is the first part.

130
00:07:46,330 --> 00:07:48,010
This is how we create a promise.

131
00:07:48,010 --> 00:07:52,980
The next and also extremely important part is how we actually interact with the promise.

132
00:07:52,990 --> 00:08:00,160
How do I run code if this promise was rejected versus run code if this promise was resolved, this is

133
00:08:00,160 --> 00:08:02,890
where we meet our friend Dot then.

134
00:08:02,890 --> 00:08:11,680
So every promise has a then method so we could call will get you a dog dot then and this dot then method

135
00:08:11,680 --> 00:08:15,640
will run if our promise is resolved.

136
00:08:15,640 --> 00:08:18,280
So I have my dot then and I'll pass in a callback.

137
00:08:18,280 --> 00:08:23,050
This code will run when this promise is resolved and we'll console.log.

138
00:08:24,730 --> 00:08:25,470
Yeah.

139
00:08:25,480 --> 00:08:26,860
We got a dog.

140
00:08:29,150 --> 00:08:30,410
So let's see if it works.

141
00:08:31,190 --> 00:08:31,600
Okay.

142
00:08:31,610 --> 00:08:32,960
So it was rejected.

143
00:08:33,110 --> 00:08:34,909
This code did not run.

144
00:08:35,539 --> 00:08:37,909
Refresh again this time.

145
00:08:38,150 --> 00:08:43,880
If we take a look, it was resolved and our callback instead of Dot then was executed.

146
00:08:44,750 --> 00:08:45,800
Let's try it again.

147
00:08:45,800 --> 00:08:46,600
Rejected.

148
00:08:46,610 --> 00:08:48,200
We don't see this code.

149
00:08:48,590 --> 00:08:49,550
There's no yay!

150
00:08:49,550 --> 00:08:50,540
We got a dog.

151
00:08:50,660 --> 00:08:55,280
So we have another method we can use with every single promise we have then.

152
00:08:55,280 --> 00:08:57,800
And another one called dot catch.

153
00:08:58,400 --> 00:09:00,730
Well it's not called catch, it's called catch.

154
00:09:00,740 --> 00:09:03,010
And we can just chain it on like this.

155
00:09:03,020 --> 00:09:09,980
We could also do will get you a dog dot catch this code will run.

156
00:09:09,980 --> 00:09:13,490
If the promise is rejected, we'll cancel that log.

157
00:09:13,520 --> 00:09:15,310
How about sad face?

158
00:09:15,320 --> 00:09:16,310
No dog.

159
00:09:18,080 --> 00:09:21,740
So if the promise is randomly rejected, this will print out.

160
00:09:21,740 --> 00:09:24,380
If it is randomly resolved, this prints out.

161
00:09:26,060 --> 00:09:26,780
No dog.

162
00:09:26,780 --> 00:09:27,760
It was rejected.

163
00:09:27,770 --> 00:09:31,490
As you can see, status is rejected once again.

164
00:09:31,490 --> 00:09:32,090
Rejected.

165
00:09:32,090 --> 00:09:32,790
Rejected.

166
00:09:32,810 --> 00:09:33,560
There we go.

167
00:09:33,740 --> 00:09:34,640
Resolved.

168
00:09:34,820 --> 00:09:35,210
All right.

169
00:09:35,210 --> 00:09:41,510
So what we've seen so far may not seem that useful or revolutionary, but we've seen the two basic pieces

170
00:09:41,510 --> 00:09:43,910
of working with and creating promises.

171
00:09:44,060 --> 00:09:46,340
To make a promise we call new promise.

172
00:09:46,400 --> 00:09:48,380
Every single time we pass in a function.

173
00:09:48,380 --> 00:09:51,800
And that function has two parameters resolve and reject.

174
00:09:51,800 --> 00:09:57,980
Within this function, we can then call resolve as a function to resolve the promise we call reject

175
00:09:57,980 --> 00:10:01,100
as a function with parentheses to reject the promise.

176
00:10:01,100 --> 00:10:06,530
And if we do neither, the promise will have a status of pending until it's either resolved or rejected.

177
00:10:06,530 --> 00:10:08,180
So that's creating a promise.

178
00:10:08,600 --> 00:10:12,890
Then we saw the dot then or the then method and the catch method.

179
00:10:13,040 --> 00:10:20,120
Whatever we pass into then will automatically run when a given promise is resolved and whatever we pass

180
00:10:20,120 --> 00:10:26,090
into catch the catch method will automatically run whenever a promise is rejected.

181
00:10:26,090 --> 00:10:28,700
So these are two methods on a promise.

182
00:10:28,730 --> 00:10:30,080
A promise is an object.

183
00:10:30,080 --> 00:10:32,390
So this creates a new promise for us.

184
00:10:32,390 --> 00:10:38,180
And then here we're using two existing methods on those promises or on this specific promise.

185
00:10:38,180 --> 00:10:39,290
We'll get you a dog.

186
00:10:39,290 --> 00:10:44,030
These are the basic building blocks of promises, and we're going to continue to build on these.

187
00:10:44,030 --> 00:10:46,250
Remember, we will be refactoring some code.

188
00:10:46,430 --> 00:10:49,760
That nasty callback hell we saw was that the last video?

189
00:10:49,880 --> 00:10:51,710
Plus, we'll see how to make requests.

190
00:10:51,800 --> 00:10:56,030
This will all start to make sense if you're if you're questioning it or if you're lost, it just doesn't

191
00:10:56,030 --> 00:10:57,080
seem that useful.

192
00:10:57,110 --> 00:10:58,250
This is not that great.

193
00:10:58,250 --> 00:10:59,510
I totally recognize that.

194
00:10:59,510 --> 00:11:00,770
But we have to start somewhere.

195
00:11:00,770 --> 00:11:03,290
So next we'll continue on our Promises journey.

