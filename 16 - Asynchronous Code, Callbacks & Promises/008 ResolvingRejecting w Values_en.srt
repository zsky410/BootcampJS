1
00:00:00,150 --> 00:00:05,220
The next thing to know about promises is that when you reject or resolve a promise, you can reject

2
00:00:05,220 --> 00:00:10,140
or resolve it with a value and you'll have access to that value in your callback that you pass into

3
00:00:10,140 --> 00:00:16,470
then or catch, which is really, really useful because most of the time we're not just waiting on some

4
00:00:16,470 --> 00:00:17,600
resolve or reject that.

5
00:00:17,600 --> 00:00:20,640
It happens arbitrarily like a random resolve or reject.

6
00:00:20,640 --> 00:00:26,700
We want to know why was something rejected, for example, in the case of a HTTP request, why did this

7
00:00:26,700 --> 00:00:27,300
fail?

8
00:00:27,480 --> 00:00:31,380
And if it didn't fail, if it was resolved, what is the data that we got back?

9
00:00:31,380 --> 00:00:36,090
That's the point of making a request, at least most of the time, is you're trying to get some information.

10
00:00:36,390 --> 00:00:40,500
So we are going to make a fake request function here.

11
00:00:40,500 --> 00:00:46,860
We'll call it const fake request and we'll pass in a URL.

12
00:00:47,730 --> 00:00:52,350
So we'll call this like fake request, Reddit dot com or something.

13
00:00:52,650 --> 00:00:54,780
Or actually let's just do relative URLs.

14
00:00:54,780 --> 00:00:59,700
So slash dogs or slash log in and it's going to take some time.

15
00:00:59,850 --> 00:01:03,720
So we know that it's going to return a promise because it takes some time.

16
00:01:03,720 --> 00:01:06,660
So let's do return new promise.

17
00:01:08,580 --> 00:01:10,260
And then we have our call back in here.

18
00:01:10,260 --> 00:01:15,900
The I think it's called an execute or function executive function on the docks, at least it doesn't

19
00:01:15,900 --> 00:01:16,470
really matter.

20
00:01:16,470 --> 00:01:22,140
But we have our resolve parameter and our reject and then we'll do a set timeout.

21
00:01:23,130 --> 00:01:25,470
And how long should this timeout take?

22
00:01:25,620 --> 00:01:30,240
Let's say it takes 3 seconds to make a request, which is a pretty long time to make a request.

23
00:01:30,480 --> 00:01:34,020
And then our callback that goes here for set timeout.

24
00:01:35,350 --> 00:01:37,000
And what do we want to do in here?

25
00:01:37,270 --> 00:01:43,540
Let's pick a random number and decide randomly if this request worked or not, and we'll resolve it

26
00:01:43,540 --> 00:01:46,080
or reject sort of the same thing we've done before.

27
00:01:46,090 --> 00:01:47,500
Math at random.

28
00:01:47,770 --> 00:01:52,490
We'll save that to a variable cost rand and then we'll check if Rand.

29
00:01:52,510 --> 00:01:54,310
We don't want it to fail half the time.

30
00:01:54,310 --> 00:02:01,030
So let's say if Rand is less than 0.3, we will reject to start just like this.

31
00:02:02,880 --> 00:02:06,870
And then else we will resolve.

32
00:02:07,980 --> 00:02:09,419
So, so far, nothing new.

33
00:02:09,449 --> 00:02:10,919
We've already seen how to do this.

34
00:02:10,919 --> 00:02:15,690
If we call fake request, we don't even need to pass in a URL because we're not using it at the moment.

35
00:02:15,690 --> 00:02:17,850
So fake request dot.

36
00:02:17,880 --> 00:02:20,940
Let's just do a dot then a simple one and a dot catch.

37
00:02:21,270 --> 00:02:34,770
We will console.log request worked and then in our catch we'll do a console.log request failed.

38
00:02:35,370 --> 00:02:38,190
So this is kind of a recap of what we already know.

39
00:02:38,490 --> 00:02:41,550
It's the same idea, a set time out faking something.

40
00:02:41,550 --> 00:02:43,710
In the last video we were doing a dog promise.

41
00:02:43,710 --> 00:02:44,880
But it was the same thing.

42
00:02:45,030 --> 00:02:48,390
Except I think there's a 5050 chance now we have a 3070.

43
00:02:48,390 --> 00:02:55,770
So if we run this, it should take 3 seconds and we'll see either request worked or request failed and

44
00:02:55,770 --> 00:02:56,700
I won't keep going.

45
00:02:56,700 --> 00:02:57,900
Hopefully we get a request.

46
00:02:58,560 --> 00:03:00,990
One more chance to give it one more chance.

47
00:03:01,950 --> 00:03:02,240
Yeah.

48
00:03:02,400 --> 00:03:04,260
All right, well, you'll just have to trust me.

49
00:03:04,380 --> 00:03:06,330
Request will fail at some point.

50
00:03:06,690 --> 00:03:10,840
So this video is about how we can reject and resolve with a value.

51
00:03:10,860 --> 00:03:14,610
We can pass information in to the resolve or reject calls.

52
00:03:14,850 --> 00:03:16,490
So let's start with reject.

53
00:03:16,500 --> 00:03:17,830
If we reject.

54
00:03:17,850 --> 00:03:20,180
Why don't we pass in a status code?

55
00:03:20,190 --> 00:03:23,400
So a typical HTTP response includes a status code.

56
00:03:23,400 --> 00:03:30,190
You've probably seen 204 OC or definitely most likely at least seen 404 not found.

57
00:03:30,210 --> 00:03:32,660
Why don't we just pass that through?

58
00:03:32,670 --> 00:03:38,070
So reject and then let's pass an object in where status is set to 404.

59
00:03:38,850 --> 00:03:44,400
So now instead of our catch, if something is rejected, our callback instead of catch will run.

60
00:03:44,520 --> 00:03:51,780
We can add a parameter in now we could call it data or response and then we can look at resource status,

61
00:03:52,050 --> 00:03:55,380
console.log, reg status.

62
00:03:56,160 --> 00:04:00,150
And if this ever fails, let's do 1/2 just to make it easier.

63
00:04:00,900 --> 00:04:02,610
Come on, it worked.

64
00:04:03,030 --> 00:04:04,100
Okay, there we go.

65
00:04:04,110 --> 00:04:06,030
For a four request failed.

66
00:04:06,330 --> 00:04:09,390
So we have access to this data that we passed through.

67
00:04:09,420 --> 00:04:12,540
Just a single variable or it's not even a variable, a single value.

68
00:04:12,570 --> 00:04:16,110
We could pass more things like reject with this object.

69
00:04:16,110 --> 00:04:19,829
And then I don't know what else would make sense in this context, but we could put whatever we want

70
00:04:19,829 --> 00:04:20,040
in here.

71
00:04:20,040 --> 00:04:23,760
We could also pass in two and then we just have a second parameter.

72
00:04:23,760 --> 00:04:24,870
We could call it numb.

73
00:04:25,530 --> 00:04:30,180
Now, as far as resolving with the value or multiple values, it's the same process.

74
00:04:30,180 --> 00:04:32,220
Why don't we do something a bit more useful?

75
00:04:32,220 --> 00:04:37,380
Like when we call fake request, we'll pass in a URL, how about slash users?

76
00:04:37,710 --> 00:04:41,520
And then we'll use that URL to decide what to respond with.

77
00:04:41,520 --> 00:04:46,500
We're pretending to be an HTTP request where mocking it out, we're adding the delay.

78
00:04:46,530 --> 00:04:49,110
Why don't we start with a variable?

79
00:04:49,110 --> 00:04:50,070
We'll call this.

80
00:04:50,520 --> 00:04:51,570
What should we call this?

81
00:04:51,840 --> 00:04:55,020
Maybe data or pages?

82
00:04:55,020 --> 00:04:55,590
Sure.

83
00:04:55,860 --> 00:05:01,980
It will be an object where we map a URL like slash users to some information.

84
00:05:01,980 --> 00:05:08,940
And how about our users will be an array, an array of objects where we have an ID for each one.

85
00:05:08,940 --> 00:05:17,070
Let's just say ID of one username is Bilbo and we'll just have to users in here to keep it simple id

86
00:05:17,070 --> 00:05:23,670
of five username will be how about Esmeralda.

87
00:05:25,050 --> 00:05:31,920
So whatever URL is passed in, we will use that URL parameter to access information out of pages.

88
00:05:31,920 --> 00:05:34,380
Let's just add a second page in here.

89
00:05:34,380 --> 00:05:39,090
This one will be slash about and it will just be a string of text.

90
00:05:39,090 --> 00:05:41,220
This is the about page.

91
00:05:42,610 --> 00:05:42,980
Okay.

92
00:05:43,030 --> 00:05:51,640
So if you pass in slash users, what we'll do is take that URL and resolve with pages of URL.

93
00:05:52,630 --> 00:06:00,070
Let's just call this data, consent data, and then we'll resolve with an object, maybe so that we

94
00:06:00,070 --> 00:06:03,450
can include a status code of 200, which means okay.

95
00:06:03,460 --> 00:06:07,540
And then we'll also include data and I'll just use a shorthand instead of data.

96
00:06:07,540 --> 00:06:09,670
Call and data, we'll just add data.

97
00:06:10,380 --> 00:06:13,560
So if we check it out, we pass in slash users.

98
00:06:13,890 --> 00:06:15,360
Let's start with something easier.

99
00:06:15,390 --> 00:06:16,620
How about slash about.

100
00:06:17,520 --> 00:06:19,950
Then we'll go with response.

101
00:06:19,980 --> 00:06:23,640
Maybe Rez again and we'll console.log.

102
00:06:24,600 --> 00:06:31,860
Let's go with status code rez status and then duplicate that and do rez dot data.

103
00:06:32,220 --> 00:06:33,870
Which is the second thing.

104
00:06:33,870 --> 00:06:34,170
Right.

105
00:06:34,200 --> 00:06:39,060
We have status and data that we resolve with and we'll go with data here.

106
00:06:39,810 --> 00:06:42,540
Let's see what we get if it does resolve and it did.

107
00:06:42,570 --> 00:06:44,360
Status Code 200 data.

108
00:06:44,370 --> 00:06:45,720
This is the about page.

109
00:06:46,050 --> 00:06:51,690
Now, instead of randomly resolving or rejecting, let's get rid of the random number and instead we'll

110
00:06:51,690 --> 00:06:56,490
reject if the URL is invalid, if it's not contained within pages.

111
00:06:56,970 --> 00:06:59,430
So we'll get rid of all this or almost all.

112
00:06:59,670 --> 00:07:00,900
We'll just get rid of all of it.

113
00:07:01,260 --> 00:07:04,680
And what we'll do here is check within the set timeout.

114
00:07:04,680 --> 00:07:07,830
So we're still going to wait a full second or 3 seconds or whatever.

115
00:07:08,190 --> 00:07:11,250
We'll check if the URL was in pages.

116
00:07:11,250 --> 00:07:13,470
So if data, right.

117
00:07:13,470 --> 00:07:15,100
We're just plugging this URL in.

118
00:07:15,120 --> 00:07:20,940
If data we will resolve with this that we already have.

119
00:07:21,770 --> 00:07:23,780
Else will reject.

120
00:07:26,160 --> 00:07:31,170
With the object that has status set to 404, which means not found, which makes sense.

121
00:07:31,320 --> 00:07:35,840
The URL you passed in was not found in our fake or fake application.

122
00:07:35,850 --> 00:07:37,770
It has two end points right now.

123
00:07:37,980 --> 00:07:39,810
Why don't we test this out now?

124
00:07:39,810 --> 00:07:42,600
So if I do about we'll see if that one works.

125
00:07:42,840 --> 00:07:43,860
It should still work.

126
00:07:43,860 --> 00:07:45,540
I'll change it to users actually.

127
00:07:45,960 --> 00:07:54,570
And then if we try another one this time fake request, it will do slash dogs, which does not exist

128
00:07:54,570 --> 00:07:55,530
in our pages.

129
00:07:55,710 --> 00:07:59,370
So if you are like dogs, this line should be undefined.

130
00:07:59,370 --> 00:08:02,580
So this won't run and instead we'll reject.

131
00:08:03,240 --> 00:08:04,350
Let's double check.

132
00:08:05,190 --> 00:08:05,610
Cool.

133
00:08:05,610 --> 00:08:11,010
So our first one worked, we got status code 200 from the then callback right here.

134
00:08:11,640 --> 00:08:16,730
Red data were these two users and then the second request did not work.

135
00:08:16,740 --> 00:08:18,700
We got 404 requests failed.

136
00:08:18,720 --> 00:08:19,260
All righty.

137
00:08:19,260 --> 00:08:23,400
So in this video, we saw that we can resolve and reject with data.

138
00:08:23,400 --> 00:08:25,800
We can pass through some argument there.

139
00:08:25,800 --> 00:08:30,600
In this case, it was an object in both resolving and rejecting scenarios.

140
00:08:30,600 --> 00:08:36,120
And then instead of our then callback, we can add a parameter, give it whatever name we want, and

141
00:08:36,120 --> 00:08:37,350
it will have that data.

142
00:08:37,350 --> 00:08:41,100
It will be passed whatever the promise was resolved with.

143
00:08:41,100 --> 00:08:47,340
And then same thing for Ketch, except when the promise is rejected, this function will run and this

144
00:08:47,340 --> 00:08:49,680
parameter will have whatever value we passed.

145
00:08:49,680 --> 00:08:52,860
All right, so we're almost done with the basics of promises.

146
00:08:52,860 --> 00:08:57,930
We have one other really important topic to cover, which is chaining multiple promises.

147
00:08:57,930 --> 00:09:00,870
What if we wanted to make another request after the first one?

148
00:09:00,870 --> 00:09:02,610
We have a really nice way of doing it.

149
00:09:02,610 --> 00:09:03,450
So that's coming up next.

