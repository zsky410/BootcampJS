1
00:00:00,180 --> 00:00:06,660
Lastly, to end this section on functions and function adjacent content, we have kind of a quirk of

2
00:00:06,660 --> 00:00:08,790
JavaScript, something called hoisting.

3
00:00:09,150 --> 00:00:12,960
It does have to do with functions, but it's also not crucial.

4
00:00:12,960 --> 00:00:18,150
It's not something that you need to stress about or worry about if you're having trouble understanding.

5
00:00:18,150 --> 00:00:19,770
But I do need to show it to you.

6
00:00:19,770 --> 00:00:20,820
So here we go.

7
00:00:21,870 --> 00:00:22,950
What do you think happens?

8
00:00:22,950 --> 00:00:24,420
If I have a variable?

9
00:00:24,420 --> 00:00:32,100
I'll declare it with a var first, var animal and I'll set it equal to what's a good animal, a tapir.

10
00:00:32,930 --> 00:00:35,720
And then I console that log animal.

11
00:00:37,070 --> 00:00:39,110
This probably is obvious.

12
00:00:39,110 --> 00:00:41,720
Hopefully if I run this code, it prints it out.

13
00:00:42,290 --> 00:00:44,300
But what if I switch the order up?

14
00:00:45,290 --> 00:00:48,140
What if I try and print animal first?

15
00:00:48,530 --> 00:00:50,090
What do you expect to see?

16
00:00:52,360 --> 00:00:53,560
I get undefined.

17
00:00:53,740 --> 00:00:59,290
That may or may not have been what you expected, but if I comment this out, what do you expect to

18
00:00:59,290 --> 00:00:59,770
see?

19
00:00:59,920 --> 00:01:04,840
Console.log animal it doesn't exist so we get an error.

20
00:01:04,870 --> 00:01:09,340
Animal is not defined, but when I declare it after the fact.

21
00:01:09,820 --> 00:01:13,270
At this point, animal should still be undeclared, right?

22
00:01:13,270 --> 00:01:14,770
I should still get this error.

23
00:01:14,770 --> 00:01:15,940
But I don't.

24
00:01:16,780 --> 00:01:18,280
It tells me undefined.

25
00:01:18,880 --> 00:01:23,170
Remember that variables when we declare them, but don't initialize them.

26
00:01:23,560 --> 00:01:28,480
For example var x and I don't give it a value.

27
00:01:28,750 --> 00:01:30,520
X is set to undefined.

28
00:01:31,210 --> 00:01:37,060
Now what's happening here that is leading to this weird behavior is called hoisting when JavaScript

29
00:01:37,060 --> 00:01:38,650
is interpreting the code.

30
00:01:38,950 --> 00:01:41,500
What happens is that it hoists up.

31
00:01:41,500 --> 00:01:43,420
I'm doing air quotes, but you can't see it.

32
00:01:43,420 --> 00:01:46,410
It hoists up the variable declaration.

33
00:01:46,420 --> 00:01:50,380
This part right here, it doesn't actually move it in your code.

34
00:01:50,380 --> 00:01:57,760
It doesn't re-organize your code, but it runs this part first var animal and then you can think of

35
00:01:57,760 --> 00:01:59,710
it as doing this after the fact.

36
00:01:59,710 --> 00:02:01,840
So it starts with var animal.

37
00:02:01,930 --> 00:02:04,120
So animal has a value of undefined.

38
00:02:04,120 --> 00:02:07,930
Then we console that log animal which gives us undefined.

39
00:02:07,930 --> 00:02:10,810
And then finally animal is set to taper.

40
00:02:11,170 --> 00:02:14,920
So if I run this code we get undefined and then tap here.

41
00:02:15,010 --> 00:02:16,690
But that wasn't the code we had written.

42
00:02:16,690 --> 00:02:21,300
Of course this was the code, but we'll still get the same output.

43
00:02:21,310 --> 00:02:22,900
Undefined taper.

44
00:02:24,200 --> 00:02:30,500
So this behavior is called hoisting where JavaScript is going to see a VAR declaration, it will run

45
00:02:30,500 --> 00:02:34,490
this first and then later we'll fill the value with taper.

46
00:02:34,700 --> 00:02:36,830
Now, this is an odd behavior.

47
00:02:37,010 --> 00:02:42,240
It's probably not something you would ever want to happen if you're trying to print animal out.

48
00:02:42,260 --> 00:02:45,380
You probably want animal to be defined and have a value.

49
00:02:45,950 --> 00:02:52,040
So to avoid it, you just want to make sure you're always declaring your variables before you use them

50
00:02:52,040 --> 00:02:55,400
to and initializing them before you do anything with them.

51
00:02:55,490 --> 00:02:56,930
So that is var.

52
00:02:57,050 --> 00:02:58,240
Now let's compare.

53
00:02:58,250 --> 00:02:59,480
Let and const.

54
00:02:59,750 --> 00:03:01,520
Can probably tell where I'm going with this.

55
00:03:01,700 --> 00:03:06,770
Let's make a variable and instead of animal, let's go with shrimp.

56
00:03:06,920 --> 00:03:09,900
Shrimp will be set to harlequin shrimp.

57
00:03:09,920 --> 00:03:12,630
Very, very pretty species of shrimp.

58
00:03:12,650 --> 00:03:13,640
You can Google that.

59
00:03:14,330 --> 00:03:19,520
I wanted one as a pet for a long time until I learned the only food they eat is a starfish and they

60
00:03:19,520 --> 00:03:24,740
keep the starfish alive and just keep eating its legs and then letting it regrow and eating more legs.

61
00:03:24,770 --> 00:03:27,500
It's very, very harsh reality for the starfish.

62
00:03:27,530 --> 00:03:35,080
Anyway, if we cancel that log shrimp here, we probably expect to see Harlequin shrimp.

63
00:03:35,090 --> 00:03:39,650
But if I do the same thing I did with the VAR where I put the console.log first.

64
00:03:39,800 --> 00:03:40,820
What happens?

65
00:03:42,120 --> 00:03:43,110
We get something different.

66
00:03:43,110 --> 00:03:50,220
It tells us reference error cannot access shrimp before initialization, so variable declarations made

67
00:03:50,220 --> 00:03:54,930
with light are not hoisted like they were with VAR declarations.

68
00:03:55,170 --> 00:04:00,180
And that's one of the main reasons that we use lit aside from block scope as well.

69
00:04:00,330 --> 00:04:05,970
So it is very different than VAR two different ways of making variables, but clearly they behave differently.

70
00:04:06,690 --> 00:04:12,570
So when we declare variables let it's not hoisted, we cannot access it before we actually run this

71
00:04:12,570 --> 00:04:15,420
code, before this variable exists, which makes sense.

72
00:04:15,420 --> 00:04:17,490
That's how the language should work, right?

73
00:04:17,490 --> 00:04:21,990
We wouldn't want that to happen if we were trying to console that log shrimp.

74
00:04:21,990 --> 00:04:27,000
We expect shrimp to be a thing or we expect to get an error saying shrimp is not a thing.

75
00:04:27,270 --> 00:04:34,410
Unlike what happened here where we could console that log animal before we actually gave it a value.

76
00:04:34,440 --> 00:04:39,540
JavaScript knew it existed even though we hadn't hit that line yet, which is weird.

77
00:04:39,540 --> 00:04:40,320
It's bizarre.

78
00:04:40,440 --> 00:04:45,690
Now, if I do the same thing with Const instead of let we get the same behavior.

79
00:04:45,990 --> 00:04:48,060
So let and const are not hoisted.

80
00:04:48,540 --> 00:04:52,980
Now this brings us to functions with functions.

81
00:04:52,980 --> 00:04:58,050
If we write a function declaration like function howl.

82
00:04:59,950 --> 00:05:01,750
Which will console that log.

83
00:05:04,720 --> 00:05:05,890
Something like that.

84
00:05:06,160 --> 00:05:09,670
If I call Houle after the fact, clearly it works.

85
00:05:09,670 --> 00:05:11,200
We've done that a million times.

86
00:05:11,440 --> 00:05:14,020
But if I call howl before.

87
00:05:14,440 --> 00:05:15,670
What do you think happened?

88
00:05:16,700 --> 00:05:17,840
It still works.

89
00:05:17,930 --> 00:05:24,470
So functions at least function declarations that we have here, a function statement, those are hoisted.

90
00:05:24,680 --> 00:05:28,820
You can think of them as being put at the top of your file.

91
00:05:29,000 --> 00:05:33,230
So all the way up at the top, actually, that's not actually happening.

92
00:05:33,260 --> 00:05:37,580
It's just the JavaScript interpreter is running across these lines.

93
00:05:37,580 --> 00:05:44,120
It's processing these lines first so that we can call Houle, which is also unexpected.

94
00:05:44,450 --> 00:05:49,280
What's interesting is that if we instead write our function using a function expression.

95
00:05:49,430 --> 00:05:53,210
So I'll declare a variable I can use var or I could use let.

96
00:05:53,450 --> 00:05:54,630
I'll do var.

97
00:05:54,680 --> 00:06:01,120
Let's do a function called hoot and it will console that log.

98
00:06:01,490 --> 00:06:03,450
Whoo hoo!

99
00:06:05,150 --> 00:06:06,750
I'll call Hoot down below.

100
00:06:06,770 --> 00:06:08,030
We know that works.

101
00:06:08,990 --> 00:06:13,700
If I try and call Hoot first, this time it doesn't work.

102
00:06:14,210 --> 00:06:15,500
Why does it not work?

103
00:06:15,800 --> 00:06:17,570
We're using a different type of function.

104
00:06:17,570 --> 00:06:19,550
This is a function expression.

105
00:06:19,580 --> 00:06:23,390
These aren't hoisted, although that's not entirely true.

106
00:06:23,420 --> 00:06:26,190
The variable hoot does exist.

107
00:06:26,210 --> 00:06:28,820
If I were to cancel that log hoot.

108
00:06:32,220 --> 00:06:33,240
It exists.

109
00:06:33,850 --> 00:06:35,100
But it's not a function.

110
00:06:35,110 --> 00:06:35,530
Whoops.

111
00:06:35,560 --> 00:06:36,820
Get rid of those prints.

112
00:06:38,200 --> 00:06:40,670
And now if I count that log, we get undefined.

113
00:06:40,690 --> 00:06:43,300
It's the same thing we saw up here with animal.

114
00:06:44,050 --> 00:06:46,900
This variable declaration is hoisted up.

115
00:06:47,020 --> 00:06:52,680
JavaScript knows there's a variable called hoot, but it doesn't know the value, so it sets it to undefined.

116
00:06:52,690 --> 00:06:59,500
So if I try and execute hoot with parentheses, it's trying to call undefined, which you can't do.

117
00:07:00,670 --> 00:07:02,180
So the variable is hoisted.

118
00:07:02,200 --> 00:07:03,640
The value is not.

119
00:07:03,640 --> 00:07:12,000
And if I instead did let we get a different error with it because this variable declaration is not hoisted

120
00:07:12,010 --> 00:07:17,050
just like shrimp wasn't or whatever we did for let that was not hoisted.

121
00:07:17,050 --> 00:07:22,780
And because we're storing this function in the variable declared with lit, it's not hoisted at all.

122
00:07:22,780 --> 00:07:27,270
So we get this error saying you cannot use that function before it's declared.

123
00:07:27,280 --> 00:07:31,300
You can't access hoot before it exists, which makes sense.

124
00:07:31,300 --> 00:07:37,720
You shouldn't be able to do that, but you can with function declarations and when you use var.

125
00:07:37,990 --> 00:07:39,220
So that's hoisting.

126
00:07:39,460 --> 00:07:41,260
It's not the highest stakes.

127
00:07:41,260 --> 00:07:44,500
Super important thing that you have to understand before you move on.

128
00:07:44,500 --> 00:07:51,400
But it's kind of an interesting quirk of JavaScript and let an const exist to remedy some of these unexpected

129
00:07:51,400 --> 00:07:57,170
consequences that would happen with VAR where you could write code that seems like it shouldn't work.

130
00:07:57,190 --> 00:08:00,360
Maybe you wrote it in error and it didn't throw an error.

131
00:08:00,370 --> 00:08:04,720
Instead it treated the variable as undefined and it could be confusing.

132
00:08:04,720 --> 00:08:10,570
It could lead to issues, so definitely use it const but it's good to be aware of this weird hoisting

133
00:08:10,570 --> 00:08:10,840
thing.

