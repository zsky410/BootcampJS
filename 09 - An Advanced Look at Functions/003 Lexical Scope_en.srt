1
00:00:00,150 --> 00:00:03,480
Next up, we have a different type of scope called lexical scope.

2
00:00:03,510 --> 00:00:05,760
This one is pretty simple and straightforward.

3
00:00:05,880 --> 00:00:11,850
When we have nested functions, which we sometimes do, maybe not at this point with what we're writing,

4
00:00:11,850 --> 00:00:17,330
but later on and if you learn things like React, you'll have nested functions all the time.

5
00:00:17,340 --> 00:00:22,350
If I have a nested function like the one I have here, or the two functions I have outer and inside

6
00:00:22,350 --> 00:00:24,900
of it, I've defined another function called inner.

7
00:00:25,740 --> 00:00:28,170
Outer has a variable called hero.

8
00:00:28,500 --> 00:00:30,480
Hero is defined in this function.

9
00:00:30,780 --> 00:00:37,260
I don't have access to it outside of that function, but if I am nested further in in a different function,

10
00:00:37,260 --> 00:00:39,210
I still have access to hero.

11
00:00:39,600 --> 00:00:41,370
So I'll demonstrate this briefly.

12
00:00:41,550 --> 00:00:43,410
Let's make we'll just go with inner and outer.

13
00:00:43,410 --> 00:00:48,870
So function outer and then we'll have function inner.

14
00:00:49,920 --> 00:00:53,190
And in the outer function, we'll declare a variable.

15
00:00:53,490 --> 00:00:56,970
We'll call this movie equals Amadeus.

16
00:00:57,000 --> 00:00:58,020
Great film.

17
00:00:58,020 --> 00:01:00,030
Great, great, great film.

18
00:01:00,270 --> 00:01:03,810
And then in inner let's access movie.

19
00:01:04,290 --> 00:01:09,750
Let's console that log movie dot to uppercase.

20
00:01:12,550 --> 00:01:17,710
So at this point, how do I actually run inner if I run outer?

21
00:01:17,770 --> 00:01:21,950
I'll run the code over here and I call outor it doesn't return anything.

22
00:01:21,970 --> 00:01:24,250
All that it does is declare a variable.

23
00:01:24,250 --> 00:01:26,620
And then we have a function declaration.

24
00:01:26,740 --> 00:01:29,770
We're writing a function, we're declaring it, but we're never calling it.

25
00:01:29,770 --> 00:01:35,800
So if I execute inner from inside outer, let's try it again.

26
00:01:36,580 --> 00:01:43,210
Now it is successfully cancel out logging Amadeus in all caps movie was not defined in this function.

27
00:01:43,210 --> 00:01:47,440
It was defined in its parent and the outer function right here.

28
00:01:48,830 --> 00:01:50,170
Secondary to this.

29
00:01:50,180 --> 00:01:55,040
What if I tried to call inner from outside this function?

30
00:01:55,040 --> 00:01:56,390
I don't have access to it.

31
00:01:56,720 --> 00:01:59,930
It's just like I declared a variable inside of outer.

32
00:01:59,960 --> 00:02:01,370
I declared a function.

33
00:02:01,400 --> 00:02:02,510
It's called inner.

34
00:02:02,540 --> 00:02:04,520
I don't have access to it over here.

35
00:02:04,670 --> 00:02:11,120
I only have access to it inside of outer unless I were to return the function, which is something we'll

36
00:02:11,120 --> 00:02:12,230
see later on.

37
00:02:12,770 --> 00:02:18,920
So if I call inner from inside outer, this is getting confusing with these the naming here.

38
00:02:18,920 --> 00:02:23,240
If I execute outer, it declares variable movie sets.

39
00:02:23,240 --> 00:02:24,170
It's Amadeus.

40
00:02:24,260 --> 00:02:25,790
It knows about a function.

41
00:02:25,790 --> 00:02:30,410
We declare the function, we define it here inner and then we call it.

42
00:02:30,620 --> 00:02:36,350
So when it's called it console.log movie, it does not have a movie defined in here.

43
00:02:36,710 --> 00:02:42,680
So it will look for a different movie from the scope of the parent function, which is called outer.

44
00:02:43,190 --> 00:02:48,260
So lexical scope refers to the fact that nested functions are lexical bound.

45
00:02:48,260 --> 00:02:52,400
They're bound to the scope of their parent or of their outer functions.

46
00:02:52,400 --> 00:02:53,870
But it's a one way relationship.

47
00:02:53,870 --> 00:02:55,400
It doesn't work the other way around.

48
00:02:55,400 --> 00:03:02,180
If I were to define a variable and here let x equals ten, I do not have access to x outside that function,

49
00:03:02,180 --> 00:03:04,070
just like with regular function scope.

50
00:03:04,070 --> 00:03:11,300
We've seen earlier on if I run outer we get Amadeus from the inner function running the variable is

51
00:03:11,300 --> 00:03:15,050
successfully declared in inner, but I don't have access to it out here.

52
00:03:15,050 --> 00:03:20,780
So a variable declared in one function is available to nested functions within it.

53
00:03:20,780 --> 00:03:26,750
And then finally, if I were to declare movie in this function, a different movie, let's say movie

54
00:03:26,750 --> 00:03:29,240
equals what's another good movie?

55
00:03:29,720 --> 00:03:31,490
How about The Shining?

56
00:03:32,330 --> 00:03:37,010
What do you expect to happen here when we call Inner from inside outer?

57
00:03:37,010 --> 00:03:43,970
So when I execute outer, it will declare movie in the scope of this function called outer.

58
00:03:43,970 --> 00:03:48,890
Then we execute inner and inner defines its own version of movie called The Shining.

59
00:03:49,280 --> 00:03:50,180
That's the value.

60
00:03:50,180 --> 00:03:54,470
And then we're going to print movie to uppercase, which movie is printed?

61
00:03:55,190 --> 00:04:00,830
The Shining behind the scenes, the thought process, if you want to think of it that way inside of

62
00:04:00,830 --> 00:04:06,650
this function is when we reference movie, it's going to look to see, is there a movie in this function?

63
00:04:06,650 --> 00:04:08,630
Is there a movie defined in this scope?

64
00:04:08,630 --> 00:04:11,240
If it doesn't find it, it will look further up.

65
00:04:11,240 --> 00:04:12,920
Is there a movie defined up here?

66
00:04:13,160 --> 00:04:15,560
And if there is, then it will use that.

67
00:04:15,980 --> 00:04:19,310
So we could go one level further as an example.

68
00:04:19,310 --> 00:04:25,280
So we'll have movie Amadeus, movie The Shining, and then in here I'll do another inner function.

69
00:04:25,280 --> 00:04:28,310
I'll call this one extra inner.

70
00:04:30,740 --> 00:04:34,760
And we'll console.log moves to uppercase in here.

71
00:04:37,190 --> 00:04:40,340
And I'll make sure I call extra inner.

72
00:04:40,850 --> 00:04:46,280
So this is a very weird pattern, what I'm doing right now, but it illustrates the principles at play.

73
00:04:46,280 --> 00:04:51,320
So when I call our we define movie to Amadeus in the scope of the outer function.

74
00:04:51,350 --> 00:04:53,840
Then we execute inner and inner.

75
00:04:53,840 --> 00:04:57,650
We define movie right here with the value of The Shining.

76
00:04:57,650 --> 00:04:59,510
Then we execute extra inner.

77
00:04:59,540 --> 00:05:06,350
Extra Inner does not have a movie defined inside, so it will look up to the nearest scope, which is

78
00:05:06,350 --> 00:05:09,380
the inner function and use that value.

79
00:05:09,380 --> 00:05:13,400
So if I run outer we get the shining.

80
00:05:13,400 --> 00:05:16,670
If I were to comment this out, we don't get an error.

81
00:05:16,700 --> 00:05:21,440
It just continues up past inner it doesn't find movies, so it looks up again.

82
00:05:21,440 --> 00:05:22,820
Does it find movie there?

83
00:05:24,110 --> 00:05:25,010
And it does.

84
00:05:25,310 --> 00:05:26,540
And that's pretty much it.

85
00:05:26,540 --> 00:05:31,550
When you have a nested function, you have access to the variables declared in the scope of the parent

86
00:05:31,550 --> 00:05:35,450
function, and that continues down as many levels as you need to nest.

87
00:05:35,810 --> 00:05:41,090
It seems like it might be useless or not that useful, but as I mentioned, if you use things like react

88
00:05:41,090 --> 00:05:45,530
later on, you define functions that represent a component on your page.

89
00:05:45,530 --> 00:05:47,810
So you could have a function called to do list.

90
00:05:48,710 --> 00:05:55,460
And in that to do list component, you might have different variables like let to dos equals an array

91
00:05:55,460 --> 00:05:59,120
and let username equals something.

92
00:06:00,440 --> 00:06:04,370
Then you would have different functions for that to do list.

93
00:06:04,370 --> 00:06:09,320
You might have one called add to do or I can spell to do.

94
00:06:09,350 --> 00:06:16,040
You might have another one called remove to do and another one called update to do and they might use

95
00:06:16,040 --> 00:06:19,070
to dos and username in their function bodies.

96
00:06:19,070 --> 00:06:24,290
So we're grouping it all together into a to do list function because that's what React wants.

97
00:06:24,290 --> 00:06:30,260
But we still break up our code, our functionality into smaller pieces, and we have access to those

98
00:06:30,260 --> 00:06:32,960
variables declared in the outer function.

99
00:06:33,890 --> 00:06:35,990
Okay, so that's lexical scope.

