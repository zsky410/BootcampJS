1
00:00:00,120 --> 00:00:05,550
Next up, I want to spend a little more time talking about this slide, not just this beautiful slide

2
00:00:05,550 --> 00:00:10,170
with this stock photograph, but the content functions being objects.

3
00:00:10,170 --> 00:00:16,230
And what that means, because we're going to prepare for the next video where we talk about using functions

4
00:00:16,230 --> 00:00:21,090
within functions, accepting functions as arguments, returning functions as values.

5
00:00:21,090 --> 00:00:24,360
But first, let's talk more about functions as objects.

6
00:00:24,540 --> 00:00:27,420
So we saw that we could store a function in a variable.

7
00:00:27,960 --> 00:00:31,830
We can also store functions in something like an array if we wanted to.

8
00:00:31,860 --> 00:00:33,870
So let's see a quick example of that.

9
00:00:33,870 --> 00:00:39,570
I'm going to define for different functions, just very simple ones and will be the first one.

10
00:00:39,570 --> 00:00:44,700
It returns X plus Y and I'll mix up the different ways we declare them.

11
00:00:44,700 --> 00:00:52,020
So we have a function statement now we'll do a function expression, so I'll do const subtract equals

12
00:00:52,020 --> 00:00:52,920
function.

13
00:00:53,160 --> 00:01:04,230
I'll leave it anonymous x and y and it returns x minus y and then I'll do multiply function, multiply,

14
00:01:04,260 --> 00:01:13,620
multiply x, y, return x times y, and then one more is divide and I'll just duplicate this.

15
00:01:14,700 --> 00:01:19,590
So we have divide and it returns X divided by Y.

16
00:01:19,980 --> 00:01:21,540
So we have four functions.

17
00:01:21,690 --> 00:01:24,150
Now I'm going to put them all in an array.

18
00:01:25,170 --> 00:01:29,370
So I'll call this array operations for different operations.

19
00:01:29,370 --> 00:01:35,070
And all I need to do is add, subtract, multiply and divide.

20
00:01:36,120 --> 00:01:39,960
Now I have an array with four operations which are each a function.

21
00:01:39,960 --> 00:01:42,300
So for functions stored in an array.

22
00:01:43,050 --> 00:01:47,760
And if I wanted to execute any of them, let's say I want to call subtract.

23
00:01:47,970 --> 00:01:50,760
That is index of 101.

24
00:01:50,760 --> 00:01:58,290
So if I run my code over here, I can call operations square brackets one that gives me the function

25
00:01:58,290 --> 00:01:59,430
that doesn't call it.

26
00:01:59,430 --> 00:02:06,660
That's like me just typing, subtract, I'm not executing it, I'm just getting the value back, which

27
00:02:06,660 --> 00:02:07,680
is an object.

28
00:02:07,680 --> 00:02:09,509
It's a function which is an object.

29
00:02:09,870 --> 00:02:12,330
But if I add my friends afterwards.

30
00:02:13,720 --> 00:02:17,200
Right now I'm getting not a number because I haven't passed in any values.

31
00:02:17,440 --> 00:02:18,880
So I'm going to pass in.

32
00:02:18,880 --> 00:02:21,400
Let's go with 104.

33
00:02:22,680 --> 00:02:28,110
And I get 96, 100 minus four X is 100, y is four.

34
00:02:28,890 --> 00:02:35,940
If I wanted to call multiply index of two and I get 400 index of three.

35
00:02:36,150 --> 00:02:40,710
Give me divide and index of zero gives me add.

36
00:02:40,740 --> 00:02:45,970
Now this isn't very useful, putting them in an array to just call them manually one at a time.

37
00:02:45,990 --> 00:02:52,380
It's a lot clearer if I just say add whatever 104, we can see what we're doing.

38
00:02:52,380 --> 00:02:58,590
But the point that I'm trying to make here is that we can do things like loop over this array and call

39
00:02:58,590 --> 00:03:00,360
each function so we don't have to.

40
00:03:00,360 --> 00:03:01,290
Hard code it.

41
00:03:01,320 --> 00:03:08,430
I could do a four of so four let let's call it funk of operations.

42
00:03:11,330 --> 00:03:17,750
Funk is going to hold one of these functions as if it were a number or a string or any other value in

43
00:03:17,750 --> 00:03:18,200
an array.

44
00:03:18,200 --> 00:03:20,750
Because it is it's just any other value.

45
00:03:20,750 --> 00:03:23,300
As far as JavaScript is concerned, it doesn't care.

46
00:03:24,410 --> 00:03:28,340
And if I just write funk once again, that's not calling the function.

47
00:03:28,370 --> 00:03:30,320
That's what I did right here.

48
00:03:30,320 --> 00:03:32,780
I'm referencing it, I'm getting the value.

49
00:03:32,780 --> 00:03:35,150
But to execute it, I need per ends.

50
00:03:35,390 --> 00:03:39,800
So this variable will hold one of these functions each time through.

51
00:03:40,070 --> 00:03:45,770
And by adding the prince, we'll call for different functions by the time this loop finishes running.

52
00:03:46,310 --> 00:03:48,500
So let's just hard code in some numbers.

53
00:03:48,500 --> 00:03:52,940
Let's do how about 30 and five?

54
00:03:55,130 --> 00:03:56,540
And I'm not going to see a value.

55
00:03:56,550 --> 00:03:59,000
I won't see anything happen because I'm not printing anything out.

56
00:03:59,000 --> 00:04:00,140
It's all being returned.

57
00:04:00,140 --> 00:04:01,150
I just ran it.

58
00:04:01,160 --> 00:04:02,540
You don't see anything happen.

59
00:04:02,930 --> 00:04:05,330
So let's store each result in a variable.

60
00:04:05,360 --> 00:04:10,220
We'll call it result and then let's do a console.log result.

61
00:04:13,930 --> 00:04:15,220
Okay, let's run it.

62
00:04:16,300 --> 00:04:17,320
And there we go.

63
00:04:17,500 --> 00:04:20,290
We ran four functions with this loop.

64
00:04:20,740 --> 00:04:27,160
Maybe not something you would do, but I wanted to show you can we can treat functions as any other

65
00:04:27,160 --> 00:04:27,760
value.

66
00:04:27,790 --> 00:04:30,040
We can loop over them in an array.

67
00:04:30,520 --> 00:04:32,650
We can even store them in objects.

68
00:04:32,770 --> 00:04:34,480
So we have 35.

69
00:04:34,570 --> 00:04:36,640
That was for ADD 30 plus five.

70
00:04:36,670 --> 00:04:39,210
Then we have subtract 30 minus five.

71
00:04:39,220 --> 00:04:43,330
We have multiply 30 times five and divide 30 divided by five.

72
00:04:43,930 --> 00:04:45,250
So one more thing.

73
00:04:45,250 --> 00:04:47,640
I'll just show that we can store them in an object.

74
00:04:47,650 --> 00:04:49,990
We'll just go with a meaningless example for now.

75
00:04:50,020 --> 00:04:52,990
This is a topic we will revisit quite a bit.

76
00:04:53,020 --> 00:05:01,720
I'll make an object called thing and I'll set one property on it called Do something and it will be

77
00:05:01,720 --> 00:05:04,600
equal to the value will be multiply.

78
00:05:06,170 --> 00:05:07,670
So no quotes or anything.

79
00:05:07,670 --> 00:05:11,750
Not the string multiply like this, but the function multiply.

80
00:05:12,050 --> 00:05:14,390
I don't know why I'm saying multiply multiply.

81
00:05:14,630 --> 00:05:18,290
So we're now storing a function as a value in this object.

82
00:05:18,290 --> 00:05:21,140
And if I run my code and I look at thing.

83
00:05:22,090 --> 00:05:24,700
We have a property called Do Something.

84
00:05:24,700 --> 00:05:27,310
That's the key and the value is a function.

85
00:05:27,310 --> 00:05:30,340
So I can call think dot, do something.

86
00:05:31,450 --> 00:05:33,950
This doesn't execute it just like we saw earlier.

87
00:05:33,970 --> 00:05:35,550
I'm simply getting the value.

88
00:05:35,560 --> 00:05:36,880
I add the ends.

89
00:05:37,210 --> 00:05:39,700
Now it's running, but it doesn't have any arguments.

90
00:05:39,700 --> 00:05:41,890
So we'll do 50 and two.

91
00:05:42,280 --> 00:05:44,380
It multiplies them and we get 100.

92
00:05:44,500 --> 00:05:48,620
So I'm calling this function multiply, but it's part of an object.

93
00:05:48,640 --> 00:05:53,170
I'm referencing the object, the property with the parent and it calls it.

94
00:05:53,410 --> 00:06:00,790
Now, this might look kind of familiar where we have thing dot something and we put friends after it.

95
00:06:00,850 --> 00:06:06,410
That's because we just wrote our very first method by adding a function to an object.

96
00:06:06,430 --> 00:06:10,210
We're creating a method just like we have to uppercase.

97
00:06:10,240 --> 00:06:12,280
Notice we're doing the exact same thing.

98
00:06:12,280 --> 00:06:14,890
Some value dot to uppercase.

99
00:06:15,010 --> 00:06:16,720
Or if we have an array.

100
00:06:16,750 --> 00:06:18,200
Well, that's not a valid array.

101
00:06:18,220 --> 00:06:21,790
If we have an array dot and then we call.

102
00:06:21,790 --> 00:06:26,230
How about index of index of two?

103
00:06:26,410 --> 00:06:28,390
It tells us that's an index one.

104
00:06:28,630 --> 00:06:32,170
This is a function, but it's stored on the array.

105
00:06:32,590 --> 00:06:37,510
We're going to come back to objects and how we add methods and putting functions and objects and all

106
00:06:37,510 --> 00:06:39,550
that stuff in a separate section.

107
00:06:39,550 --> 00:06:41,400
So that's not the main takeaway here.

108
00:06:41,410 --> 00:06:42,820
That's a bigger topic.

109
00:06:42,940 --> 00:06:47,560
But I wanted to show that functions are simply values in JavaScript.

110
00:06:47,560 --> 00:06:53,560
We can store them in an array, we can call them dynamically put them in this func variable each time

111
00:06:53,560 --> 00:06:54,280
through the loop.

112
00:06:54,280 --> 00:06:55,210
Execute it.

113
00:06:55,720 --> 00:06:56,890
It's just a placeholder name.

114
00:06:56,890 --> 00:07:02,110
This will store the value of add or subtract or multiply or divide and actually execute it.

115
00:07:02,140 --> 00:07:04,720
We can also put a function in an object.

116
00:07:05,260 --> 00:07:09,970
So next we're going to see more of using functions within functions.

117
00:07:09,970 --> 00:07:15,790
So passing functions as an argument to another function or returning a function which is actually a

118
00:07:15,790 --> 00:07:17,320
very key part of JavaScript.

119
00:07:17,330 --> 00:07:18,220
So let's get started.

120
00:07:18,220 --> 00:07:18,990
That's next.

