1
00:00:00,120 --> 00:00:06,060
Next up, let's see how we can use Axios to make multiple change requests, just like we did with Fetch

2
00:00:06,060 --> 00:00:07,920
where we refactored our code.

3
00:00:07,920 --> 00:00:12,390
So it's nice and clean, but we're still having to repeat a couple of things over and over.

4
00:00:12,420 --> 00:00:15,810
We start by fetching the first ten planets, which is right here.

5
00:00:15,810 --> 00:00:16,230
Where are you?

6
00:00:16,230 --> 00:00:16,890
Right there.

7
00:00:17,010 --> 00:00:18,560
Then we check the status code.

8
00:00:18,570 --> 00:00:21,700
If it's not 200, we trigger the catch callback.

9
00:00:21,720 --> 00:00:23,500
Otherwise, we continue on.

10
00:00:23,520 --> 00:00:25,700
We parse the JSON that returns a promise.

11
00:00:25,710 --> 00:00:28,110
Then we print the planets afterwards.

12
00:00:28,110 --> 00:00:33,660
And we had to work with this promised resolve right here to print the planets so that we could chain

13
00:00:33,660 --> 00:00:38,460
on a dot, then again, so we could fetch more planets and keep the whole chain of promises going.

14
00:00:38,490 --> 00:00:43,200
Each one of these functions here returns a promise to rewrite this with Axios.

15
00:00:43,410 --> 00:00:47,630
It saves us a little bit of code, so I still have Axios included.

16
00:00:47,640 --> 00:00:48,960
Change the title here.

17
00:00:49,020 --> 00:00:51,120
Axios change requests.

18
00:00:53,290 --> 00:00:58,210
We'll start by running an Axios get call which returns a promise.

19
00:00:58,210 --> 00:01:01,360
We need to put our URL in there, then our.

20
00:01:01,600 --> 00:01:04,209
Then we don't have to parse.

21
00:01:04,209 --> 00:01:08,230
So all we need to do after that is print out the planets.

22
00:01:08,230 --> 00:01:10,440
So we'll go with rez.

23
00:01:10,480 --> 00:01:11,110
Sure.

24
00:01:12,550 --> 00:01:16,690
And actually, if all we want is the data, I'm just going to do rez data.

25
00:01:16,810 --> 00:01:25,060
I can use D structuring right here to grab the data out and we'll consider that log data to make sure

26
00:01:25,060 --> 00:01:25,900
it's showing up.

27
00:01:28,600 --> 00:01:29,680
Refresh the page.

28
00:01:30,010 --> 00:01:30,760
Awesome.

29
00:01:30,970 --> 00:01:34,560
So now we can print each planet for let planet.

30
00:01:34,570 --> 00:01:35,730
Same thing we've seen before.

31
00:01:35,740 --> 00:01:43,090
Planet of of data, dot results console.log planet name or something like that.

32
00:01:45,250 --> 00:01:46,510
Hopefully that works.

33
00:01:46,810 --> 00:01:47,430
There we go.

34
00:01:47,440 --> 00:01:49,460
We're getting the first ten planets.

35
00:01:49,480 --> 00:01:53,110
Then we have that data next URL.

36
00:01:53,260 --> 00:01:57,670
If we look in our data next right there, we make a request to that URL.

37
00:01:58,300 --> 00:02:01,510
So it would just be Axios dot get.

38
00:02:02,200 --> 00:02:08,860
And then in here, rather than passing in a string URL that we create, we'll just pass in data next,

39
00:02:08,860 --> 00:02:10,150
which is a URL.

40
00:02:10,660 --> 00:02:17,110
And if we want to chain on a dot then out here rather than right here, I mean, I can do this.

41
00:02:17,140 --> 00:02:18,550
This is totally fine.

42
00:02:18,550 --> 00:02:20,680
I can just copy this entire thing.

43
00:02:21,400 --> 00:02:25,570
I could make a second request this way, and let's just make sure that works.

44
00:02:25,570 --> 00:02:29,950
And I'll print the data out both times and I'll console.log each planet name.

45
00:02:30,250 --> 00:02:31,120
Does it work?

46
00:02:32,570 --> 00:02:32,960
All right.

47
00:02:32,960 --> 00:02:35,000
So our first ten and our second ten.

48
00:02:35,240 --> 00:02:39,920
But as we've seen, we can change events by returning a promise.

49
00:02:40,070 --> 00:02:43,160
So I don't have to nest the dot then, like I have here.

50
00:02:43,580 --> 00:02:45,110
I could move this out.

51
00:02:45,680 --> 00:02:54,440
If I return Axios target data next, which itself returns a promise so I can put the dot then like this,

52
00:02:54,590 --> 00:02:56,810
which is a little cleaner and simpler.

53
00:02:57,800 --> 00:02:58,580
Refresh.

54
00:02:59,330 --> 00:03:00,110
Same thing.

55
00:03:01,600 --> 00:03:06,100
So that's kind of it if you want to make one request and then another request using Axios.

56
00:03:06,130 --> 00:03:07,720
We don't have to worry about parsing.

57
00:03:07,720 --> 00:03:09,790
We don't have to worry about checking the status code.

58
00:03:10,090 --> 00:03:15,520
Otherwise it's pretty much the same as using fetch returns a promise we put our dot, then continue

59
00:03:15,520 --> 00:03:19,150
the then chain as long as we want to make these sequential requests.

60
00:03:19,150 --> 00:03:22,600
So this happens here, then this, then this.

61
00:03:22,990 --> 00:03:28,120
So the only way we make this request is if the first one was successful and we don't have a catch right

62
00:03:28,120 --> 00:03:28,330
now.

63
00:03:28,330 --> 00:03:31,210
So we could add that in sketch.

64
00:03:32,250 --> 00:03:32,940
Error.

65
00:03:34,170 --> 00:03:35,850
And what should we do here?

66
00:03:36,240 --> 00:03:37,590
Console.log.

67
00:03:38,490 --> 00:03:39,330
Error?

68
00:03:40,410 --> 00:03:40,830
Sure.

69
00:03:40,830 --> 00:03:41,820
Something like that.

70
00:03:42,450 --> 00:03:48,750
So if we want to refactor this in the same way that we created this nice chain of promises where we

71
00:03:48,750 --> 00:03:54,540
just call a function each time and pass in a function name each time to dot, then instead of having

72
00:03:54,540 --> 00:03:58,170
to use these inline anonymous functions, we can do that.

73
00:03:58,530 --> 00:04:01,390
I think I would go with what would we call it?

74
00:04:01,390 --> 00:04:02,100
The same thing.

75
00:04:02,100 --> 00:04:07,770
So fetch next planets and then print planets and then fetch next print planets and so on.

76
00:04:08,370 --> 00:04:09,670
So let's try that.

77
00:04:09,690 --> 00:04:16,470
We can start with const fetch next planet equals function.

78
00:04:16,709 --> 00:04:21,480
It will accept a URL and it will default to this URL.

79
00:04:21,510 --> 00:04:27,360
The first set of planets that we want to fetch, just like we did earlier right here.

80
00:04:29,460 --> 00:04:31,410
And then all we do is return.

81
00:04:31,860 --> 00:04:35,730
Axios dot get URL.

82
00:04:38,580 --> 00:04:44,610
So at this point I should be able to rewrite at least my very first Axios dot yet as just fetch next

83
00:04:44,610 --> 00:04:45,360
planet's.

84
00:04:47,300 --> 00:04:48,620
And I won't pass anything in.

85
00:04:48,650 --> 00:04:50,900
We'll use the default initial URL.

86
00:04:51,980 --> 00:04:53,470
Just make sure that part works.

87
00:04:53,480 --> 00:04:55,090
We should get the first ones.

88
00:04:55,790 --> 00:04:59,980
And it still continues to work because we're not ever calling fetch next planets again.

89
00:04:59,990 --> 00:05:04,760
And then we can replace this with fetch next planets as well if we wanted to.

90
00:05:04,790 --> 00:05:11,270
Although we will update this shortly, we'll pass in data next the same URL that we had before.

91
00:05:11,900 --> 00:05:12,740
Refresh.

92
00:05:13,730 --> 00:05:14,390
It still works.

93
00:05:14,390 --> 00:05:16,490
We get first ten, the second ten.

94
00:05:16,820 --> 00:05:18,690
Now let's make a print.

95
00:05:18,710 --> 00:05:22,880
Next planet, function, print, planet equals.

96
00:05:23,450 --> 00:05:24,980
And as a parameter.

97
00:05:25,010 --> 00:05:30,980
The way that this would work ideally is that we could call fetch next planets, then print planets.

98
00:05:31,550 --> 00:05:38,600
Now fetch next planets is just returning Axios dot get of that URL it returns the entire promise and

99
00:05:38,600 --> 00:05:44,000
that promise is resolved with the entire response as we've seen, and we're extracting the data.

100
00:05:44,000 --> 00:05:50,690
So why don't we do the same thing, the structure data here, and then we can move our console.log,

101
00:05:51,950 --> 00:05:58,040
we can move all of our code right there and then print the name out of each planet in data results.

102
00:05:58,400 --> 00:05:59,630
And then we return.

103
00:05:59,630 --> 00:06:01,100
Fetch next planets again.

104
00:06:01,250 --> 00:06:03,770
So now I should be able to rewrite this.

105
00:06:04,890 --> 00:06:12,420
Then print planets, then fetch next planets, then print planets.

106
00:06:12,690 --> 00:06:16,950
There is one thing we have to pay attention to in order for this to work the way we've written it,

107
00:06:17,070 --> 00:06:22,500
which is that we need to manually resolve our promise, return a resolved promise, just like we did

108
00:06:22,500 --> 00:06:23,040
here.

109
00:06:23,040 --> 00:06:29,820
Back when we did a similar refactor with fetch, we returned promised resolve data next, which then

110
00:06:29,820 --> 00:06:33,120
calls the dot, then that is the ensuing dot.

111
00:06:33,120 --> 00:06:39,000
Then we'll do the same thing, promise, dot, resolve, and then we'll just pass in data.

112
00:06:39,210 --> 00:06:45,180
Next, whatever this value is will be used and passed into the then callback.

113
00:06:45,300 --> 00:06:49,110
So if this is print planets, we'll print out all the planets.

114
00:06:49,110 --> 00:06:53,700
Then we return a resolved promise with the value of data.

115
00:06:53,880 --> 00:06:59,760
Next, which is a URL then that is passed into fetch next planets because it's the next.

116
00:06:59,910 --> 00:07:01,300
Then callback fetch.

117
00:07:01,320 --> 00:07:07,140
Next planet is expecting a URL to be passed in and it is so we don't use the default.

118
00:07:07,140 --> 00:07:09,960
Now we would use that next URL, make sure it works.

119
00:07:09,960 --> 00:07:10,800
And there we go.

120
00:07:11,160 --> 00:07:17,610
Our first ten and our second ten so we could continue to fetch and print as many as we wanted.

121
00:07:17,790 --> 00:07:19,080
We'll do one more round.

122
00:07:20,530 --> 00:07:21,340
So I'm printing.

123
00:07:21,340 --> 00:07:23,860
I should fetch and then print one more time.

124
00:07:24,100 --> 00:07:31,360
You could also move this each pair into its own function called fetch and print, and then that would

125
00:07:31,360 --> 00:07:34,750
return a promise and you could chain multiple fetch and prints together.

126
00:07:34,960 --> 00:07:36,250
But this is pretty clean.

127
00:07:36,250 --> 00:07:41,680
And if we compare it to what we had before, the only difference is that we had to check for a status

128
00:07:41,680 --> 00:07:42,730
code and parse.

129
00:07:42,730 --> 00:07:44,620
But with Axios, we don't.

130
00:07:44,740 --> 00:07:48,560
So it's just slightly cleaner, slightly quicker and easier to use.

131
00:07:48,580 --> 00:07:53,050
We don't have to worry about the fact that we get a stream back when we're working with Fetch and we

132
00:07:53,050 --> 00:07:55,750
have to parse the JSON and that itself takes time.

133
00:07:55,750 --> 00:07:57,760
It's asynchronous, it returns a promise.

134
00:07:57,970 --> 00:08:01,720
We just get the data back when it's ready and it's pre parsed for us.

135
00:08:02,080 --> 00:08:04,640
So that's a brief introduction to Axios.

136
00:08:04,660 --> 00:08:08,560
You will definitely get a lot more experience with it throughout the project.

137
00:08:08,560 --> 00:08:14,620
Part of this course we use Axios in a couple of projects to make requests both on the client and server

138
00:08:14,620 --> 00:08:15,130
side.

