1
00:00:00,180 --> 00:00:00,450
Hey.

2
00:00:00,450 --> 00:00:01,540
Welcome back, everyone.

3
00:00:01,560 --> 00:00:07,590
We've made it through all of the promises and asynchronous JavaScript callback hell stuff, and we needed

4
00:00:07,590 --> 00:00:10,620
to cover all of that so that we can start making requests.

5
00:00:10,800 --> 00:00:17,490
We're going to see how we can use JavaScript to get information from an API like load movie data or

6
00:00:17,490 --> 00:00:24,270
search for planets and Star Wars or get a random joke, which you could also apply to things like logging

7
00:00:24,270 --> 00:00:30,210
someone in via Facebook or sending some data off to your own server to save to a database.

8
00:00:30,210 --> 00:00:31,560
It's all the same process.

9
00:00:31,560 --> 00:00:37,590
We send a request from the client side and we have to understand asynchronous JavaScript and promises

10
00:00:37,590 --> 00:00:41,640
for a lot of the requests that will be sending, because these requests take time.

11
00:00:41,640 --> 00:00:43,560
We talked about that in the previous section.

12
00:00:43,560 --> 00:00:45,060
These things aren't immediate.

13
00:00:45,060 --> 00:00:45,660
It takes time.

14
00:00:45,660 --> 00:00:46,380
They might fail.

15
00:00:46,380 --> 00:00:48,390
They might I mean, it could take 10 seconds.

16
00:00:48,390 --> 00:00:49,710
It could take half a second.

17
00:00:49,710 --> 00:00:51,870
It doesn't matter how long exactly.

18
00:00:51,870 --> 00:00:54,180
It just matters that it's not instantaneous.

19
00:00:54,180 --> 00:00:57,240
So we have to worry about things like callbacks and promises.

20
00:00:57,600 --> 00:01:00,240
So there are multiple ways of making requests.

21
00:01:00,270 --> 00:01:02,580
We're going to start with the old school.

22
00:01:02,580 --> 00:01:11,430
Quite, quite ugly and confusing and hard to remember way XML HTTP requests, which is standard across

23
00:01:11,430 --> 00:01:18,090
all browsers, but a newer, much more modern and simpler syntax exists, which is called fetch.

24
00:01:18,090 --> 00:01:19,560
So we'll see both of those.

25
00:01:19,560 --> 00:01:25,020
Then we'll talk about a library that's really, really popular to help you make requests called Axios.

26
00:01:25,050 --> 00:01:27,390
It's a third party script we can include.

27
00:01:27,390 --> 00:01:29,160
It just simplifies the process.

28
00:01:29,160 --> 00:01:30,630
So we're doing the same thing.

29
00:01:30,630 --> 00:01:32,430
It's just a cleaner syntax.

30
00:01:32,820 --> 00:01:39,000
But before we talk about any of those options, we need to talk about this idea of Ajax, which is a

31
00:01:39,000 --> 00:01:40,020
term you may have heard.

32
00:01:40,020 --> 00:01:43,980
If you're brand new to JavaScript, you might have come across this term Ajax.

33
00:01:43,980 --> 00:01:50,430
It stands for asynchronous JavaScript and XML, which is kind of a misnomer because these days, most

34
00:01:50,430 --> 00:01:53,820
of the time we don't work with XML, we work with JSON.

35
00:01:53,820 --> 00:01:58,140
Nobody says age, but that's that's kind of what it is these days.

36
00:01:58,140 --> 00:02:01,500
So if you don't know what XML or JSON are, we'll get there.

37
00:02:01,500 --> 00:02:03,930
But let's just talk about this general idea.

38
00:02:04,260 --> 00:02:07,140
Back in the day before, Ajax was really a big thing.

39
00:02:07,140 --> 00:02:14,250
Before single page apps were common, we had one standard flow for loading new data or getting information

40
00:02:14,250 --> 00:02:17,340
from a server which included a page refresh.

41
00:02:17,400 --> 00:02:18,260
Here's an example.

42
00:02:18,270 --> 00:02:20,630
MDM is not a single page app.

43
00:02:20,640 --> 00:02:25,710
If I search for something here like React, I don't know if they have much on React actually, but if

44
00:02:25,710 --> 00:02:29,190
I hit Enter you'll see my page does change.

45
00:02:29,190 --> 00:02:33,990
I go to a new URL and the page actually reloads one more time.

46
00:02:33,990 --> 00:02:36,330
Let's look for div.

47
00:02:36,960 --> 00:02:38,040
Watch this little bar.

48
00:02:38,040 --> 00:02:41,520
Here we go to a completely different page.

49
00:02:41,610 --> 00:02:47,250
So what's happening here is the browser is sending a request for a new web page and it's going off to

50
00:02:47,250 --> 00:02:50,100
one of MDM servers depending on this URL.

51
00:02:50,100 --> 00:02:53,580
This is the URL that we requested by hitting enter.

52
00:02:53,670 --> 00:02:56,220
This URL is then received.

53
00:02:56,220 --> 00:03:00,000
The request is received by the server and the server wherever it is.

54
00:03:00,000 --> 00:03:05,640
And it compiles a new web page for us, including the HTML and CSS and any relevant JavaScript.

55
00:03:05,640 --> 00:03:07,590
It sends the entire page back.

56
00:03:07,590 --> 00:03:10,890
Our browser refreshes and this is what we see a whole new page.

57
00:03:11,340 --> 00:03:13,620
Contrast that with what happens here.

58
00:03:14,100 --> 00:03:16,230
This is a website called Can I Use?

59
00:03:16,260 --> 00:03:19,800
Let's go back to home and we'll search for something.

60
00:03:19,800 --> 00:03:23,370
How about gradient?

61
00:03:24,510 --> 00:03:25,890
I'm going to search for gradient.

62
00:03:26,010 --> 00:03:27,660
The page never reloads.

63
00:03:27,660 --> 00:03:29,100
I don't go anywhere else.

64
00:03:29,610 --> 00:03:31,260
Data is being loaded.

65
00:03:31,260 --> 00:03:35,490
There is communication with the server, but it's happening behind the scenes.

66
00:03:35,490 --> 00:03:37,590
It doesn't involve a whole page refresh.

67
00:03:37,590 --> 00:03:39,150
We're not getting a new web page.

68
00:03:39,150 --> 00:03:40,350
It's a different approach.

69
00:03:40,350 --> 00:03:44,490
We're just getting some data or can I use is asking for data from a server.

70
00:03:44,520 --> 00:03:47,730
It comes back and then new elements are added to the page.

71
00:03:47,730 --> 00:03:50,970
If I search for something else, let's go back to transform.

72
00:03:52,010 --> 00:03:53,110
You can see what happens.

73
00:03:53,120 --> 00:03:54,230
I'm not moving.

74
00:03:54,230 --> 00:03:55,640
The page is not changing.

75
00:03:55,640 --> 00:03:57,140
Well, the page is changing.

76
00:03:57,140 --> 00:03:59,270
The contents are changing, at least some of it.

77
00:03:59,270 --> 00:04:04,460
But it's a single page that we are staying on and this is really what Ajax is all about.

78
00:04:04,460 --> 00:04:11,360
The idea of Ajax is using these requests that we can make via JavaScript asynchronously.

79
00:04:11,360 --> 00:04:17,420
That's the asynchronous JavaScript to load some data from a server or to send data to a server to save

80
00:04:17,420 --> 00:04:22,730
something to a database, whatever it is, we're communicating with the server behind the scenes, not

81
00:04:22,730 --> 00:04:27,290
in between page loads like we had here where I search for something else.

82
00:04:28,760 --> 00:04:33,110
In between those loads, in between what a user sees and the page refreshing.

83
00:04:33,110 --> 00:04:35,680
That is when the communication is occurring with the server.

84
00:04:35,690 --> 00:04:40,880
Here, the communication is happening while I'm on this page, it's happening in the background and

85
00:04:40,880 --> 00:04:46,220
the general process is a request is sent based off of, in this case, a keyboard events.

86
00:04:46,220 --> 00:04:50,210
So if I type something else, what's another how about arrow functions?

87
00:04:51,380 --> 00:04:52,820
So I finished typing.

88
00:04:52,970 --> 00:04:57,020
There's some sort of balance on here, so it's not sending a request.

89
00:04:57,020 --> 00:05:01,490
Every single time I hit a letter, it's waiting until I finish a word or something.

90
00:05:01,520 --> 00:05:04,670
It's sending a request based off of my keyboard input.

91
00:05:05,120 --> 00:05:06,740
In the background, it's happening.

92
00:05:06,890 --> 00:05:08,720
We get some response from the server.

93
00:05:08,720 --> 00:05:13,220
The response usually these days is in the form of something called JSON.

94
00:05:13,820 --> 00:05:19,490
In the past it was XML, which is what was most commonly used and where the name Ajax comes from.

95
00:05:19,490 --> 00:05:22,250
But these days almost everyone uses JSON.

96
00:05:22,250 --> 00:05:25,010
So JSON is just a format for sending data.

97
00:05:25,220 --> 00:05:29,240
Imagine you have data representing all of this information we see here.

98
00:05:29,690 --> 00:05:35,000
The elements themselves are not being sent as HTML or the CSS is not being sent.

99
00:05:35,000 --> 00:05:39,850
All that's being sent is basically the text and some information that maybe doesn't show up.

100
00:05:39,860 --> 00:05:45,470
You know what supported, what's not supported and it's being sent as text, but rather than just plain

101
00:05:45,470 --> 00:05:47,930
text, it's turned into this JSON notation.

102
00:05:47,930 --> 00:05:49,940
It's a way of representing data.

103
00:05:49,970 --> 00:05:55,790
It's a protocol for communicating between servers or a protocol for formatting data and sending it to

104
00:05:55,790 --> 00:05:58,100
another server or to another browser somewhere.

105
00:05:58,640 --> 00:06:01,940
So we're going to talk about what it looks like in depth in the next video.

106
00:06:02,090 --> 00:06:07,100
But if we open up our dev tools here and you go to the network tab, I just want to show you that we

107
00:06:07,100 --> 00:06:09,380
can see the requests happening behind the scenes.

108
00:06:09,380 --> 00:06:14,480
Let's search for something else like spread and you'll see some activity over here.

109
00:06:14,870 --> 00:06:20,360
This activity represents different requests that have been sent if we go to X HR, which we haven't

110
00:06:20,360 --> 00:06:22,460
talked about yet, but that's what we'll see next.

111
00:06:22,910 --> 00:06:26,240
X HR here is going to show us the requests that have been sent.

112
00:06:26,540 --> 00:06:30,650
And we can see here is one sent to a can I use server?

113
00:06:30,740 --> 00:06:37,520
If we open this up, this was the URL of a sent to search equals spread and some information was sent

114
00:06:37,520 --> 00:06:37,970
back.

115
00:06:37,970 --> 00:06:40,000
This is the data that was sent back.

116
00:06:40,010 --> 00:06:45,170
If we take a look at it here, this is the data that came back from the server behind the scenes.

117
00:06:45,170 --> 00:06:50,690
So we end up with some information, let's see, MD and CSS properties box shadow spread radius.

118
00:06:50,690 --> 00:06:53,300
So that represents this result right here.

119
00:06:54,020 --> 00:07:00,110
Then we have another one operator spread, spread and de structuring, which is what we see here.

120
00:07:00,290 --> 00:07:04,460
So this information was sent back from the server, but it's not all of the information.

121
00:07:04,490 --> 00:07:06,620
It looks like there was a second request sent.

122
00:07:08,430 --> 00:07:09,810
And if we look at this.

123
00:07:10,790 --> 00:07:16,730
It's a lot more, but this is really the core of the browser support chart that is created.

124
00:07:17,090 --> 00:07:18,740
So we get the titles back.

125
00:07:18,740 --> 00:07:21,650
I guess they split it up maybe so you can get them faster.

126
00:07:22,190 --> 00:07:23,630
I'm not positive, actually.

127
00:07:23,630 --> 00:07:28,850
There's I'm sure there's a good reason why there are two requests instead of one that just gets everything

128
00:07:28,850 --> 00:07:29,510
at once.

129
00:07:29,720 --> 00:07:34,640
But here we can see a representation of the CSS property box shadow spread radius.

130
00:07:34,640 --> 00:07:37,160
That's a title that we have here.

131
00:07:38,030 --> 00:07:40,490
We have, let's see, support.

132
00:07:40,730 --> 00:07:43,490
And under support we can see all the different browsers.

133
00:07:43,490 --> 00:07:45,860
Here's all the support for Chrome and Edge.

134
00:07:45,860 --> 00:07:50,720
There's a lot of information here, so we won't go into detail on what this actually looks like.

135
00:07:50,720 --> 00:07:53,510
But the point is, this is not HTML that's being sent.

136
00:07:53,510 --> 00:07:57,680
It's not JavaScript itself, it's not actually JavaScript.

137
00:07:57,680 --> 00:08:00,650
It looks like JavaScript, but it's actually called JSON.

138
00:08:00,650 --> 00:08:06,440
It's simply a way of sharing data between a server and another server, a server in a browser that we

139
00:08:06,440 --> 00:08:08,960
can then use in JavaScript.

140
00:08:08,960 --> 00:08:13,640
It's really easy to to take JSON and turn it into JavaScript and do something with it.

141
00:08:13,640 --> 00:08:17,180
So we send a request or in this case the website sends a request.

142
00:08:17,180 --> 00:08:21,260
Whenever I type something, we can clear all of the requests we see here.

143
00:08:21,260 --> 00:08:23,660
Just like that, we search for something else.

144
00:08:23,660 --> 00:08:25,940
Like what's another one?

145
00:08:26,210 --> 00:08:28,190
The CSS HTML property.

146
00:08:28,880 --> 00:08:29,810
How is it so hard?

147
00:08:29,810 --> 00:08:32,000
How about text decoration?

148
00:08:33,450 --> 00:08:33,950
Okay.

149
00:08:33,960 --> 00:08:35,400
So there we go.

150
00:08:35,429 --> 00:08:36,730
Some requests for sent.

151
00:08:36,750 --> 00:08:38,110
We've got the first one.

152
00:08:38,130 --> 00:08:40,659
The second one, it looks like it sent two requests.

153
00:08:40,679 --> 00:08:45,720
I had text dash dx and then it sent another follow up for text dash deck.

154
00:08:47,040 --> 00:08:51,790
I must have been very slow and in my typing there and we get information back.

155
00:08:51,810 --> 00:08:55,120
This information is then parsed via JavaScript.

156
00:08:55,140 --> 00:08:59,100
JavaScript takes that information and turns it into elements on the page.

157
00:08:59,130 --> 00:09:00,690
It manipulates the DOM.

158
00:09:00,810 --> 00:09:02,700
So it's all happening behind the scenes.

159
00:09:02,700 --> 00:09:05,880
Some event usually triggers it typing or hitting a button.

160
00:09:05,910 --> 00:09:07,170
A request is sent.

161
00:09:07,170 --> 00:09:12,210
Life goes on in the browser while this request is is gone, or while we're waiting for a response.

162
00:09:12,240 --> 00:09:14,340
JavaScript doesn't just sit there doing nothing.

163
00:09:14,580 --> 00:09:18,420
We talked about that in the last section, how this all works with web APIs.

164
00:09:18,420 --> 00:09:20,250
So the browser is sending that request.

165
00:09:20,250 --> 00:09:24,880
Information comes back, then JavaScript takes the reins and decides what to do.

166
00:09:24,990 --> 00:09:30,750
Display some content in this case, add some classes, make some tables, some whatever.

167
00:09:30,750 --> 00:09:32,520
These are h threes or something.

168
00:09:32,520 --> 00:09:35,940
Add them all in the right order and we end up with this page.

169
00:09:36,090 --> 00:09:36,570
Okay.

170
00:09:36,570 --> 00:09:41,100
So next we're going to talk about JSON in more detail and then we'll start making our own requests.

