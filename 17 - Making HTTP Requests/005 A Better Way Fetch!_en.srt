1
00:00:00,450 --> 00:00:02,820
So that was a quick taste of XML.

2
00:00:02,850 --> 00:00:04,270
HTTP request.

3
00:00:04,290 --> 00:00:10,200
It's a mouthful both to say and also to type, especially once we get working with a bunch of callbacks

4
00:00:10,200 --> 00:00:12,510
and nesting things, it becomes very messy.

5
00:00:12,600 --> 00:00:14,820
So this is where Fetch comes in.

6
00:00:14,850 --> 00:00:18,960
Fetch is the newer way of making requests via JavaScript.

7
00:00:18,990 --> 00:00:27,360
It is something that essentially was created because Xlsx XML HTTP requests were just obnoxious or difficult

8
00:00:27,360 --> 00:00:28,070
to remember.

9
00:00:28,080 --> 00:00:30,600
Clunky things got messy with callbacks.

10
00:00:30,600 --> 00:00:34,050
They don't support promises, so fetch is the solution.

11
00:00:34,380 --> 00:00:38,490
The only problem with fetch is that it's not supported in Internet Explorer.

12
00:00:38,580 --> 00:00:45,900
If you take a look on MD, NW can see under I'm on the page called fetch API down at the bottom browser

13
00:00:45,900 --> 00:00:46,950
compatibility.

14
00:00:46,980 --> 00:00:48,900
What we care about is this part right here.

15
00:00:48,900 --> 00:00:55,410
These are all more advanced features, but this part here fetch in general no support in i.e. the main

16
00:00:55,410 --> 00:00:55,900
thing.

17
00:00:55,920 --> 00:01:02,190
Aside from the cleaner syntax and easier to remember terminology, the main advantage is that it supports

18
00:01:02,190 --> 00:01:05,040
promises which we spend a ton of time on.

19
00:01:05,069 --> 00:01:10,200
I hope by now if you if you made it through the promises section, you can understand why promises are

20
00:01:10,200 --> 00:01:13,080
useful, especially when we're making a bunch of requests.

21
00:01:13,410 --> 00:01:15,000
So let's see an example.

22
00:01:15,030 --> 00:01:18,090
This is what it looks like we call a method called fetch.

23
00:01:18,150 --> 00:01:22,740
We pass in some URL, then that returns a promise.

24
00:01:22,740 --> 00:01:27,330
And then of course the promise is either resolved or rejected if it is resolved.

25
00:01:27,360 --> 00:01:31,460
The value it's resolved with is a response object.

26
00:01:31,470 --> 00:01:33,740
It contains information about the response.

27
00:01:33,750 --> 00:01:39,300
Otherwise we can catch a rejected promise if for some reason the fetch didn't work for internet was

28
00:01:39,300 --> 00:01:41,670
just not connected for some reason.

29
00:01:41,700 --> 00:01:43,000
That would be one example.

30
00:01:43,020 --> 00:01:44,310
This code would run.

31
00:01:44,310 --> 00:01:47,480
So why don't we go back to our app JS?

32
00:01:47,520 --> 00:01:49,690
This is what we had from the last few videos.

33
00:01:49,710 --> 00:01:51,540
Let's rewrite this using fetch.

34
00:01:51,570 --> 00:01:55,480
This is done with creating a new XML HTTP request.

35
00:01:55,500 --> 00:02:03,450
I'm going to copy the URL from the very first request we send right here so we can recreate this and

36
00:02:03,450 --> 00:02:04,560
then I'll comment it out.

37
00:02:05,880 --> 00:02:09,360
So we're going to call, fetch and pass in that URL.

38
00:02:09,960 --> 00:02:15,900
So if I just ran this code in my browser, I'll save it to a variable so we can check on the status

39
00:02:15,900 --> 00:02:16,640
of the promise.

40
00:02:16,650 --> 00:02:17,610
We'll call this.

41
00:02:17,840 --> 00:02:18,810
I don't want to go with promise.

42
00:02:18,810 --> 00:02:19,680
How about prom?

43
00:02:20,160 --> 00:02:21,260
If we look at prom?

44
00:02:21,270 --> 00:02:22,500
No, not promo.

45
00:02:23,040 --> 00:02:24,240
Well, it's now been resolved.

46
00:02:24,240 --> 00:02:27,360
If I just paste it in and run it immediately, it's pending.

47
00:02:27,660 --> 00:02:30,780
But eventually it's either resolved or rejected.

48
00:02:30,780 --> 00:02:35,760
And really, all I want to show you here is that we're getting a promise back from that fetch method.

49
00:02:36,000 --> 00:02:39,240
So in order to run code when it is resolved, we need to use.

50
00:02:39,240 --> 00:02:43,260
Then in order to run code, if it's rejected, we need to use catch.

51
00:02:44,900 --> 00:02:46,850
So we can chain on our dot then.

52
00:02:47,090 --> 00:02:48,170
Dot then.

53
00:02:50,340 --> 00:02:53,570
It will be resolved with a response object.

54
00:02:53,580 --> 00:02:54,900
We can call it response.

55
00:02:55,230 --> 00:03:00,660
And if you want to learn more about the details of the API, if you go to Mdcn, there's a pretty there's

56
00:03:00,660 --> 00:03:02,280
a lot of articles actually about it.

57
00:03:02,280 --> 00:03:08,490
We've got this overview using fetch, fetch, basic concepts, very useful stuff.

58
00:03:08,490 --> 00:03:10,620
But here's the key thing that you should know.

59
00:03:10,620 --> 00:03:15,990
The fetch method takes one mandatory argument the path, the URL that we're trying to fetch, and it

60
00:03:15,990 --> 00:03:19,860
returns a promise that resolves to the response to the request.

61
00:03:20,370 --> 00:03:26,700
So the value that we would have that is passed in to our callback when this fetch promise hopefully

62
00:03:26,700 --> 00:03:29,370
resolves is a response object.

63
00:03:29,850 --> 00:03:33,810
And if we console.log that response object.

64
00:03:35,310 --> 00:03:38,670
You'll see it's a little different than what we've seen from Zeus.

65
00:03:39,180 --> 00:03:40,260
I'll try running this.

66
00:03:40,260 --> 00:03:41,400
Refresh my page.

67
00:03:41,820 --> 00:03:43,080
This is what we get back.

68
00:03:43,230 --> 00:03:44,610
A response object.

69
00:03:44,640 --> 00:03:47,970
It contains a status code 200, which means.

70
00:03:48,000 --> 00:03:49,050
Okay, that's good.

71
00:03:49,560 --> 00:03:56,070
It also has things like the URL that we requested and then the data that we want is located in the body.

72
00:03:56,070 --> 00:03:59,090
But it's not as simple as reading a property from this body.

73
00:03:59,100 --> 00:04:04,420
If you notice what it says here, it's a readable stream without going into too much detail.

74
00:04:04,440 --> 00:04:11,250
If we take a look at the response page, the response reference on MTN, this is a response we get back.

75
00:04:11,280 --> 00:04:13,680
It's resolved with a response object.

76
00:04:13,680 --> 00:04:17,010
You can name that parameter, whatever, but it will be a response object.

77
00:04:17,850 --> 00:04:19,620
If we read a little bit more about it.

78
00:04:20,190 --> 00:04:21,930
Scroll down somewhere on here.

79
00:04:22,230 --> 00:04:26,710
Whereas Body hears body, it is a readable stream.

80
00:04:26,730 --> 00:04:28,350
Now what is a readable stream?

81
00:04:28,380 --> 00:04:34,020
It is a stream of byte data and this is one of the key differences from using XLS.

82
00:04:34,050 --> 00:04:39,930
Aside from the actual syntactical differences, when you make a request, you get a response object

83
00:04:39,930 --> 00:04:40,400
back.

84
00:04:40,410 --> 00:04:48,960
The content of that response is included as a readable stream, and a stream is a way of accessing data

85
00:04:48,960 --> 00:04:54,150
that could be super large, it could be a massive amount of data, and you can access it in, process

86
00:04:54,150 --> 00:04:55,260
it as you go.

87
00:04:55,740 --> 00:04:57,180
Now, for us, that doesn't really matter.

88
00:04:57,180 --> 00:04:59,430
We're not accessing extremely large things.

89
00:04:59,430 --> 00:05:03,360
We're doing simple requests and just to get some data from an API.

90
00:05:03,540 --> 00:05:08,340
So it doesn't really matter except that we have to be aware of how we read that stream.

91
00:05:09,300 --> 00:05:14,460
Fortunately, if we go back to the response object, we scroll down to methods.

92
00:05:14,550 --> 00:05:17,400
There is a nice method called JSON.

93
00:05:17,730 --> 00:05:20,940
It takes a response stream and reads it to completion.

94
00:05:20,940 --> 00:05:24,890
So right now our response is not actually been read to completion.

95
00:05:24,900 --> 00:05:28,980
It's a response object, but the stream has not been read.

96
00:05:29,610 --> 00:05:33,050
Fortunately, we have a very, very easy way of doing it, as I just showed you.

97
00:05:33,780 --> 00:05:35,610
Response JSON.

98
00:05:36,150 --> 00:05:39,390
The only downside to this is that it takes time.

99
00:05:39,390 --> 00:05:40,320
It's asynchronous.

100
00:05:40,320 --> 00:05:47,490
That stream could be very, very large and reading it fully could take a while, relatively compared

101
00:05:47,490 --> 00:05:49,620
to something like JSON parse.

102
00:05:50,010 --> 00:05:54,870
So because of that, this JSON method returns a promise.

103
00:05:55,680 --> 00:05:59,190
If we console.log response json.

104
00:05:59,970 --> 00:06:01,260
This is what we get.

105
00:06:01,320 --> 00:06:02,940
It's another promise.

106
00:06:04,430 --> 00:06:08,960
So we have a promise returned from this and then another promise from this.

107
00:06:09,140 --> 00:06:16,610
So if we actually want the data, we need to do another dot then and it will be resolved with the data

108
00:06:16,610 --> 00:06:18,200
that is read and parsed.

109
00:06:18,380 --> 00:06:20,810
So now we could console.log data.

110
00:06:23,260 --> 00:06:26,680
So it's an extra step if we compare that to what we did up here.

111
00:06:26,710 --> 00:06:32,410
All we had to do was JSON, parse the response DOT response text here.

112
00:06:32,440 --> 00:06:37,390
We call a JSON method and then when it finishes, it's resolved.

113
00:06:37,390 --> 00:06:39,100
We can have access to the data.

114
00:06:41,080 --> 00:06:41,980
And there we go.

115
00:06:42,160 --> 00:06:46,370
Now we have our API data with the results and we can do whatever we want with them.

116
00:06:46,390 --> 00:06:49,360
So why don't we do something simple like print out each planet?

117
00:06:49,570 --> 00:06:53,880
So we would have data inside of this, then callback.

118
00:06:53,890 --> 00:06:59,110
After we've read the JSON data dot and then response.

119
00:06:59,440 --> 00:07:01,000
Results I think is what it was.

120
00:07:01,810 --> 00:07:07,240
And we'll loop over that for let planet of Data results.

121
00:07:07,240 --> 00:07:11,290
We can double check this data is this whole thing results.

122
00:07:12,610 --> 00:07:14,000
We'll do what we did earlier.

123
00:07:14,020 --> 00:07:15,370
Console.log.

124
00:07:15,460 --> 00:07:16,990
Planet Dot name.

125
00:07:18,630 --> 00:07:19,530
Run it again.

126
00:07:20,280 --> 00:07:20,910
There we go.

127
00:07:20,940 --> 00:07:25,650
We're getting every planet's name, at least the first ten planets that we're getting from this one

128
00:07:25,650 --> 00:07:26,520
API call.

129
00:07:26,850 --> 00:07:28,740
Sending a request to this URL.

130
00:07:29,910 --> 00:07:33,250
So this is the first part of fetch when things go right.

131
00:07:33,270 --> 00:07:34,380
We don't have any errors.

132
00:07:34,380 --> 00:07:36,540
Or if we do, we don't know about them.

133
00:07:36,960 --> 00:07:38,790
So let's put a catch in here.

134
00:07:40,770 --> 00:07:44,580
If fetch returns a promise, it's resolved or rejected.

135
00:07:44,580 --> 00:07:45,900
Right now we're not catching it.

136
00:07:45,900 --> 00:07:50,880
So why don't we catch and do something where we console.log?

137
00:07:51,360 --> 00:07:57,570
Something went wrong with fetch and then we can console that log error as well.

138
00:07:58,940 --> 00:08:00,210
Let's see what happens.

139
00:08:00,230 --> 00:08:01,890
Right now, nothing should happen.

140
00:08:01,910 --> 00:08:03,530
We should still see the same result.

141
00:08:03,530 --> 00:08:10,940
But why don't I try fetching some URL that doesn't exist if I visit this URL myself just in the browser.

142
00:08:13,560 --> 00:08:15,480
This page is not the page you're looking for.

143
00:08:15,510 --> 00:08:17,940
This is a 404 error page.

144
00:08:18,660 --> 00:08:26,790
And when we got a 404 with czars with this approach, our failure callback ran this on error.

145
00:08:26,790 --> 00:08:28,380
Callback was executed.

146
00:08:28,560 --> 00:08:34,289
However, fetch is different if we try and send a request to this URL which I am telling you now will

147
00:08:34,289 --> 00:08:35,549
give us a 404.

148
00:08:36,179 --> 00:08:37,260
Let's take a look.

149
00:08:38,030 --> 00:08:38,600
Huh?

150
00:08:38,870 --> 00:08:43,419
We did get a 404, but our catch never ran on.

151
00:08:43,429 --> 00:08:44,660
Caught in promise.

152
00:08:45,080 --> 00:08:46,550
Unexpected token.

153
00:08:46,850 --> 00:08:52,640
So what's happening here is that we're actually getting the HTML four, a four page back, and we're

154
00:08:52,640 --> 00:08:55,460
trying to parse that as JSON, but it's not JSON.

155
00:08:55,700 --> 00:08:59,390
So why don't we start by just constantly logging the response in here?

156
00:09:02,360 --> 00:09:07,490
Because it seems like if the status code is 404, then the dot then should not run.

157
00:09:07,490 --> 00:09:12,030
That seems like an error where our cat should run, but that's not how fetch is set up.

158
00:09:12,050 --> 00:09:15,500
If we look at the response status is 404.

159
00:09:15,920 --> 00:09:16,940
But it still worked.

160
00:09:16,940 --> 00:09:17,840
It's still ran.

161
00:09:17,840 --> 00:09:20,000
Our catch, the promise was resolved.

162
00:09:20,150 --> 00:09:21,320
So what's going on?

163
00:09:21,590 --> 00:09:23,860
Well, this is just how fetch is set up.

164
00:09:23,870 --> 00:09:29,270
If you take a look at this paragraph here on the using fetch overview on MDM, the promised returned

165
00:09:29,270 --> 00:09:36,560
from fetch will not reject on error status or HTTP error status even if the response is a 404 which

166
00:09:36,560 --> 00:09:38,780
is not found or 500.

167
00:09:38,780 --> 00:09:45,260
Instead it resolves normally and it will only reject on network failure or if anything prevented the

168
00:09:45,260 --> 00:09:46,550
request from completing.

169
00:09:46,820 --> 00:09:50,600
So this sketch is not going to run.

170
00:09:50,630 --> 00:09:58,010
The promise will not be rejected just because the server responded with not a 200, not an OC status

171
00:09:58,010 --> 00:10:00,650
code, because we still got a response.

172
00:10:01,160 --> 00:10:03,050
So that's all that this cares about.

173
00:10:03,080 --> 00:10:06,740
This code runs whenever you get a response, whether it's the one you want it or not.

174
00:10:07,250 --> 00:10:13,840
Unlike our HR, where the failure callback would run, the error callback did run on a 400 error or

175
00:10:13,850 --> 00:10:14,450
404.

176
00:10:14,480 --> 00:10:15,140
Excuse me.

177
00:10:15,140 --> 00:10:21,020
So fetch will only return a rejected promise in the event that your internet's not working.

178
00:10:21,020 --> 00:10:22,700
The request can't be made at all.

179
00:10:22,700 --> 00:10:24,560
And we just don't get a response.

180
00:10:24,560 --> 00:10:26,660
And I can show you that if I turn my Internet off.

181
00:10:26,660 --> 00:10:27,890
So that's what I'm going to do.

182
00:10:27,890 --> 00:10:29,420
Okay, it's off.

183
00:10:30,350 --> 00:10:31,280
Let's refresh.

184
00:10:31,760 --> 00:10:34,430
Now, it's actually running that catch callback.

185
00:10:34,430 --> 00:10:40,430
Something went wrong with fetch type error, failed to fetch so it didn't get a response period.

186
00:10:40,430 --> 00:10:43,820
So the then callback was ignored, the promise was rejected.

187
00:10:43,820 --> 00:10:50,150
And this runs so inside of this callback here, if we want to ensure that we actually got a status code

188
00:10:50,180 --> 00:10:57,620
200 in OC before we try and read JSON, before we do anything with it, what we can do is check.

189
00:10:58,900 --> 00:11:04,270
If response dot OC that is a property on the response.

190
00:11:04,270 --> 00:11:07,540
Well, we don't see it here, but we did see it earlier.

191
00:11:07,540 --> 00:11:11,080
If that's the case, then we can run this code.

192
00:11:11,200 --> 00:11:18,340
Or another way of doing it would be if response is not OC, then we could console that log something

193
00:11:18,910 --> 00:11:24,250
error, not status 200.

194
00:11:25,060 --> 00:11:32,830
And then we can wrap this in an else because we only want to attempt parsing if the request came back.

195
00:11:32,830 --> 00:11:34,120
Status 200.

196
00:11:34,150 --> 00:11:41,350
If instead we got a 404, we'll just print this out and we could also console that log response status.

197
00:11:42,790 --> 00:11:45,760
So now if we try it again, here we go.

198
00:11:45,760 --> 00:11:47,560
Error, not status 200.

199
00:11:47,560 --> 00:11:50,980
We got 404 and this code did not run.

200
00:11:51,400 --> 00:11:52,870
So this is one option.

201
00:11:52,870 --> 00:11:56,110
But we also have a way of using this catch.

202
00:11:56,320 --> 00:12:03,880
If I throw an error instead of a dot, then it will trigger the callback in my catch so I could rewrite

203
00:12:03,880 --> 00:12:04,750
it like this.

204
00:12:04,750 --> 00:12:06,940
Throw new error.

205
00:12:06,970 --> 00:12:16,540
If you've never seen how to throw an error, it looks like this will say status code error and then

206
00:12:16,540 --> 00:12:19,600
interpolate using dollar sign instead of a string template.

207
00:12:19,600 --> 00:12:20,260
Literal.

208
00:12:20,260 --> 00:12:25,630
I'll put response status here, so let's test it out.

209
00:12:25,840 --> 00:12:28,390
This URL should give us a for or for.

210
00:12:28,390 --> 00:12:30,620
If we try and visit it in our browser, it gives us a four.

211
00:12:30,660 --> 00:12:35,440
For earlier we saw that we got a404 status code, which means not found.

212
00:12:35,860 --> 00:12:37,990
Then the promise will still be resolved.

213
00:12:37,990 --> 00:12:40,480
This code runs up until this point.

214
00:12:40,750 --> 00:12:43,570
This will be true because it is not OC.

215
00:12:43,630 --> 00:12:50,020
So then we throw a new error which should trigger this callback and the error will be this error we're

216
00:12:50,020 --> 00:12:50,860
passing through.

217
00:12:50,860 --> 00:12:54,760
When we throw an error, we have access to it here in our catch.

218
00:12:55,420 --> 00:12:56,410
So let's see.

219
00:12:57,580 --> 00:12:58,240
There we go.

220
00:12:58,240 --> 00:13:01,960
Something went wrong with fetch status code error 404.

221
00:13:02,080 --> 00:13:03,610
So this is the basics of fetch.

222
00:13:03,610 --> 00:13:08,410
I wish that you didn't have to worry about the status code, but that's where Axios comes in, which

223
00:13:08,410 --> 00:13:10,210
is another improvement upon fetch.

224
00:13:10,210 --> 00:13:11,080
In my opinion.

225
00:13:11,080 --> 00:13:16,000
This is still better than what we saw here, although we were making two requests here.

226
00:13:16,000 --> 00:13:21,610
But as you can imagine with with promises which we automatically get from fetch, it's pretty easy to

227
00:13:21,610 --> 00:13:25,840
chain and make multiple requests in a row, which is what we'll talk about in the very next video.

