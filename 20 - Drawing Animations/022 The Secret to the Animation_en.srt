1
00:00:00,820 --> 00:00:04,660
Now that we understand the dash ray and dash offset properties, let's understand how we're going to

2
00:00:04,660 --> 00:00:06,790
use them to actually implement this animation.

3
00:00:06,820 --> 00:00:10,360
I want to first begin by taking a look at the finished product one more time.

4
00:00:10,450 --> 00:00:12,380
So this is what we are going after.

5
00:00:12,400 --> 00:00:16,280
We want to have the entire stroke starting off as covered.

6
00:00:16,300 --> 00:00:21,270
So that would imply that we're going to begin with a dash array with whatever our perimeter value is.

7
00:00:21,280 --> 00:00:23,500
So for us, it's right around 565.

8
00:00:24,970 --> 00:00:28,310
And we should also have a dash offset starting at zero.

9
00:00:28,330 --> 00:00:32,830
So that's how we're going to get that full arrow or that full border excuse me, starting up when we

10
00:00:32,830 --> 00:00:34,210
first start our application.

11
00:00:34,660 --> 00:00:36,660
Now, here's where things get challenging.

12
00:00:36,670 --> 00:00:39,310
Take note of how this animation plays out.

13
00:00:39,850 --> 00:00:46,720
We're starting from the very top edge and we're going to show white space going in the clockwise direction.

14
00:00:46,930 --> 00:00:49,970
That's kind of counter to what we were just discussing, remember?

15
00:00:49,990 --> 00:00:54,610
The default behavior is to draw the border starting from right here as opposed to anything up at the

16
00:00:54,610 --> 00:00:55,060
top.

17
00:00:56,420 --> 00:01:02,810
And then the dash offset is going to add in additional white space going in the counter-clockwise direction.

18
00:01:03,200 --> 00:01:08,360
So this final product has the spacing or the white space going in clockwise.

19
00:01:08,600 --> 00:01:13,610
What I just showed you around Dash Offset is going to add space in the counterclockwise.

20
00:01:14,030 --> 00:01:18,620
So in other words, if we use dash offset as we know it right now and we start off at zero and let's

21
00:01:18,620 --> 00:01:21,440
say 1/2 goes by and we change that to 20.

22
00:01:21,890 --> 00:01:23,050
We're going to get that gap.

23
00:01:23,060 --> 00:01:26,340
Then if we go to 40, we're going to get that gap and so on.

24
00:01:26,360 --> 00:01:30,230
So again, it is playing in the opposite direction of what we really want.

25
00:01:30,710 --> 00:01:32,090
So how are we going to fix this?

26
00:01:32,120 --> 00:01:35,960
Well, as usual, it's just a little trick dash offset.

27
00:01:35,990 --> 00:01:37,490
We're just going to make it negative.

28
00:01:37,760 --> 00:01:39,270
Yep, that's pretty much it.

29
00:01:39,380 --> 00:01:44,870
Providing a negative value of dash offset is going to add in that white space in the opposite direction.

30
00:01:44,870 --> 00:01:49,580
So it's going to start to go in the clockwise direction instead of the counterclockwise that we saw

31
00:01:49,580 --> 00:01:50,660
in the last video.

32
00:01:52,250 --> 00:01:57,140
So if I change dash offset to -40, we're going to get the white space right there.

33
00:01:57,140 --> 00:02:01,340
And then as we start to take that number more negative, it's going to start to go in the clockwise

34
00:02:01,340 --> 00:02:01,730
direction.

35
00:02:01,730 --> 00:02:05,240
We're going to see more and more white space like so.

36
00:02:05,810 --> 00:02:11,420
So you can imagine that for every second that goes by, we're going to change dash offset to be slightly

37
00:02:11,420 --> 00:02:12,770
more and more negative.

38
00:02:12,770 --> 00:02:17,420
And that's what's going to give us white space going all the way around the outside edge until it eventually

39
00:02:17,420 --> 00:02:19,820
comes back to the same right hand side.

40
00:02:20,680 --> 00:02:23,920
It's now the last big question is how are we going to actually get.

41
00:02:25,250 --> 00:02:30,890
The animation to start at the top like up there, as opposed to the default behavior, which is to have

42
00:02:30,890 --> 00:02:34,340
the entire border being drawn right there on the right hand side.

43
00:02:34,790 --> 00:02:36,560
Well, once again, a little trick.

44
00:02:37,040 --> 00:02:38,300
It's usually how it works out.

45
00:02:38,480 --> 00:02:44,840
So the little trick we're going to use, we're just going to rotate this entire circle, -90 degrees.

46
00:02:44,900 --> 00:02:47,510
So we're going to take the entire circle, rotate it -90.

47
00:02:47,510 --> 00:02:51,500
So we're going to take it 90 degrees in the counterclockwise direction.

48
00:02:51,500 --> 00:02:52,790
Counterclockwise.

49
00:02:54,070 --> 00:02:58,180
To do that rotation, we can add on an additional property to our circle element.

50
00:02:59,160 --> 00:03:01,290
We're going to provide transform.

51
00:03:02,630 --> 00:03:05,360
Is rotate -90.

52
00:03:05,870 --> 00:03:08,000
And then this will also take two other arguments.

53
00:03:08,000 --> 00:03:12,860
When we call rotate, we're going to pass in 100 oops, 101 hundred.

54
00:03:13,400 --> 00:03:14,090
Let me expand this.

55
00:03:14,090 --> 00:03:15,350
Just we can see it more easily.

56
00:03:17,230 --> 00:03:21,460
So as you would guess, the first argument to rotate is going to be the amount we want to rotate and

57
00:03:21,460 --> 00:03:26,680
the direction that we are rotating in a negative value means that we're going to rotate in the counterclockwise

58
00:03:26,680 --> 00:03:27,370
direction.

59
00:03:28,060 --> 00:03:32,710
The second two values right here define the origin point of the transform.

60
00:03:32,710 --> 00:03:38,080
So by default, usually a transform is done against the top left corner of our SVG element.

61
00:03:38,530 --> 00:03:44,410
By passing in at 101 hundred, we are saying that we want to rotate this circle around what happens

62
00:03:44,410 --> 00:03:46,810
to also be the center point of the circle.

63
00:03:46,810 --> 00:03:49,810
So we're going to rotate around that point right there.

64
00:03:51,790 --> 00:03:54,250
So let's save this refresh.

65
00:03:54,940 --> 00:03:59,350
And now if we start off with a data or a dash offset of zero.

66
00:04:01,970 --> 00:04:04,580
We start up right there, everything is matching up on the top.

67
00:04:04,580 --> 00:04:09,380
And then as we start to make this number more and more negative, so we'll go to negative ten, it's

68
00:04:09,380 --> 00:04:11,030
going to start to give us that white space.

69
00:04:11,030 --> 00:04:18,529
As I go to -50, give us more as we go to -100, and we can start to see how as we start to make dash

70
00:04:18,529 --> 00:04:23,030
offset more and more negative, we're going to get that white space around that outside edge going into

71
00:04:23,030 --> 00:04:26,780
the clockwise direction, just like we saw on our finished product over here.

72
00:04:27,410 --> 00:04:28,250
So that's pretty much it.

73
00:04:28,250 --> 00:04:29,150
That is the secret.

74
00:04:29,150 --> 00:04:32,150
The secret is to use the negative value of dash offset.

75
00:04:32,660 --> 00:04:37,280
We're going to use a dash array value equal to the entire perimeter of the circle.

76
00:04:38,410 --> 00:04:44,380
And then finally, we're going to transform the circle as well to implement a rotation, -90 degrees.

77
00:04:46,240 --> 00:04:46,540
Okay.

78
00:04:46,540 --> 00:04:50,830
So now that we see like the general idea, essentially what we're trying to do here, the last thing

79
00:04:50,830 --> 00:04:53,980
we have to do is essentially take this entire strategy.

80
00:04:54,010 --> 00:04:57,440
We need to make sure that every single time we tick our timer.

81
00:04:57,460 --> 00:05:01,840
So like over here with on tick, every single time that happens, we need to make sure that we start

82
00:05:01,840 --> 00:05:05,050
to make dash offset right here more and more negative.

83
00:05:06,310 --> 00:05:11,260
We're also going to add in a little bit of code to kind of adjust these values of dash array and calculate

84
00:05:11,260 --> 00:05:12,460
that value on the fly.

85
00:05:12,490 --> 00:05:17,110
Because obviously putting in the parameter or assuming the parameter right here, that is a calculated

86
00:05:17,110 --> 00:05:20,670
value we have to do two times pi times the radius.

87
00:05:20,680 --> 00:05:25,180
So rather than encoding the dash array right here, we'll instead set that programmatically.

88
00:05:25,180 --> 00:05:30,580
So we'll read the value of the radius of the circle, calculate the perimeter, stick it in, and then

89
00:05:30,580 --> 00:05:33,580
every single time we get a tick, we will update dash offset.

90
00:05:34,180 --> 00:05:37,960
So now that we've got the full story, quick pause right here and we'll work on our implementation in

91
00:05:37,960 --> 00:05:38,830
the next video.

