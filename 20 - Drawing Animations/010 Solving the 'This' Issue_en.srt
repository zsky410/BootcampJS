1
00:00:00,710 --> 00:00:04,820
Now that we've taken a look at the three different ways to determine the value of this, we're going

2
00:00:04,820 --> 00:00:07,330
to use this knowledge to fix up our scenario.

3
00:00:07,340 --> 00:00:11,840
So we're going to make sure that the value of this inside the start function is always what we expect

4
00:00:11,840 --> 00:00:12,470
it to be.

5
00:00:13,040 --> 00:00:17,960
So the first way that we can solve this is by making sure that we define the start method with an arrow

6
00:00:17,960 --> 00:00:18,650
function.

7
00:00:19,100 --> 00:00:24,410
Right now, the syntax you see right here behind the scenes, this actually gets translated into a normal

8
00:00:24,410 --> 00:00:26,630
keyword function that looks like that right there.

9
00:00:26,630 --> 00:00:28,640
So this is what happens behind the scenes.

10
00:00:28,940 --> 00:00:32,270
So right now we are not making use of an arrow function to define start.

11
00:00:32,600 --> 00:00:38,270
If we wanted to use an arrow function right here, we would put right after starts equals.

12
00:00:38,270 --> 00:00:42,860
And then between the parentheses and the curly brace, we would put in our arrow like so.

13
00:00:44,620 --> 00:00:48,220
So this is going to define an arrow function and assign it to start.

14
00:00:48,670 --> 00:00:53,230
So now we can use our rule back over here to determine what the value of this is going to be inside

15
00:00:53,230 --> 00:00:54,010
this function.

16
00:00:54,160 --> 00:00:58,240
But there's a little caveat this rule does hold.

17
00:00:58,330 --> 00:01:04,840
But if we follow it to a T, the first valid line above our arrow function, this is not a valid line

18
00:01:04,840 --> 00:01:05,440
to put right here.

19
00:01:05,440 --> 00:01:07,520
We can't do a console log of this right here.

20
00:01:07,540 --> 00:01:10,900
That's why I said valid inside this diagram.

21
00:01:11,290 --> 00:01:13,250
So we cannot put a console log right here.

22
00:01:13,270 --> 00:01:19,450
Instead, the first valid line above this arrow function would be outside of the class.

23
00:01:19,450 --> 00:01:20,740
Like up here.

24
00:01:22,900 --> 00:01:27,910
Now normally if we do a council log out here, we're going to get a console log of window because we're

25
00:01:27,910 --> 00:01:29,800
essentially inside the global scope.

26
00:01:30,190 --> 00:01:33,240
So in this case, it would seem like this rule falls apart.

27
00:01:33,250 --> 00:01:38,380
You would think that this rule does not actually hold, but it does because there is a little trick.

28
00:01:39,310 --> 00:01:44,800
When we write out code like this, right here we are using an advanced feature of JavaScript called

29
00:01:44,800 --> 00:01:46,150
Class Properties.

30
00:01:46,480 --> 00:01:50,950
Behind the scenes, JavaScript is going to take this function declaration right here and it's going

31
00:01:50,950 --> 00:01:53,110
to move it out of the class.

32
00:01:53,230 --> 00:01:54,850
We can actually see this in action.

33
00:01:54,850 --> 00:01:59,800
If we take our class definition and run it through a tool, you can find a line called Babel.

34
00:02:00,010 --> 00:02:06,940
Babel takes very modern JavaScript syntax and converts it down to much more basic or simplistic JavaScript

35
00:02:06,940 --> 00:02:10,330
that can be ran or executed inside of older browsers.

36
00:02:10,360 --> 00:02:14,860
It turns out that a lot of the syntax we're using right now relies upon newer features of JavaScript

37
00:02:14,860 --> 00:02:16,990
that are not supported in older browsers.

38
00:02:16,990 --> 00:02:21,610
And so tools like BABBEL just make sure that these very modern features that we're using can still be

39
00:02:21,610 --> 00:02:24,010
executed safely inside of an older browser.

40
00:02:24,280 --> 00:02:26,200
So I'm going to take the code that we just wrote.

41
00:02:27,790 --> 00:02:29,390
I'm going to take this class right here.

42
00:02:29,410 --> 00:02:32,650
I'm going to copy it, and I'm going to throw it into this BABBEL tool.

43
00:02:33,010 --> 00:02:37,780
So I'm going to put my code on the left hand side and I'll see some output come on the right hand side.

44
00:02:37,780 --> 00:02:41,500
So this is what would actually be executed inside of an older browser.

45
00:02:41,500 --> 00:02:46,900
Or put another way, this is how JavaScript kind of interprets our code, adding a more basic or simplistic

46
00:02:46,900 --> 00:02:47,440
level.

47
00:02:48,260 --> 00:02:49,460
So take a look at this.

48
00:02:49,460 --> 00:02:54,140
When we define this start method using this class property syntax, because that's what we're using

49
00:02:54,140 --> 00:02:59,240
right here, it turns out that we're not actually defining an arrow function inside of the class body.

50
00:02:59,330 --> 00:03:04,670
Instead, the browser and this BABBEL tool is going to massage the code that you wrote.

51
00:03:04,670 --> 00:03:09,470
It's going to take that function declaration and move it into the constructor.

52
00:03:09,770 --> 00:03:14,360
So this right here is the code that actually will be executed inside of a browser.

53
00:03:15,170 --> 00:03:18,350
So this is what is really, truly going on behind the scenes.

54
00:03:18,350 --> 00:03:23,720
And once we see this, you'll notice that our rule back over here still holds 100%.

55
00:03:24,200 --> 00:03:25,520
Take a look at the constructor.

56
00:03:25,550 --> 00:03:28,580
Inside the constructor, we define an arrow function.

57
00:03:30,070 --> 00:03:34,550
So now we can take this code right here and apply the original rule to it.

58
00:03:34,570 --> 00:03:38,020
I'm just going to do a quick copy paste back over here just so I can edit it very easily.

59
00:03:38,790 --> 00:03:41,040
So this is what actually executes inside the browser.

60
00:03:41,040 --> 00:03:45,180
And so if you want to figure out what the value of this is going to be inside the arrow function, we're

61
00:03:45,180 --> 00:03:49,650
going to go to the first valid line of code above the function declaration.

62
00:03:49,650 --> 00:03:51,150
So that would be right here.

63
00:03:51,150 --> 00:03:53,700
And we would then do a console log of this.

64
00:03:53,700 --> 00:03:58,380
And whatever comes out of this console log is what the value of this is going to be inside the arrow

65
00:03:58,380 --> 00:03:59,070
function.

66
00:03:59,250 --> 00:04:03,570
And so because we are in the constructor, we are always guaranteed that the value of this is going

67
00:04:03,570 --> 00:04:05,670
to be equal to the instance of the class.

68
00:04:06,060 --> 00:04:12,300
And so the value of this inside the arrow function is going to be equal to the instance of the class.

69
00:04:13,220 --> 00:04:17,750
So that's the secret behind solution number one that we have right here.

70
00:04:18,019 --> 00:04:23,000
If we use an arrow function, this rule back over here still applies.

71
00:04:23,000 --> 00:04:26,060
And that's how we can fix the value of this inside the start function.

72
00:04:26,660 --> 00:04:30,050
Now, just to prove that, I'm going to go back down to the bottom of the file.

73
00:04:31,640 --> 00:04:35,150
I'm going to delete all this extra test code that we put together down here.

74
00:04:36,510 --> 00:04:39,450
And I'm going to delete the timer start line as well.

75
00:04:39,450 --> 00:04:41,040
That was just a quick demonstration.

76
00:04:42,450 --> 00:04:43,920
I'm then going to save this.

77
00:04:44,400 --> 00:04:45,870
I'm going to go back over to my browser.

78
00:04:45,870 --> 00:04:49,380
I'm going to refresh the page, and now I'm going to click on the start button again.

79
00:04:49,620 --> 00:04:51,870
And now we can see that the start button works.

80
00:04:51,870 --> 00:04:55,830
As expected, we were able to call a method defined on the class.

81
00:04:55,830 --> 00:04:59,430
We could also, if we wanted to reference instance variables as well.

82
00:05:00,100 --> 00:05:03,730
So again, this is solution number one right here.

83
00:05:04,300 --> 00:05:08,830
So in order to get the value of this inside the start method to what we want it to be, we just use

84
00:05:08,830 --> 00:05:10,630
the first rule right here.

85
00:05:11,020 --> 00:05:13,840
So now let's take a look at how we would use method number two.

86
00:05:15,200 --> 00:05:20,540
So if you want to do method number two, we could call a bind on our function, which will override

87
00:05:20,540 --> 00:05:23,780
the value of this inside of it when it actually gets called.

88
00:05:23,870 --> 00:05:25,790
This method is a little bit more advanced.

89
00:05:25,790 --> 00:05:29,180
We are not going to use this method just about anywhere inside this course.

90
00:05:29,180 --> 00:05:33,680
I'm only mentioning this way of fixing the value of this because you will see older projects, older

91
00:05:33,680 --> 00:05:35,300
code that uses this style.

92
00:05:35,810 --> 00:05:39,800
So with this approach, we could refactor our start method back to how it was before.

93
00:05:39,830 --> 00:05:40,550
Like so.

94
00:05:41,440 --> 00:05:46,300
And then we will find where we pass our this dot start function off to the event listener.

95
00:05:47,400 --> 00:05:52,320
And then on start, I'm going to call behind this like so.

96
00:05:53,910 --> 00:05:59,250
So when we call dot behind this unlike call and apply which invoke the function right away, bind instead

97
00:05:59,250 --> 00:06:02,640
returns us a new function that we can call at some point in the future.

98
00:06:02,790 --> 00:06:05,160
So calling bind it doesn't run start right away.

99
00:06:05,190 --> 00:06:09,540
We're still passing a function off to the event listener that's going to be executed at some point in

100
00:06:09,540 --> 00:06:11,580
the future when a user actually clicks on the button.

101
00:06:12,230 --> 00:06:14,510
Both bind very similar to call and apply.

102
00:06:14,900 --> 00:06:20,720
We pass in the first argument to bind and that is going to be what the value of this is forced to be

103
00:06:20,720 --> 00:06:22,550
inside of the start function.

104
00:06:24,370 --> 00:06:29,830
So now the value of this inside the start function is going to be forced to the value of this out here

105
00:06:29,830 --> 00:06:34,840
inside the constructor, which is always once again going to be equal to the instance of the class,

106
00:06:34,840 --> 00:06:36,370
which is what we want it to be.

107
00:06:37,340 --> 00:06:38,580
So let's save this.

108
00:06:38,910 --> 00:06:40,140
I'll do a quick test again.

109
00:06:40,140 --> 00:06:40,770
I'll refresh.

110
00:06:40,770 --> 00:06:41,460
Hit start.

111
00:06:41,460 --> 00:06:42,480
And once again, I see.

112
00:06:42,480 --> 00:06:43,710
Important thing was done.

113
00:06:44,740 --> 00:06:44,970
Okay.

114
00:06:44,980 --> 00:06:45,600
So that's it.

115
00:06:45,610 --> 00:06:50,890
Those are the two very easy and most common ways that you're going to see to fix the value of this inside

116
00:06:50,890 --> 00:06:51,690
of a class.

117
00:06:51,700 --> 00:06:57,010
So again, we're going to rely on the first solution right here because it is definitely the more modern

118
00:06:57,010 --> 00:07:00,160
way and it's what you're going to see more frequently moving forward.

119
00:07:00,700 --> 00:07:04,420
So I'll define the start function using the class property syntax like so.

120
00:07:05,110 --> 00:07:09,760
I'm also going to remove the dot bind over here and restore it to just that.

121
00:07:11,080 --> 00:07:13,680
Finally, I'm going to clean up the important method to call.

122
00:07:13,690 --> 00:07:15,850
That was just a very quick demonstration.

123
00:07:18,430 --> 00:07:18,700
Okay.

124
00:07:18,700 --> 00:07:23,560
So again, I apologize for these three videos of going over a topic that was covered earlier.

125
00:07:23,560 --> 00:07:26,630
Maybe this stuff was really challenging, confusing, all that kind of stuff.

126
00:07:26,650 --> 00:07:30,250
The reason I went over it was just to show you a more practical example than what you might have seen

127
00:07:30,250 --> 00:07:31,480
earlier inside the course.

128
00:07:31,480 --> 00:07:35,800
And of course, I'm showing you, because this is going to be very critical to how we put together our

129
00:07:35,800 --> 00:07:37,120
timer class as well.

130
00:07:37,450 --> 00:07:41,920
So now that we've got this this stuff all under wraps, a quick pause right here.

131
00:07:41,920 --> 00:07:44,830
We'll continue working on our timer class in just a moment.

