1
00:00:00,120 --> 00:00:06,270
We've got a quick but super important detour away from logic and conditionals and comparisons for just

2
00:00:06,270 --> 00:00:06,939
a moment.

3
00:00:06,960 --> 00:00:10,440
We need to talk about how we are going to run our code from here on out.

4
00:00:10,530 --> 00:00:16,680
So far, we've been playing around in the console with little one liners, like one plus two or four

5
00:00:16,710 --> 00:00:18,390
is less than or equal to eight.

6
00:00:18,630 --> 00:00:23,620
It's nice we can get an answer evaluated immediately and we see the result visually.

7
00:00:23,640 --> 00:00:28,780
We are not writing an entire script with a bunch of code and executing it when we're ready.

8
00:00:28,800 --> 00:00:30,720
We're typing something immediately.

9
00:00:31,020 --> 00:00:35,740
This is actually called a ripple read evaluate print loop.

10
00:00:35,760 --> 00:00:37,960
That's what the JavaScript console is here.

11
00:00:37,980 --> 00:00:43,170
It reads in whatever you type, it evaluates it, it prints it, and it loops meaning that I can do

12
00:00:43,170 --> 00:00:44,190
it continuously.

13
00:00:44,400 --> 00:00:47,730
If I hit enter right now this is not valid JavaScript.

14
00:00:47,730 --> 00:00:49,470
So it throws an error.

15
00:00:49,470 --> 00:00:55,140
But it reads in that code thinks this is code, it realizes it's not when it evaluates it or it's not

16
00:00:55,140 --> 00:00:59,580
valid code, it prints an error and then it loops so I can do something else.

17
00:01:00,300 --> 00:01:05,370
So that's great for playing around, for testing things out, but it's not so great for creating larger

18
00:01:05,370 --> 00:01:10,330
scripts and larger applications where we actually want to have access to our code after the fact.

19
00:01:10,350 --> 00:01:11,580
This code all goes away.

20
00:01:11,580 --> 00:01:13,740
If I refresh the page, it's gone.

21
00:01:13,830 --> 00:01:19,680
But also it's not that easy to write multiple lines of code and create larger scripts in the console.

22
00:01:19,830 --> 00:01:24,450
So we're going to be writing our code in JavaScript files most of the time from here on out.

23
00:01:24,480 --> 00:01:25,840
We'll try new things out.

24
00:01:25,860 --> 00:01:29,850
We'll play around with new features in the console for a couple of minutes, but most of what we'll

25
00:01:29,850 --> 00:01:32,220
do will be in a JavaScript file.

26
00:01:32,730 --> 00:01:34,480
So we have a text editor.

27
00:01:34,500 --> 00:01:38,180
I introduced this early on in the course I'm using vs code.

28
00:01:38,190 --> 00:01:40,280
You can use any text editor you want.

29
00:01:40,290 --> 00:01:46,710
You just need to make a dot JS file and unfortunately we can't simply open a JavaScript file in the

30
00:01:46,710 --> 00:01:47,760
browser to run it.

31
00:01:47,970 --> 00:01:54,840
We have to open an HTML file which has a script or it includes our JavaScript file.

32
00:01:55,020 --> 00:01:58,470
The browser doesn't know how to handle just a plain JavaScript file.

33
00:01:58,500 --> 00:02:02,700
It knows how to handle an HTML file that includes a JavaScript file.

34
00:02:03,150 --> 00:02:04,580
So there's two steps.

35
00:02:04,590 --> 00:02:07,420
Let's go ahead and try it out over in vs code.

36
00:02:07,440 --> 00:02:09,380
I'm going to make a new file.

37
00:02:09,389 --> 00:02:11,400
I'm working in a folder called code.

38
00:02:11,580 --> 00:02:12,480
I'll make a new file.

39
00:02:12,480 --> 00:02:14,610
You can either right click new file.

40
00:02:14,640 --> 00:02:21,270
You can go file, new file or use a shortcut, which is what I usually do on a mac command.

41
00:02:21,270 --> 00:02:23,550
N And I'll call this file app.

42
00:02:23,760 --> 00:02:25,140
JS Or script.

43
00:02:25,380 --> 00:02:30,690
JS It does not matter as long as you can reference it, so I'll go with script.

44
00:02:31,080 --> 00:02:33,590
Actually, I changed my mind like app app.

45
00:02:33,720 --> 00:02:36,600
JS And we'll put some code in here.

46
00:02:37,260 --> 00:02:39,450
We saw this really early on in the course.

47
00:02:39,450 --> 00:02:44,010
I'm just going to add an alert that says it's working.

48
00:02:44,070 --> 00:02:48,600
So if we get it working correctly, we should see this pop up in the browser.

49
00:02:49,360 --> 00:02:50,560
So that was the first step.

50
00:02:50,560 --> 00:02:55,300
The next step is to create an HTML file and include a script.

51
00:02:55,720 --> 00:02:57,500
So I'm going to go back to VS code.

52
00:02:57,520 --> 00:03:02,800
I'll make a new file command n and I'll call this one something html.

53
00:03:02,920 --> 00:03:06,280
A pretty standard generic name as indexed html.

54
00:03:06,310 --> 00:03:08,860
You can call it code html website.

55
00:03:08,860 --> 00:03:12,100
It doesn't matter as long as it ends in HTML.

56
00:03:12,280 --> 00:03:14,620
And I'm going to put them in the same folder.

57
00:03:14,650 --> 00:03:18,040
It just makes it easier when I'm including this JavaScript file.

58
00:03:18,250 --> 00:03:19,720
So I'm going to put that there.

59
00:03:19,900 --> 00:03:22,790
And if you're not super familiar with HTML, don't fret.

60
00:03:22,810 --> 00:03:25,580
You don't have to type this entire structure from scratch.

61
00:03:25,600 --> 00:03:33,100
If you're using vs code or a similar editor and VTS code, I can type exclamation point tab and it fills

62
00:03:33,100 --> 00:03:34,700
all of this stuff out for me.

63
00:03:34,720 --> 00:03:40,810
I get my standard boilerplate HTML, essentially the template, the thing we use every time or the code

64
00:03:40,810 --> 00:03:42,970
we write every time in an HTML file.

65
00:03:43,180 --> 00:03:49,300
I'll give this a title like my first JS script and then I'll save this.

66
00:03:49,330 --> 00:03:53,920
Right now we're not including the script at all, so we need to include a script tag.

67
00:03:54,880 --> 00:04:00,970
So I'm going to just use Autocomplete here type script or probably just SC, we'll give it to you.

68
00:04:01,330 --> 00:04:07,330
And then we need to add a source attribute which corresponds to the path to our file.

69
00:04:07,570 --> 00:04:10,630
So it's called JS there in the same folder.

70
00:04:10,630 --> 00:04:14,050
So all I need to type here is app dot js.

71
00:04:14,890 --> 00:04:17,880
Later on we'll talk about the placement of this script.

72
00:04:17,890 --> 00:04:21,040
For now, you can put it anywhere in this HTML document.

73
00:04:21,040 --> 00:04:24,400
It can go here, it can go at the bottom of the body.

74
00:04:24,430 --> 00:04:25,450
It doesn't matter.

75
00:04:25,630 --> 00:04:28,900
For now, because our script does not depend on any HTML.

76
00:04:28,900 --> 00:04:30,910
We're not interacting with HTML.

77
00:04:30,910 --> 00:04:35,400
We're not creating elements or deleting elements or having events or anything like that.

78
00:04:35,410 --> 00:04:39,660
We're just simply printing some content so you can put it wherever you want.

79
00:04:39,670 --> 00:04:45,460
If you're familiar with JavaScript already and with HTML and the problems that can arise from including

80
00:04:45,460 --> 00:04:48,760
a script too soon, then go ahead and put it down at the bottom.

81
00:04:49,000 --> 00:04:50,380
But it doesn't matter for now.

82
00:04:50,410 --> 00:04:51,340
It will later.

83
00:04:51,760 --> 00:04:52,270
All right.

84
00:04:52,270 --> 00:04:54,010
So we have our script included.

85
00:04:54,010 --> 00:04:57,940
Hopefully just make sure your name is matching whatever you name the file.

86
00:04:57,970 --> 00:05:01,660
We'll save this and then I'm going to go to my browser.

87
00:05:01,660 --> 00:05:03,910
Well, first, I'm going to open it in the browser.

88
00:05:03,910 --> 00:05:05,680
So there's multiple ways of doing this.

89
00:05:05,680 --> 00:05:11,890
You go to your HTML file, you right click, you can click open with you can just double click and it

90
00:05:11,890 --> 00:05:17,170
opens up in your default browser, which for me is Chrome and we can see that it's working because my

91
00:05:17,170 --> 00:05:18,370
alert came through.

92
00:05:18,400 --> 00:05:21,010
It says it's working and that's it.

93
00:05:21,040 --> 00:05:22,630
We don't see any content on the page.

94
00:05:22,630 --> 00:05:24,160
We're not really worrying about that.

95
00:05:24,160 --> 00:05:30,100
So for most of this early part of the course, we'll just be working in the console of our file that

96
00:05:30,100 --> 00:05:31,990
we're opening up the HTML file.

97
00:05:31,990 --> 00:05:34,570
So we've now successfully included a script.

98
00:05:34,570 --> 00:05:36,280
It's working and this is a workflow.

99
00:05:36,280 --> 00:05:39,400
We'll follow a lot if you're not very comfortable with it yet.

100
00:05:39,400 --> 00:05:42,690
It takes some practice, but it's just one of those things you do often.

101
00:05:42,700 --> 00:05:46,210
You could even make a template, a folder that you could just duplicate.

102
00:05:46,210 --> 00:05:50,920
Any time you wanted to make a new script, you could also do this where you make a new script.

103
00:05:50,920 --> 00:06:00,490
Here, we'll call this one app to JS and this one will say, Alert, I am a different script, we'll

104
00:06:00,490 --> 00:06:01,240
save.

105
00:06:01,240 --> 00:06:04,690
And then in my index I can just include app too.

106
00:06:04,720 --> 00:06:10,150
Instead, I'll refresh my page and now I get script two.

107
00:06:10,180 --> 00:06:15,700
I am a different script or app too, so you don't have to make a new HTML and JavaScript file.

108
00:06:15,700 --> 00:06:20,590
Every single time you want a new script, you can just swap out which script you're including.

109
00:06:21,220 --> 00:06:24,940
So then this brings me to one last important piece in the console.

110
00:06:24,940 --> 00:06:27,610
We've been typing things like Let's go back to app.

111
00:06:27,610 --> 00:06:34,510
JS We've been typing things like this four plus four or three equals equals three, and we see an answer

112
00:06:34,510 --> 00:06:35,170
right away.

113
00:06:35,200 --> 00:06:42,310
It's evaluated and printed back, but in regular JavaScript, in a script like we have here, this won't

114
00:06:42,310 --> 00:06:48,970
show up, this won't print anything, it will be evaluated and JavaScript knows what the answer is and

115
00:06:48,970 --> 00:06:50,260
what the result is.

116
00:06:50,260 --> 00:06:51,610
But it doesn't show it to us.

117
00:06:51,610 --> 00:06:52,780
It doesn't print it out.

118
00:06:52,840 --> 00:06:57,460
So if we want something to be explicitly printed out, we have to use a method.

119
00:06:57,490 --> 00:06:58,330
Another method.

120
00:06:58,330 --> 00:07:00,610
It's not a string method, it's not a number method.

121
00:07:00,610 --> 00:07:02,770
It has to do with something called the console.

122
00:07:02,770 --> 00:07:08,320
The method is called console.log and all that it does is it prints something to the console.

123
00:07:08,620 --> 00:07:13,660
So as I mentioned, when we write code like this, if I refresh my page, I make sure I'm including

124
00:07:13,660 --> 00:07:15,850
app JS, not app too.

125
00:07:16,360 --> 00:07:18,550
If I refresh, we don't see anything.

126
00:07:18,550 --> 00:07:23,500
And if I open up the JavaScript console, you can see nothing is printed out.

127
00:07:24,370 --> 00:07:26,170
I can also move this over.

128
00:07:26,530 --> 00:07:30,940
Actually, since we don't really care about this HTML page, we just want the JavaScript.

129
00:07:30,940 --> 00:07:36,820
I think what I would do instead is get rid of this right here and I'll just display the console next

130
00:07:36,820 --> 00:07:38,260
to my editor.

131
00:07:38,560 --> 00:07:40,930
So there is an HTML page open.

132
00:07:40,930 --> 00:07:44,290
I'm just viewing the console and I put them together in one window.

133
00:07:44,290 --> 00:07:46,270
But as you can see, nothing is showing up.

134
00:07:46,270 --> 00:07:47,080
I refresh the page.

135
00:07:47,080 --> 00:07:48,160
We don't see anything.

136
00:07:48,410 --> 00:07:50,660
What if I instead use console.log?

137
00:07:50,690 --> 00:07:51,800
Console.log.

138
00:07:51,800 --> 00:07:55,520
And then we pass in three plus four or whatever we had before.

139
00:07:55,550 --> 00:07:58,310
I'll save and refresh the page.

140
00:07:58,550 --> 00:08:00,020
I now get seven.

141
00:08:00,440 --> 00:08:01,160
Hallelujah.

142
00:08:01,160 --> 00:08:02,160
It's working.

143
00:08:02,180 --> 00:08:08,780
So this is the way that we actually view values, at least until we talk about HTML and displaying content

144
00:08:08,780 --> 00:08:09,650
on a page.

145
00:08:09,680 --> 00:08:12,100
For now we're just showing things in the console.

146
00:08:12,110 --> 00:08:18,200
So console.log is a special really commonly used method, often used for debugging and trying to understand

147
00:08:18,200 --> 00:08:19,650
what's going wrong somewhere.

148
00:08:19,670 --> 00:08:25,100
Or when you're starting out just to print stuff so you can see while we're here, I'll just show you

149
00:08:25,100 --> 00:08:26,310
a couple of flavors.

150
00:08:26,330 --> 00:08:30,470
I'll just do one more flavor of console.log instead of logging something.

151
00:08:30,470 --> 00:08:35,960
There's another method called console error and we can pass in some content.

152
00:08:35,960 --> 00:08:40,580
It will be printed, but rather than print it nicely like this, I'll refresh the page.

153
00:08:40,580 --> 00:08:42,980
It shows up like a JavaScript error.

154
00:08:43,370 --> 00:08:44,540
So it's read.

155
00:08:44,540 --> 00:08:45,890
We can exit away.

156
00:08:46,100 --> 00:08:47,030
Maybe we can't.

157
00:08:47,540 --> 00:08:49,880
Usually, I think you usually can.

158
00:08:49,970 --> 00:08:51,860
But anyway, it just shows up differently.

159
00:08:52,280 --> 00:08:55,220
Console again refers to the JavaScript console.

160
00:08:55,370 --> 00:08:57,440
Log is going to print something out.

161
00:08:57,440 --> 00:08:58,730
It will log it to you.

162
00:08:58,730 --> 00:09:03,230
And the last thing is that we can pass in multiple things to console that log.

163
00:09:03,770 --> 00:09:05,660
We could do three plus four comma.

164
00:09:05,870 --> 00:09:08,300
Hello comma.

165
00:09:08,720 --> 00:09:09,740
How about true?

166
00:09:11,030 --> 00:09:12,320
And save.

167
00:09:12,350 --> 00:09:16,910
I'll refresh my page on the left and let me make this a little clearer.

168
00:09:17,330 --> 00:09:19,640
What it does is it prints them all to the console.

169
00:09:19,640 --> 00:09:21,590
It separates them with a space.

170
00:09:21,920 --> 00:09:26,180
So you could have as many things as you want passed in into console.log, and it will print them all

171
00:09:26,180 --> 00:09:28,280
out, just separated by spaces.

172
00:09:29,210 --> 00:09:30,620
So that's the detour.

173
00:09:30,650 --> 00:09:35,690
We're going to go back to logic and conditionals and making decisions in our code now that we have a

174
00:09:35,690 --> 00:09:37,490
place to actually write our code.

175
00:09:38,060 --> 00:09:44,570
So the workflow makefile name it something dot js include it using a script tag in an HTML file.

176
00:09:44,600 --> 00:09:49,970
Double click that HTML file to open it in the browser and then in the browser we'll be working in the

177
00:09:49,970 --> 00:09:50,690
console for now.

178
00:09:50,690 --> 00:09:56,600
So just open the console again and we will be using console.log to display values.

179
00:09:57,260 --> 00:09:57,800
All right.

