1
00:00:00,090 --> 00:00:05,970
We saw double equals, which is going to check for equality of value, but it ignores type.

2
00:00:06,420 --> 00:00:10,200
Triple equals cares both about value and type.

3
00:00:10,350 --> 00:00:15,540
So it's three equal signs in a row, and again, it cares about the type and value.

4
00:00:15,540 --> 00:00:19,110
It's not going to try and coerce the values to be of a common type.

5
00:00:19,230 --> 00:00:27,210
So if we have something like two triple equals, the string two that's going to be false versus double

6
00:00:27,210 --> 00:00:28,860
equals is true.

7
00:00:29,340 --> 00:00:32,880
We also saw an example where we had zero double equals false.

8
00:00:33,180 --> 00:00:34,380
That is true.

9
00:00:35,100 --> 00:00:42,630
Triple equals is false, so it is stricter, hence the term or the name strict equality operator.

10
00:00:43,170 --> 00:00:48,510
All of those examples that we saw with double equals that were kind of wonky, like undefined double

11
00:00:48,510 --> 00:00:54,300
equals null, which is true if we do it with triple equals, they are not the same type.

12
00:00:54,300 --> 00:00:56,550
So it doesn't matter, it's false.

13
00:00:57,090 --> 00:01:03,660
But if we do something that definitely is true, three equals three or null triple equals null.

14
00:01:03,660 --> 00:01:04,769
That's true.

15
00:01:04,769 --> 00:01:05,730
And so on.

16
00:01:06,210 --> 00:01:09,750
So triple equals is more precise or more specific.

17
00:01:09,750 --> 00:01:13,590
It cares about type, and generally that's what you want.

18
00:01:13,590 --> 00:01:19,050
If you were using double equals, you could get some weird behavior if you're trying to check if a certain

19
00:01:19,050 --> 00:01:27,150
value is exactly false and instead the value was zero, this could lead to some unexpected decisions

20
00:01:27,150 --> 00:01:27,960
or results.

21
00:01:27,960 --> 00:01:30,210
So generally we stick to triple equals.

22
00:01:30,210 --> 00:01:31,080
It's more specific.

23
00:01:31,080 --> 00:01:33,990
It's more precise type usually matters.

24
00:01:33,990 --> 00:01:42,120
If we had some variable called is logged in and it's set to false and we wanted to check is logged in

25
00:01:42,870 --> 00:01:44,040
equal to false.

26
00:01:44,040 --> 00:01:49,710
This works like we want to make sure nobody is logged in so we're checking is logged in set to false

27
00:01:49,710 --> 00:01:58,470
but if somebody somehow set it to zero for example and we ran that line again is logged in double equals

28
00:01:58,470 --> 00:02:02,970
false it still saying true but it's not actually false.

29
00:02:03,240 --> 00:02:06,630
If we instead use triple equals, we avoid that entirely.

30
00:02:07,500 --> 00:02:13,770
So in general, 99.99999% of the time what you want is triple equals.

31
00:02:13,770 --> 00:02:17,910
And in this course we'll be using triple equals for everything.

32
00:02:17,910 --> 00:02:20,490
It's really rare that you need double equals.

33
00:02:20,610 --> 00:02:24,000
There are people who will say never ever use double equals.

34
00:02:24,000 --> 00:02:27,000
I think it's a good rule of thumb if you're brand new to JavaScript.

35
00:02:27,000 --> 00:02:33,840
I certainly haven't used it in the last year or so at least, but it is something you might see sometimes

36
00:02:33,840 --> 00:02:35,700
in certain edge cases and scenarios.

37
00:02:35,700 --> 00:02:37,080
I'm beating a dead horse here.

38
00:02:37,080 --> 00:02:40,110
So just remember triple equals, not double.

39
00:02:40,140 --> 00:02:43,680
And let's wrap up here by talking about non equality.

40
00:02:43,680 --> 00:02:48,840
So just like we have two ways of checking if something is equal to another thing, we have two ways

41
00:02:48,840 --> 00:02:49,380
of checking.

42
00:02:49,380 --> 00:02:56,100
If two values are not equal, we have non equality, just the plain old non equality.

43
00:02:56,100 --> 00:03:00,990
This is the analogue or the cousin of double equals.

44
00:03:00,990 --> 00:03:06,600
And then we have strict non equality which is the cousin of triple equals.

45
00:03:06,810 --> 00:03:10,980
So if we do something like one is not equal to two, we get true.

46
00:03:10,980 --> 00:03:11,790
That makes sense.

47
00:03:11,790 --> 00:03:13,290
One is not two.

48
00:03:13,770 --> 00:03:18,570
If we keep using the one equal sign version, we could also do this.

49
00:03:18,570 --> 00:03:25,860
One is not equal to one, but that gives us false because we're using a single equal sign which is like

50
00:03:25,860 --> 00:03:26,700
the double equals.

51
00:03:26,700 --> 00:03:28,050
It doesn't care about type.

52
00:03:28,230 --> 00:03:31,890
So we end up with false because they're converted to the same type.

53
00:03:31,890 --> 00:03:37,830
And it's essentially checking is one not equal to one, and that's false.

54
00:03:38,190 --> 00:03:46,080
If we instead use this version where we have two equal signs, we end up with one strict non equality

55
00:03:46,200 --> 00:03:47,130
string one.

56
00:03:47,130 --> 00:03:48,390
And that is true.

57
00:03:48,600 --> 00:03:54,150
So for the same reason that I said you should always use triple equals, you should almost always use

58
00:03:54,150 --> 00:03:57,630
this version of non equality to equal signs.

59
00:03:57,720 --> 00:04:01,560
So we've now covered all of the comparison operators we need to talk about.

60
00:04:01,560 --> 00:04:06,420
We saw greater than less than and then also greater than or equal to less than or equal to.

61
00:04:06,420 --> 00:04:12,240
And then in terms of the equality operators, just go with the bottom two here to check if things are

62
00:04:12,240 --> 00:04:12,810
equal.

63
00:04:12,810 --> 00:04:19,410
Use triple equals to check if things are not equal, use this version where we have one exclamation

64
00:04:19,410 --> 00:04:21,149
point and two equal signs.

65
00:04:21,300 --> 00:04:25,020
Those two circle them, remember them and ignore these two.

66
00:04:25,020 --> 00:04:27,240
I need to show them to you, but ignore them.

