1
00:00:00,150 --> 00:00:04,650
Next up, let's talk about those bottom four comparison operators that we skipped over.

2
00:00:04,680 --> 00:00:06,990
They all have to do with equality.

3
00:00:07,020 --> 00:00:08,530
It's the 21st century.

4
00:00:08,550 --> 00:00:14,820
It's time we finally confront equality, meaning the four equality operators that we ignored in the

5
00:00:14,820 --> 00:00:15,690
last video.

6
00:00:16,020 --> 00:00:17,340
They seem kind of similar.

7
00:00:17,340 --> 00:00:20,250
At least two of them are two groups that seem similar.

8
00:00:20,250 --> 00:00:24,180
We have equality, which is two equal signs, as you can see here.

9
00:00:24,180 --> 00:00:29,610
And then another version of equality called strict equality with three equal signs.

10
00:00:29,610 --> 00:00:32,220
And then we have non equality with one and two.

11
00:00:32,250 --> 00:00:36,780
Let's start by talking about double equals versus triple equals.

12
00:00:37,020 --> 00:00:38,280
What is the difference?

13
00:00:38,310 --> 00:00:40,470
Well, let's start with double equals.

14
00:00:40,470 --> 00:00:44,660
Double equals is just usually referred to as the equality operator.

15
00:00:44,730 --> 00:00:49,440
It checks for equality of values, but it doesn't care about type.

16
00:00:49,440 --> 00:00:52,200
So the types of data that you're comparing don't matter.

17
00:00:52,440 --> 00:00:55,980
It's going to coerce both values to a common type.

18
00:00:55,980 --> 00:00:59,010
And coerce is just a fancy way of saying convert.

19
00:00:59,010 --> 00:01:05,459
It's going to try and get them to be a the same type so it can compare them directly as one type.

20
00:01:05,459 --> 00:01:11,190
And once they're converted, if they have the same value, then it returns true, it evaluates to true,

21
00:01:11,220 --> 00:01:12,770
otherwise we get false.

22
00:01:12,780 --> 00:01:18,660
Now this can lead to some unexpected results, but let's take a look at some expected results first

23
00:01:18,660 --> 00:01:21,900
for equals for that makes sense.

24
00:01:22,290 --> 00:01:26,160
What about a equals a great.

25
00:01:26,380 --> 00:01:29,220
We could even do false equals false.

26
00:01:29,760 --> 00:01:30,180
Nope.

27
00:01:30,180 --> 00:01:35,040
Not one equals sign that is assigning something as we've already seen with variables.

28
00:01:35,040 --> 00:01:38,340
That's how you assign a value to is comparison.

29
00:01:38,580 --> 00:01:39,630
So that's true.

30
00:01:39,990 --> 00:01:40,710
All right.

31
00:01:40,980 --> 00:01:43,440
But as I mentioned, things can get odd.

32
00:01:43,440 --> 00:01:45,810
We have things like this.

33
00:01:45,810 --> 00:01:50,700
If I take a number and I compare it to a string of the same number that's giving me true.

34
00:01:50,700 --> 00:01:52,350
Now, these aren't equal.

35
00:01:52,410 --> 00:01:53,910
These are different values.

36
00:01:53,910 --> 00:01:56,610
They are completely different in terms of JavaScript.

37
00:01:56,610 --> 00:01:59,820
One is a number, one is a string, but remember double equals.

38
00:01:59,820 --> 00:02:02,340
We'll try and get them to be a common type.

39
00:02:02,340 --> 00:02:08,520
So it converts them to a common type and then it decides, oh yeah, they have the same value, same

40
00:02:08,520 --> 00:02:11,280
thing with some maybe less expected things.

41
00:02:11,460 --> 00:02:13,830
Zero and an empty string.

42
00:02:14,130 --> 00:02:22,350
So zero double equals a string with SE is false, but an empty string is true behind the scenes.

43
00:02:22,380 --> 00:02:27,590
JavaScript is converting these to a similar type and it decides they are equal.

44
00:02:27,600 --> 00:02:29,520
We'll talk about why in just a bit.

45
00:02:29,520 --> 00:02:32,010
Why is zero similar to an empty string?

46
00:02:32,400 --> 00:02:35,400
Obviously true double equals false is going to be false.

47
00:02:35,760 --> 00:02:37,950
But we also have things like zero.

48
00:02:37,980 --> 00:02:40,920
Let we clear this zero double equals false.

49
00:02:40,920 --> 00:02:43,050
Those are definitely different values.

50
00:02:43,050 --> 00:02:46,980
One is a number, one is a boolean, but it still comes out true.

51
00:02:47,790 --> 00:02:54,900
And then one more example null and undefined as we saw, these are two distinct values, two separate

52
00:02:54,900 --> 00:03:00,330
primitives, but they are considered equal when we use two equal signs.

53
00:03:00,810 --> 00:03:01,500
All right.

54
00:03:01,500 --> 00:03:06,750
So we're going to get to triple equals in just a moment, but we're going to take a detour to talk about

55
00:03:06,750 --> 00:03:08,160
why some of this happens.

56
00:03:08,160 --> 00:03:13,710
What is actually happening behind the scenes that makes JavaScript, say zero is double equals to an

57
00:03:13,710 --> 00:03:16,620
empty string or zero is double equal false.

58
00:03:16,860 --> 00:03:20,280
It doesn't seem all that logical, but there is some reasoning behind it.

