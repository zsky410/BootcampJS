1
00:00:00,090 --> 00:00:04,860
Next up, we have a bit of an odd operator in JavaScript called type of.

2
00:00:04,860 --> 00:00:10,630
We use type of in some situations to determine the type of a given value.

3
00:00:10,650 --> 00:00:17,340
We simply write type of which always has driven me crazy that it's not camel case like everything else

4
00:00:17,340 --> 00:00:20,130
in JavaScript, it's type of like this.

5
00:00:20,340 --> 00:00:28,050
And then a space and then we specify a value like 99 and it gives us a string containing the type,

6
00:00:28,050 --> 00:00:30,030
like a name of the type number.

7
00:00:30,270 --> 00:00:33,990
If I do type of true, we get boolean.

8
00:00:34,110 --> 00:00:40,890
If I have a variable, we'll call it mystery and close your eyes and you don't have to close your eyes.

9
00:00:40,890 --> 00:00:44,340
But let's say this is our mystery.

10
00:00:45,030 --> 00:00:46,440
I'll clear the console.

11
00:00:46,710 --> 00:00:51,210
If I do type of mystery, it tells us it's a string.

12
00:00:51,240 --> 00:00:54,240
Yes, it contains a number at the beginning, but that doesn't matter.

13
00:00:54,270 --> 00:00:55,170
It's in quotes.

14
00:00:55,170 --> 00:00:59,580
So it's a string type of with undefined.

15
00:01:00,120 --> 00:01:02,010
We'll give us undefined.

16
00:01:02,500 --> 00:01:04,739
Here's a really odd part of JavaScript.

17
00:01:04,739 --> 00:01:08,000
If you do type of null, it tells you object.

18
00:01:08,010 --> 00:01:10,200
This is allegedly a mistake.

19
00:01:10,230 --> 00:01:14,610
A weird quirk that has worked its way into the language over time.

20
00:01:14,610 --> 00:01:19,380
So more of a piece of trivia, I guess than something you need to look out for.

21
00:01:20,130 --> 00:01:27,840
Type of often confuses people because they think you need to use parentheses like you do for console.log

22
00:01:27,840 --> 00:01:30,570
or for what else have we see in math?

23
00:01:30,750 --> 00:01:36,870
Random or these different actions where you pass a value in and you use parentheses to execute it,

24
00:01:36,870 --> 00:01:43,650
but type of is actually an operator just like the plus sign is we don't do plus sign with parentheses

25
00:01:43,650 --> 00:01:46,560
or or minus sign or equal sign.

26
00:01:46,560 --> 00:01:47,610
That's an operator.

27
00:01:47,610 --> 00:01:51,930
When we say const x equals three, we don't use prints.

28
00:01:52,290 --> 00:01:54,120
Type of is very similar.

29
00:01:54,180 --> 00:01:55,590
It's also an operator.

30
00:01:55,680 --> 00:01:57,270
It just has one side.

31
00:01:57,270 --> 00:02:03,660
So unlike the plus sign where we have two sides, a left and a right with type of we just type of a

32
00:02:03,660 --> 00:02:05,490
value and that's it.

33
00:02:05,820 --> 00:02:07,110
So not much to it.

34
00:02:07,140 --> 00:02:12,450
I just wanted to show it to you because sometimes it's useful once we get to writing functions in particular,

35
00:02:12,450 --> 00:02:18,630
if you want to check that a user did indeed pass in a number or a function has been called with a number

36
00:02:18,630 --> 00:02:21,300
and not a string, then you can use type of.

