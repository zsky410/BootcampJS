1
00:00:00,120 --> 00:00:05,800
Speaking of types, there are two functions I'll quickly mention called Parse int and Parse float.

2
00:00:05,820 --> 00:00:11,730
You may not use them all the time, but there are situations where you have a string and you need to

3
00:00:11,730 --> 00:00:13,050
turn it into a number.

4
00:00:13,050 --> 00:00:19,260
So the string contains a number hopefully, and you want to extract that number as a numeric value so

5
00:00:19,260 --> 00:00:23,070
you can do math with it or do something numerical with it.

6
00:00:23,070 --> 00:00:27,780
So Parsons is going to give us back and we'll return an integer.

7
00:00:27,960 --> 00:00:31,620
You can see here parse int of the string 24 gives us 24.

8
00:00:31,650 --> 00:00:36,210
If we try it on a decimal, the string 24.987.

9
00:00:36,210 --> 00:00:40,750
It stops at that period at the decimal and it just gives us the integer part.

10
00:00:40,770 --> 00:00:41,640
24.

11
00:00:42,060 --> 00:00:46,860
Parse float does the same thing, except it's going to parse the entire float.

12
00:00:46,860 --> 00:00:50,370
The entire decimal number of the string in the string.

13
00:00:51,080 --> 00:00:57,620
So I can just quickly show you that if we do parse it, let's say we ask the user to enter their age

14
00:00:57,620 --> 00:01:00,680
into a form and they enter in 21.

15
00:01:02,170 --> 00:01:04,560
Pass ENT is going to give us the actual number.

16
00:01:04,569 --> 00:01:11,260
If we had 21 and we wanted to add a year to it to indicate a birthday for that person, that's not going

17
00:01:11,260 --> 00:01:11,980
to work for us.

18
00:01:11,980 --> 00:01:18,460
But if we pass int of the string 21, we can now add one and get 22.

19
00:01:19,300 --> 00:01:24,610
And then we also have pass float which you could see from the slide.

20
00:01:24,610 --> 00:01:30,370
If we pass in something like 33.5, we'll get back a number containing a decimal.

21
00:01:31,180 --> 00:01:41,170
Now there are some weird situations like if you tried to parse int on a price dollar sign 99 is going

22
00:01:41,170 --> 00:01:42,730
to give us not a number.

23
00:01:43,240 --> 00:01:45,010
It does not like that dollar sign.

24
00:01:45,010 --> 00:01:49,690
It's not expecting any non number characters, any non digits in there.

25
00:01:49,690 --> 00:01:51,970
And the same applies for Parse float.

26
00:01:51,970 --> 00:01:59,290
But if your string does contain a number at the beginning, if it starts with a number like $0.99,

27
00:01:59,320 --> 00:02:04,810
if we had the word sense afterwards, we actually will get the number 99 out of there.

28
00:02:05,140 --> 00:02:08,380
So it's kind of odd if it detects a number at the beginning.

29
00:02:08,380 --> 00:02:13,600
If the first character is a valid digit, then it will keep going until it can't go any further.

30
00:02:13,600 --> 00:02:19,960
So if I had this, we'll get all of that, but instead have a non digit character at the beginning it

31
00:02:19,960 --> 00:02:20,920
gets messed up.

32
00:02:21,100 --> 00:02:26,620
Also I can put spaces in there and it will be okay, but as soon as they put other characters it gets

33
00:02:26,620 --> 00:02:27,400
confused.

34
00:02:28,150 --> 00:02:33,460
You probably won't be doing something like this with this particular string, but it's common if a user

35
00:02:33,460 --> 00:02:34,990
enters something into a form.

36
00:02:34,990 --> 00:02:39,730
This is one way of getting that string because form data comes in as a string.

37
00:02:39,730 --> 00:02:43,240
You could turn it into an actual number and do math with it and that's it.

38
00:02:43,240 --> 00:02:44,560
Parsed in parse float.

