1
00:00:00,480 --> 00:00:04,800
The last big thing we have to add in to our application is to detect whenever our ball right here reaches

2
00:00:04,800 --> 00:00:06,960
the goal at the very bottom right hand corner.

3
00:00:07,110 --> 00:00:11,820
So what we're really trying to do here, put in a more simplistic way or a more kind of engineering

4
00:00:11,820 --> 00:00:15,930
sense, is detect a collision event between two different shapes.

5
00:00:16,230 --> 00:00:21,480
Let's write out some code that will allow us to detect whenever two different shapes inside of our matter

6
00:00:21,480 --> 00:00:23,430
application collide with each other.

7
00:00:23,970 --> 00:00:26,880
So I'm going to go back over to my editor at the very top.

8
00:00:26,880 --> 00:00:29,130
I'm going to find the matter object once again.

9
00:00:29,550 --> 00:00:33,570
And we're going to pull another object off of that thing called events.

10
00:00:34,020 --> 00:00:39,150
So this is an object that's going to let us listen for different things that actually occur inside of

11
00:00:39,150 --> 00:00:40,320
our world object.

12
00:00:41,110 --> 00:00:43,150
Well, then go back down to the very bottom of the file.

13
00:00:43,630 --> 00:00:47,980
And down here I'm going to add in a comment called Win Condition.

14
00:00:49,320 --> 00:00:53,760
So the meaning here is that, well, this is how a user can actually win our game or win the maze.

15
00:00:54,240 --> 00:00:57,900
So we're going to write out events on Engine.

16
00:00:58,500 --> 00:01:02,220
We're going to listen for an event called Collision Start.

17
00:01:03,040 --> 00:01:07,510
Double check your spelling on collision and make sure that you also have a capital SX on there as well.

18
00:01:09,260 --> 00:01:13,430
And the third argument is going to be a callback function that's going to be called with some event

19
00:01:13,430 --> 00:01:14,120
object.

20
00:01:14,600 --> 00:01:18,620
So this event object is going to mean this callback function is going to be invoked every single time

21
00:01:18,620 --> 00:01:22,340
that there is a collision between two different shapes inside of our world.

22
00:01:23,030 --> 00:01:27,440
Right now I'll add in a console log of event.

23
00:01:28,650 --> 00:01:29,480
So I'll save this.

24
00:01:29,490 --> 00:01:32,430
I'll flip back over, refresh, and we'll do a quick test.

25
00:01:34,040 --> 00:01:38,120
So I'm going to press the key and just make sure that my ball runs into some wall.

26
00:01:38,150 --> 00:01:39,710
That counts as a collision.

27
00:01:39,710 --> 00:01:42,860
So as soon as the ball runs into a wall, I should see a console.log.

28
00:01:42,860 --> 00:01:44,240
And sure enough, I do right there.

29
00:01:44,810 --> 00:01:50,030
Now you're going to very quickly see some really strange behavior as we start to console.log out this

30
00:01:50,030 --> 00:01:51,050
event object.

31
00:01:51,560 --> 00:01:57,530
The event object that is used by matter marriages gets reused between different events.

32
00:01:57,530 --> 00:02:01,970
So in other words, and this is kind of hard to like internalize, but I'll show you some proof of it

33
00:02:01,970 --> 00:02:02,840
very quickly.

34
00:02:02,840 --> 00:02:08,840
This event object right here, there is one single event object that matter JS owns.

35
00:02:09,050 --> 00:02:13,370
Every single time that any event occurs, it adds some properties to this event.

36
00:02:13,370 --> 00:02:15,500
Object to describe what just happened.

37
00:02:15,500 --> 00:02:18,530
It then sends that object into our callback function.

38
00:02:19,530 --> 00:02:24,390
Immediately after our callback function runs, all the different properties of that event object get

39
00:02:24,390 --> 00:02:25,830
wiped out and removed.

40
00:02:26,310 --> 00:02:29,760
That might sound really crazy, but let's take a look at the console log that we just got and you're

41
00:02:29,760 --> 00:02:34,230
going to see that in action really quickly because the weird behavior inside of our console.

42
00:02:34,620 --> 00:02:40,200
So notice how when I got the initial console log like that right there, I see that pairs is an array

43
00:02:40,200 --> 00:02:41,600
of length one.

44
00:02:41,610 --> 00:02:45,770
So that means that there is a single element inside of the pairs array.

45
00:02:45,780 --> 00:02:50,040
But if I expand this and look at pairs, it is now empty.

46
00:02:50,550 --> 00:02:54,870
And that is because when we got the initial console log like right here, when we called console.log

47
00:02:54,870 --> 00:02:58,650
on the event object, there was an element inside of that pairs array.

48
00:02:59,370 --> 00:03:04,080
But the way that the Chrome console works is that it doesn't really evaluate or look at these different

49
00:03:04,080 --> 00:03:08,670
properties too closely until you click on that little triangle and expand that thing.

50
00:03:08,820 --> 00:03:14,910
So when you expand that entry right there, Chrome takes another look at that same exact object.

51
00:03:14,920 --> 00:03:19,530
And when it takes that second look, it says, Oh, well, it turns out there's actually nothing in

52
00:03:19,530 --> 00:03:24,960
pairs now because matter is, after it called, our event handler wiped out all the different properties

53
00:03:24,960 --> 00:03:26,190
inside this object.

54
00:03:28,010 --> 00:03:32,240
So that's why we're going to very quickly see some really strange behavior from our console as we start

55
00:03:32,240 --> 00:03:33,410
to log out this thing.

56
00:03:34,040 --> 00:03:38,390
So let's take another look at how we can console, log this thing out and start to get a real better

57
00:03:38,390 --> 00:03:42,680
sense of what's going on inside this event object without having to worry about the fact that all the

58
00:03:42,680 --> 00:03:44,600
properties inside of it get wiped out.

59
00:03:45,460 --> 00:03:51,970
So I'm going to remove the console.log and replace it with event pairs for each.

60
00:03:55,570 --> 00:03:57,730
So as we just saw, Piers is an array.

61
00:03:57,730 --> 00:04:02,650
So I'm going to try to iterate through that array and I'm going to say for every collision.

62
00:04:03,650 --> 00:04:06,920
I want to console.log that collision object.

63
00:04:08,020 --> 00:04:08,120
Okay.

64
00:04:08,200 --> 00:04:09,310
So let's try this again.

65
00:04:10,060 --> 00:04:11,470
If I flip back over.

66
00:04:11,500 --> 00:04:12,490
Oops, refresh.

67
00:04:12,490 --> 00:04:15,310
There we go and get the ball to run into something again.

68
00:04:15,430 --> 00:04:18,130
Now we're going to see a slightly different console log.

69
00:04:18,579 --> 00:04:21,279
So now we get to see what is actually inside of that pairs array.

70
00:04:21,279 --> 00:04:24,900
Whereas before, by the time we looked at it inside of our console, it was already gone.

71
00:04:24,910 --> 00:04:26,080
It already got destroyed.

72
00:04:26,740 --> 00:04:29,890
So now we can see what is actually inside of that pairs array.

73
00:04:29,920 --> 00:04:34,510
We can see that it is some kind of object that has a lot of different properties that describes the

74
00:04:34,510 --> 00:04:36,040
collision that just occurred.

75
00:04:36,800 --> 00:04:38,930
The properties that you and I care about the most.

76
00:04:38,930 --> 00:04:42,200
Is body A right here and Body be.

77
00:04:43,180 --> 00:04:46,930
Those two properties describe the two shapes that just ran into each other.

78
00:04:46,930 --> 00:04:52,600
So we can see that I just had something with the label of Circle Body run into something with the label

79
00:04:52,600 --> 00:04:53,920
of Rectangle Body.

80
00:04:54,070 --> 00:04:58,510
And as you could probably guess, that means that the ball right here ran into one of the walls.

81
00:05:00,140 --> 00:05:05,540
So in order to detect whenever a user gets the ball right here to reach our win condition down at the

82
00:05:05,540 --> 00:05:10,610
bottom right hand side, we need to just inspect the body and body be properties.

83
00:05:10,850 --> 00:05:16,580
And if they are the ball and that little goal, that means that the user must have gotten to the goal

84
00:05:16,580 --> 00:05:18,290
and they must have won the game.

85
00:05:19,720 --> 00:05:23,830
All right, so let's write out some code to detect that kind of collision.

86
00:05:24,700 --> 00:05:26,500
I'm going to first go back over to my editor.

87
00:05:27,010 --> 00:05:31,480
I'm going to go up to the very top and I'm going to change cells down to just three.

88
00:05:31,570 --> 00:05:36,460
The reason for this is that I want to be able to very easily win the maze, like really quickly.

89
00:05:36,490 --> 00:05:39,490
So now this is a lot easier to win than what we had before.

90
00:05:40,190 --> 00:05:42,940
So now if I touch the goal right there.

91
00:05:45,630 --> 00:05:47,070
I can inspect this thing.

92
00:05:49,110 --> 00:05:52,290
I do get multiple accounts of logs here because I accidentally ran into a wall.

93
00:05:52,290 --> 00:05:57,170
So I'm going to make sure that I select a console log that actually represents running into that body.

94
00:05:57,180 --> 00:05:57,690
There we go.

95
00:05:57,690 --> 00:05:58,680
That's one right there.

96
00:05:59,250 --> 00:06:05,550
So now I see that I've got a body, a of rectangle body and again, a body of circle body.

97
00:06:05,550 --> 00:06:07,260
So these labels are not super helpful.

98
00:06:07,260 --> 00:06:13,110
So we need some different way to identify whether or not we just ran into the ball and the actual goal

99
00:06:13,110 --> 00:06:13,770
right there.

100
00:06:14,340 --> 00:06:19,650
So to make sure that we can easily identify when body A and Body B are the ball and the goal, we can

101
00:06:19,650 --> 00:06:24,630
go back to where we create the ball and the goal and we can add in a custom label to each of them.

102
00:06:25,460 --> 00:06:27,680
So I'm going to find where I create the ball right here.

103
00:06:29,700 --> 00:06:32,410
And then as a final argument to this thing.

104
00:06:34,320 --> 00:06:36,180
I'm going to add in an options object.

105
00:06:38,110 --> 00:06:42,580
And to it, I'm going to add in a label a property of simply ball.

106
00:06:43,850 --> 00:06:45,500
I'll then find where I create the ball.

107
00:06:45,770 --> 00:06:46,260
The goal.

108
00:06:46,280 --> 00:06:46,700
Excuse me.

109
00:06:46,700 --> 00:06:47,480
Right above.

110
00:06:47,510 --> 00:06:48,970
So here's the goal right here.

111
00:06:48,990 --> 00:06:51,890
I'm going to add in a label of goal.

112
00:06:52,940 --> 00:06:57,260
So now whenever we see those console logs, we should have a more definitive label for both them.

113
00:06:57,920 --> 00:06:58,940
So I'll save this.

114
00:06:59,330 --> 00:07:00,560
I'm going to flip back over.

115
00:07:00,620 --> 00:07:01,880
I'm going to try to win again.

116
00:07:03,730 --> 00:07:04,450
There we go.

117
00:07:04,660 --> 00:07:09,940
Now, if I inspect the console log, I get a label of goal and a label of wall.

118
00:07:10,450 --> 00:07:15,520
So that's way easier now to detect when we have the ball and the goal contact each other as opposed

119
00:07:15,520 --> 00:07:20,980
to trying to figure out when like one was simply bald and the other was rectangle body because every

120
00:07:20,980 --> 00:07:23,350
rectangle was going to be printed out as rectangle.

121
00:07:24,440 --> 00:07:27,440
It's now back inside of our event handler down here at the very bottom.

122
00:07:28,460 --> 00:07:34,670
We can just do a quick check and see if pair A and a pair B are actually the ball and the goal.

123
00:07:35,700 --> 00:07:40,230
Now if we start to write out in if statement here, we never really know if body a is going to be the

124
00:07:40,230 --> 00:07:44,070
ball or body is going to be the goal and vice versa for body be.

125
00:07:44,580 --> 00:07:49,200
So an easy way to kind of capture this and not have to write out a really long if statement right here

126
00:07:49,200 --> 00:07:53,670
to compare all different possibilities is to create a little array that I'll call labels.

127
00:07:54,740 --> 00:07:56,070
Am I going to have inside there?

128
00:07:56,090 --> 00:07:58,010
Ball and goal.

129
00:07:58,730 --> 00:08:01,940
And then I'll say if labels includes.

130
00:08:03,720 --> 00:08:04,590
Collision.

131
00:08:05,100 --> 00:08:05,890
Dot body.

132
00:08:05,910 --> 00:08:07,980
A dot label.

133
00:08:09,780 --> 00:08:12,660
And if labels includes.

134
00:08:13,870 --> 00:08:16,990
Collision body, big label.

135
00:08:19,070 --> 00:08:20,830
Then the user must have hit the goal.

136
00:08:20,840 --> 00:08:22,610
Let me save that so you can see that whole line.

137
00:08:23,180 --> 00:08:26,420
So inside of here I'll do a console log of user one.

138
00:08:27,250 --> 00:08:27,910
Like so.

139
00:08:28,730 --> 00:08:34,440
So again, if we tried to write out an if statement to just look if body a was ball or goal and body

140
00:08:34,440 --> 00:08:37,760
be was ball or goal, well, that would just be a really long if statement.

141
00:08:37,760 --> 00:08:40,490
So this is just an easy way to kind of collapse it down a little bit.

142
00:08:41,679 --> 00:08:41,770
Okay.

143
00:08:41,830 --> 00:08:42,880
So let's save this.

144
00:08:42,909 --> 00:08:44,700
We'll go back over refresh.

145
00:08:44,710 --> 00:08:48,640
And now I can run into as many things as I want and I don't see any console logs.

146
00:08:48,670 --> 00:08:53,080
It's only when I run into that goal right there that I see the console log of user one.

147
00:08:53,650 --> 00:08:54,640
So that's pretty much it.

148
00:08:54,640 --> 00:08:56,980
That's how a user is going to win the game.

149
00:08:58,050 --> 00:08:59,310
So let's take a pause right here.

150
00:08:59,310 --> 00:09:03,720
Now that we can detect this win, we can start to tell the user, Hey, you won or whatever else we

151
00:09:03,720 --> 00:09:04,470
want to do.

152
00:09:04,500 --> 00:09:05,220
So quick pause.

153
00:09:05,220 --> 00:09:06,900
We'll take care of that in the next video.

