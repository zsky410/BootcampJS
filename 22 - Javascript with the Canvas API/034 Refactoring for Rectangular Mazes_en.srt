1
00:00:01,090 --> 00:00:03,820
In this video, we're going to do a kind of nasty refactor.

2
00:00:03,820 --> 00:00:05,320
So we're going to go through our code.

3
00:00:05,350 --> 00:00:09,940
We're going to find every time that we had a reference to cells and remove it.

4
00:00:10,670 --> 00:00:14,240
We're going to replace it with a reference to cells horizontal or vertical.

5
00:00:15,090 --> 00:00:19,860
We're also going to find every location that we had a reference to unit length X and we will replace

6
00:00:19,860 --> 00:00:22,290
it with a reference to unit length X or Y.

7
00:00:23,060 --> 00:00:27,290
I can tell you right now that the refactor we're about to do is going to be really nasty.

8
00:00:27,530 --> 00:00:31,280
It's very likely that we're going to make a mistake somewhere along the way.

9
00:00:32,110 --> 00:00:34,120
So I know that this is going to be kind of annoying.

10
00:00:34,120 --> 00:00:38,920
Refactor The reason that I decided to do this refactor at the end is that understanding all the maize

11
00:00:38,920 --> 00:00:44,590
generation stuff is just a lot easier when the height and width of the maize was always identical,

12
00:00:44,590 --> 00:00:46,360
and that's what we did from the get go.

13
00:00:46,780 --> 00:00:51,760
It was a lot easier to take that approach and do the refactor later, then to break out the separate

14
00:00:51,760 --> 00:00:55,180
or different values of cells in the horizontal and vertical direction from the get go.

15
00:00:55,210 --> 00:00:57,700
That would have been a lot more challenging right away.

16
00:00:58,060 --> 00:01:00,640
So I apologize for this video in advance.

17
00:01:00,640 --> 00:01:01,660
I'm going to tell you right now.

18
00:01:01,660 --> 00:01:03,430
But nonetheless, we got to get it done.

19
00:01:03,430 --> 00:01:04,750
So let's get to it.

20
00:01:05,019 --> 00:01:08,980
One more time, we're going to go round to find every reference to cells and replace it with one of

21
00:01:08,980 --> 00:01:09,970
these two variables.

22
00:01:10,270 --> 00:01:13,780
Bind every reference to unit length and replace it with one of those two.

23
00:01:14,240 --> 00:01:15,130
Okay, let's start.

24
00:01:16,420 --> 00:01:18,970
So I'm going to first take a look at the walls array right here.

25
00:01:19,210 --> 00:01:25,510
Walls does not have any references to cells or unit length, so no change is required.

26
00:01:26,470 --> 00:01:28,270
Well, then take a look at maize generation.

27
00:01:28,990 --> 00:01:32,620
Nothing inside of Shuffle has any reference to those variables, so no problem.

28
00:01:33,440 --> 00:01:36,290
And we get to the first place that we need to start to do a refactor.

29
00:01:36,290 --> 00:01:39,770
So where we create grid verticals and horizontals.

30
00:01:40,640 --> 00:01:44,150
Let me give you a quick overview of why these things need to change now.

31
00:01:45,060 --> 00:01:48,980
So here's a demonstration or a maze that we eventually want to have put together.

32
00:01:48,990 --> 00:01:53,610
So in this case, we have four columns and three rows.

33
00:01:53,610 --> 00:01:57,660
So let's think about the grid array that we would create to represent this maze.

34
00:01:58,580 --> 00:02:03,110
The grid would have basically the same structure as the maze that we're looking at.

35
00:02:04,730 --> 00:02:07,130
So it would have three rows.

36
00:02:10,229 --> 00:02:14,700
And inside of each of those rows, there would be four elements, one for each column.

37
00:02:15,060 --> 00:02:17,310
So they would all start off as false.

38
00:02:17,310 --> 00:02:19,800
So like false, false, false.

39
00:02:20,740 --> 00:02:23,380
So overall, the grid, the outer array.

40
00:02:24,410 --> 00:02:25,550
His length three.

41
00:02:26,210 --> 00:02:28,820
The inner array is length four.

42
00:02:29,270 --> 00:02:34,100
So we need to update the values that we're passing in here to accommodate for that.

43
00:02:34,580 --> 00:02:39,710
So the outer array that we are creating right there that is going to have the number of rows and our

44
00:02:39,710 --> 00:02:43,790
number of rows if we go all the way back up the top is cells vertical.

45
00:02:43,790 --> 00:02:46,850
So cells vertical is the number of rows that we have.

46
00:02:48,860 --> 00:02:50,690
So I'm going to update a ray cells.

47
00:02:50,690 --> 00:02:52,070
The first call right there.

48
00:02:52,220 --> 00:02:57,620
Two cells vertical, and then the second one will be cells.

49
00:02:58,660 --> 00:03:03,700
Horizontal because remember the inner map or the inner array right here called we have inside the map

50
00:03:03,700 --> 00:03:08,200
statement is building out each inner row and that's going to be the number of columns we have which

51
00:03:08,200 --> 00:03:10,570
is tracked by the cells horizontal variable.

52
00:03:11,930 --> 00:03:16,310
Now we can update the two other arrays that we generate in an identical fashion.

53
00:03:16,340 --> 00:03:19,250
The outer array will be cells vertical.

54
00:03:20,490 --> 00:03:25,140
And down here on horizontal, the outer arrays will be cells vertical minus one.

55
00:03:26,240 --> 00:03:32,000
Then on verticals on the inner array, instead of cells will have cells horizontal.

56
00:03:33,810 --> 00:03:39,630
And on this one right here inside of the horizontals, we will have cells horizontal.

57
00:03:42,030 --> 00:03:42,990
So that's step one.

58
00:03:43,440 --> 00:03:47,910
Next up, we need to find a random start row and a random start column.

59
00:03:48,770 --> 00:03:53,630
So rather than having this be multiplied by just our total number of cells, we now no longer have that

60
00:03:53,630 --> 00:03:54,690
variable, of course.

61
00:03:54,710 --> 00:04:02,300
So we need to calculate either a random number from zero up to our cells horizontal or zero to cells

62
00:04:02,300 --> 00:04:06,560
vertical, depending upon whether we are trying to get a random row or column.

63
00:04:07,190 --> 00:04:11,480
So again, cells vertical corresponds to the number of rows that we have.

64
00:04:11,960 --> 00:04:18,649
So I'm going to change the start row right here to cells vertical and the start column will be some

65
00:04:18,649 --> 00:04:21,860
random number times cells horizontal.

66
00:04:24,320 --> 00:04:24,770
Okay.

67
00:04:25,130 --> 00:04:27,110
Next up, we'll move to step through cell.

68
00:04:27,740 --> 00:04:32,660
Inside of here, we have just one reference to or I guess to right here, one place that we reference

69
00:04:32,660 --> 00:04:33,560
the cells variable.

70
00:04:33,560 --> 00:04:36,020
And that's where we check to see if we are out of balance.

71
00:04:36,890 --> 00:04:42,500
So for next row right here, we're going to make sure that we are not exceeding the total number of

72
00:04:42,500 --> 00:04:43,580
vertical cells we have.

73
00:04:43,580 --> 00:04:49,460
So cells vertical with next column, we're going to make sure we don't exceed the total number of columns.

74
00:04:49,460 --> 00:04:52,910
We have the least cells horizontal.

75
00:04:56,050 --> 00:04:56,410
All right.

76
00:04:56,410 --> 00:04:57,580
Just a little bit more.

77
00:04:57,610 --> 00:05:00,640
Fortunately, the next one is going to be really easy and straightforward.

78
00:05:01,810 --> 00:05:05,920
So I'm going to go down, down, down to where we iterate through horizontals.

79
00:05:07,330 --> 00:05:11,080
So instead of horizontals, we've got a ton of different references to our unit length.

80
00:05:11,320 --> 00:05:15,280
So we need to make sure we update each of these to either unit length, X or Y.

81
00:05:15,610 --> 00:05:19,000
But fortunately, like I said, this is going to be really easy refactor.

82
00:05:19,450 --> 00:05:22,900
Remember the ordering of arguments we pass into the rectangle function?

83
00:05:23,380 --> 00:05:27,370
The first argument is the center of the rectangle in the x direction.

84
00:05:27,370 --> 00:05:32,650
So as you would probably guess, we're going to update unit length both locations inside that first

85
00:05:32,650 --> 00:05:34,510
argument to unit length X.

86
00:05:36,170 --> 00:05:40,520
The second argument is the center point of the rectangle in the Y direction.

87
00:05:40,520 --> 00:05:46,760
So again, as you would guess, we're going to now multiply by unit length Y and add in unit length

88
00:05:46,760 --> 00:05:47,240
y.

89
00:05:48,260 --> 00:05:52,970
And the third argument is the length of the rectangle in the X direction.

90
00:05:53,240 --> 00:05:54,770
So unit length x.

91
00:05:55,900 --> 00:06:00,550
Now take a look at this line right here or this block of code and make sure you do not have any references

92
00:06:00,550 --> 00:06:02,610
to the plain unit length variable.

93
00:06:02,620 --> 00:06:05,290
They should all be either unit length X or Y.

94
00:06:07,640 --> 00:06:07,730
Okay.

95
00:06:07,860 --> 00:06:09,330
So that's it for horizontals.

96
00:06:09,360 --> 00:06:12,330
We'll repeat that same process for the verticals as well.

97
00:06:13,250 --> 00:06:19,760
So again, first line will be unit length X and x second will be unit length y and y.

98
00:06:20,650 --> 00:06:25,210
And this time the fourth argument, which is the height of the rectangle we are creating.

99
00:06:25,240 --> 00:06:26,890
That needs to be of course the height.

100
00:06:26,890 --> 00:06:28,300
So in the vertical direction.

101
00:06:28,300 --> 00:06:29,860
So unit length y.

102
00:06:33,440 --> 00:06:33,850
Okay.

103
00:06:33,860 --> 00:06:35,210
Just a little bit more.

104
00:06:35,420 --> 00:06:38,570
I know I said this was a nasty refactor, but we're almost done with it.

105
00:06:39,580 --> 00:06:43,030
So for the goal right here we are multiplying by the unit length.

106
00:06:43,420 --> 00:06:45,790
Again, we've got the same ordering of arguments.

107
00:06:45,790 --> 00:06:49,870
So the first and third arguments need to take a look at the unit length in the X direction.

108
00:06:50,290 --> 00:06:51,730
So here's the first argument.

109
00:06:51,730 --> 00:06:52,840
Should go to X.

110
00:06:53,020 --> 00:06:54,760
Third argument should go to X.

111
00:06:55,490 --> 00:06:58,790
And then the second and fourth arguments are concerned with the Y direction.

112
00:06:58,790 --> 00:07:02,270
So we'll do a unit length y and y.

113
00:07:03,790 --> 00:07:04,870
So unit length.

114
00:07:05,670 --> 00:07:08,880
X, y, then x and y.

115
00:07:11,270 --> 00:07:11,630
All right.

116
00:07:11,630 --> 00:07:12,510
Last a little bit.

117
00:07:12,530 --> 00:07:13,940
Here's our ball right here.

118
00:07:15,530 --> 00:07:18,200
So we've got three references to the unit length.

119
00:07:18,530 --> 00:07:22,940
Remember, the first and second are the X and Y center points of the ball.

120
00:07:23,150 --> 00:07:27,890
So we're going to change the first to X, the second to Y.

121
00:07:28,650 --> 00:07:33,120
And then the third argument right here is going to be the radius of the ball.

122
00:07:34,430 --> 00:07:39,650
So for the race to the ball, we might have a very different lengthy X direction in the Y direction.

123
00:07:39,650 --> 00:07:45,350
So we should really take the minimum of those two and use that to decide exactly what the radius should

124
00:07:45,350 --> 00:07:45,770
be.

125
00:07:46,100 --> 00:07:50,270
So on the line right above, I'm going to declare a new variable called Ball Radius.

126
00:07:51,220 --> 00:07:53,680
This will be math min.

127
00:07:55,420 --> 00:08:01,120
Of the unit length in the X direction and the unit length in the Y direction.

128
00:08:01,120 --> 00:08:06,880
So find whichever of those two is lesser and then we're going to divide it by two.

129
00:08:11,320 --> 00:08:13,120
And then I'm going to take out.

130
00:08:15,080 --> 00:08:19,010
The third argument right here and replace it with ball radius.

131
00:08:19,010 --> 00:08:22,360
And, you know, I just realized I made the same mistake I did before the ball.

132
00:08:22,370 --> 00:08:28,640
We are providing a radius here so we actually want to do two divided by four after the method in.

133
00:08:31,500 --> 00:08:32,520
So that should be it.

134
00:08:32,909 --> 00:08:36,929
So now at this point in time, we should be able to do a search on this file for unit length.

135
00:08:36,929 --> 00:08:41,340
And if we search around, we should not find any reference to a variable that says just unit length

136
00:08:41,340 --> 00:08:42,210
by itself.

137
00:08:42,480 --> 00:08:47,070
So as I go around, I should see everywhere unit length X and unit length y.

138
00:08:48,330 --> 00:08:50,390
I should will do the same thing for cells as well.

139
00:08:50,400 --> 00:08:54,870
I should build a search for cells and see everywhere either cells horizontal or cells vertical.

140
00:08:55,850 --> 00:08:58,070
So once I've done that check, I'll then save the file.

141
00:08:58,250 --> 00:09:00,570
I'm going to go back over and refresh.

142
00:09:00,590 --> 00:09:01,580
And that should be it.

143
00:09:01,580 --> 00:09:07,340
I should now have my maize showing up in a properly scaled fashion, no matter what the dimensions of

144
00:09:07,340 --> 00:09:08,210
my window are.

145
00:09:09,660 --> 00:09:15,850
If you refresh and you see an error, I can 100% guarantee you that you just made a typo.

146
00:09:15,870 --> 00:09:19,320
So at some location, you put in a reference to the wrong variable.

147
00:09:19,350 --> 00:09:24,090
Take a look at the error message and take a look at what line it told you that the error occurred on.

148
00:09:24,240 --> 00:09:29,490
You can then go to that line inside of your index file and that will tell you exactly where the typo

149
00:09:29,490 --> 00:09:30,060
is.

150
00:09:30,330 --> 00:09:33,000
Again, if you have an error where you didn't before.

151
00:09:33,930 --> 00:09:35,130
No two ways about it.

152
00:09:35,130 --> 00:09:38,100
I absolutely, positively guarantee you you have a typo.

153
00:09:38,100 --> 00:09:40,350
So just make sure you take a look and figure out where it is.

154
00:09:41,100 --> 00:09:41,370
Okay.

155
00:09:41,370 --> 00:09:45,720
So again, I know that refactor is painful, but if we close our console and then refresh, we're going

156
00:09:45,720 --> 00:09:49,080
to see that we get this nicely scaled, different sized maze.

157
00:09:49,440 --> 00:09:53,370
Now we can do some really interesting things so we can have different number of cells in the horizontal

158
00:09:53,370 --> 00:09:54,450
or vertical direction.

159
00:09:54,450 --> 00:09:59,220
So for example, I can have 14 cells in the horizontal and just ten in the vertical.

160
00:09:59,670 --> 00:10:01,920
And if I save that, there we go.

161
00:10:03,090 --> 00:10:07,170
And now it doesn't appear that the maze is super squished or anything like that because we are allowing

162
00:10:07,170 --> 00:10:08,610
for the different number of cells.

163
00:10:09,120 --> 00:10:10,890
So now we can play this thing.

164
00:10:13,570 --> 00:10:17,530
You don't have to watch me play it, but I'm going to just solve it really quickly.

165
00:10:18,130 --> 00:10:18,760
Come on.

166
00:10:19,270 --> 00:10:20,530
Yeah, if you don't want to watch.

167
00:10:20,560 --> 00:10:21,530
Just pause here.

168
00:10:21,550 --> 00:10:22,390
Move to the next video.

169
00:10:22,390 --> 00:10:23,260
But I've almost got it.

170
00:10:23,290 --> 00:10:23,900
There we go.

171
00:10:23,920 --> 00:10:24,520
Done.

172
00:10:25,720 --> 00:10:25,990
All right.

173
00:10:25,990 --> 00:10:27,250
Well, I'd say that looks pretty good.

174
00:10:27,730 --> 00:10:30,880
It's the last thing I want to do is just add in a little bit of color to this thing.

175
00:10:30,880 --> 00:10:35,270
And I also want to throw a big message on the center of the screen whenever the user wins as well.

176
00:10:35,290 --> 00:10:37,600
So last little task in the next video.

